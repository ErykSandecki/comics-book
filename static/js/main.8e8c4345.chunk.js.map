{"version":3,"sources":["store/channels/actionsType.ts","assets/images/backgrounds/error.svg","components/ErrorPage/ErrorPage.tsx","assets/images/icons/send-icon.svg","assets/images/icons/send-disabled-icon.svg","store/channels/actions.ts","store/profiles/actionsType.ts","store/profiles/selectors.ts","enums.ts","components/Chat/ChatInput/ChatInput.tsx","assets/images/backgrounds/empty-messages.svg","store/channels/selectors.ts","components/Chat/ChatMessages/ChatMessages.tsx","core/ContextProvider/ContextProvider.tsx","components/Firebase/enums.ts","components/Chat/Chat.tsx","assets/images/icons/update-icon.svg","components/ModalNewUpdates/constants.ts","components/ModalNewUpdates/ModalNewUpdates.tsx","components/ProfilePickerSection/enums.ts","components/Firebase/services/getRefDatabase.ts","components/OnlineHandler/useOnDisconnectHandlers.ts","store/profiles/actions.ts","components/OnlineHandler/OnlineHandler.tsx","components/NavMenu/NavMenuCreateChannelForm/NavMenuCreateChannelForm.tsx","assets/images/icons/plus-white-icon.svg","components/NavMenu/NavMenuChannels/NavMenuChannels.tsx","assets/images/icons/offline-icon.svg","assets/images/icons/online-icon.svg","services/isOnlineUser.ts","constants.ts","components/NavMenu/NavMenuProfiles/NavMenuProfiles.tsx","assets/images/icons/close-white-icon.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/close-icon.svg","assets/images/icons/gear-icon.svg","assets/images/icons/modify-size-icon.svg","components/PageHeader/PageHeaderSettingsMenu/PageHeaderSettingsMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","components/ProfileForm/ProfileForm.tsx","components/CreateProfileForm/CreateProfileForm.tsx","components/ProfilePicker/useOutsideClickCard.ts","components/ProfilePicker/usePress.ts","assets/images/icons/edit-icon.svg","assets/images/icons/plus.svg","assets/images/icons/trash-icon.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","store/selectors.ts","components/Page/Page.tsx","components/App/App.tsx","store/auth/actions.ts","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/channels/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/saga.ts","store/auth/watch.ts","components/Firebase/services/generateId.ts","store/channels/saga.ts","store/channels/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["ChannelsActionsType","ErrorPage","className","alt","src","Background","REDUCER_KEY","ProfilesActionsType","createChannelError","payload","type","createChannelsError","sendMessageError","setChannelId","LocalStorageKey","StoragePath","profilesSelector","getFp","isPendingSelector","createSelector","profilesLoadedSelector","composeFp","isArrayFp","getAttributeFromProfiles","attribute","getAttributesFromSelectedProfile","data","selectedProfileId","findFp","profileId","getAttributeFromSelectedProfile","ChatInput","forwardRef","ref","channelName","inputHandler","dispatch","useDispatch","useState","content","setContent","visibilityPlaceholder","setVisibilityPlaceholder","useSelector","profileName","name","avatarSrc","contentEditable","onBlur","onFocus","onInput","event","target","innerText","trim","suppressContentEditableWarning","spellCheck","onClick","time","Date","getTime","sendMessage","SendIcon","SendDisabledIcon","channelsSelector","channelsLoadedSelector","getAttributeFromChannels","headFp","getAttributesFromSelectedChannel","channels","selectedChannelId","channelId","getAttributeFromSelectedChannel","ChatMessages","_","messages","length","EmptyMessages","map","index","DatabaseColumns","Context","createContext","margin","setMargin","ContextProvider","children","parseInt","localStorage","getItem","marginOffset","Provider","value","result","setItem","Chat","inputRef","useRef","messagesRef","useContext","style","height","current","clientHeight","calculatedHeight","maxHeight","UPDATE_DETAILS","CURRENT_VERSION","ModalNewUpdates","visible","setVisible","savedVersion","version","onClickHandler","useEffect","setTimeout","Modal","closeAfterTransition","open","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","UpdateIcon","description","Button","variant","Mode","getRefDatabase","path","refDataBase","firebase","database","i","child","useOnDisconnectHandlers","indexProfile","disconnectProfile","profiles","onDisconnect","set","createProfileError","uploadImageFinished","OnlineHandler","findIndex","updateTimeProfile","NavMenuCreateChannelForm","closeModal","openNotifiaction","setName","shortcut","setShortcut","isSubmitted","setIsSubmitted","isPending","onSubmit","preventDefault","toUpperCase","createChannel","TextField","onChange","e","label","inputProps","maxLength","color","disabled","size","CircularProgress","NavMenuChannels","closeNavMenu","setOpen","Alert","props","elevation","PlusWhiteIcon","Snackbar","autoHideDuration","severity","isOnlineUser","lastTimeFromSelectedProfile","lastUpdateFromTimeSomeProfile","online","NavMenuProfiles","lastUpdateTime","getIconPath","lastUpdateTimeProfile","OnlineIcon","OfflineIcon","filter","NavMenu","stopPropagation","CloseWhiteIcon","PageHeaderSettingsMenu","anchorEl","setAnchorEl","onClickCloseHandler","currentTarget","GearIcon","Menu","id","keepMounted","Boolean","MenuItem","ModifySizeIcon","CloseIcon","PageHeader","reduce","total","HamburgerMenu","loadImage","setImageData","reader","FileReader","files","onload","file","readAsDataURL","ProfileForm","clickHandler","initialName","imageData","initialImageData","submitHandler","title","BackIcon","backToProfileList","EmptyImage","click","ButtonPicture","CreateProfileForm","restProps","formData","createProfile","useOutsideClickCard","isFocus","setFocus","eventType","isMobile","handleClickOutside","contains","document","addEventListener","removeEventListener","isTouchEvent","touches","usePress","pressHandler","shouldPreventDefault","delay","longPressTriggered","setLongPressTriggered","start","useCallback","passive","clear","shouldTriggerClick","clearTimeout","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","clearManual","ProfilePicker","mode","cardRef","overlayVisible","setOverlayVisible","isOverlayVisible","restPropsPress","PlusIcon","EditIcon","TrashIcon","AuthActionsType","ProfilePickerList","selectProfile","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","authSelector","errorMessageSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","channelsData","Page","get","App","theme","useMemo","createMuiTheme","palette","password","prompt","indexedDB","deleteDatabase","login","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","push","databaseSuccessHandler","response","actions","val","databaseHandler","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","channelsActions","fetchChannelsSuccess","initialState","loginSuccess","state","loginError","createChannelSuccess","fetchChannelsError","createProfileSuccess","fetchProfilesError","setProfileId","reducers","auth","action","createRootReducer","combineReducers","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","generateId","keyId","characters","splice","charAt","Math","floor","random","find","join","select","indexOfChannel","sendMessageSuccess","watchChannels","uploadImage","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","take","selectProfileError","updateTimeProfileError","watchProfiles","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8e8c4345.chunk.js","sourcesContent":["// @ts-nocheck\nexport const REDUCER_KEY = 'channels';\n\nexport enum ChannelsActionsType {\n  createChannel = `${REDUCER_KEY}/createChannel`,\n  createChannelSuccess = `${REDUCER_KEY}/createChannelSuccess`,\n  createChannelsError = `${REDUCER_KEY}/createChannelsError`,\n  fetchChannelsSuccess = `${REDUCER_KEY}/fetchChannelsSuccess`,\n  fetchChannelsError = `${REDUCER_KEY}/fetchChannelsError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  sendMessage = `${REDUCER_KEY}/sendMessage`,\n  sendMessageSuccess = `${REDUCER_KEY}/sendMessageSuccess`,\n  sendMessageError = `${REDUCER_KEY}/sendMessageError`,\n  setChannelId = `${REDUCER_KEY}/setChannelId`,\n}\n","export default __webpack_public_path__ + \"static/media/error.6a233495.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Background from '../../assets/images/backgrounds/error.svg';\n\n// styles\nimport './error-page-styles.scss';\n\nconst ErrorPage: FunctionComponent = () => (\n  <section className=\"ErrorPage\">\n    <img\n      alt=\"background-error\"\n      className=\"ErrorPage__background\"\n      src={Background}\n    />\n  </section>\n);\n\nexport default ErrorPage;\n","export default __webpack_public_path__ + \"static/media/send-icon.d7969ca4.svg\";","export default __webpack_public_path__ + \"static/media/send-disabled-icon.53fba88d.svg\";","// others\nimport {\n  TChannel,\n  TCreateChannel,\n  TCreateChannelError,\n  TCreateChannelSuccess,\n  TFetchChannelsError,\n  TFetchChannelsSuccess,\n  TMessage,\n  TSendMessage,\n  TSendMessageError,\n  TSendMessageSuccess,\n  TSetChannelId,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\n\nexport const createChannel = (\n  payload: Omit<TChannel, 'chanelId' | 'messages'>\n): TCreateChannel => ({\n  type: ChannelsActionsType.createChannel,\n  payload,\n});\n\nexport const createChannelSuccess = (): TCreateChannelSuccess => ({\n  type: ChannelsActionsType.createChannelSuccess,\n});\n\nexport const createChannelError = (payload: string): TCreateChannelError => ({\n  type: ChannelsActionsType.createChannelsError,\n  payload,\n});\n\nexport const fetchChannelsSuccess = (\n  payload: Array<TChannel>\n): TFetchChannelsSuccess => ({\n  type: ChannelsActionsType.fetchChannelsSuccess,\n  payload,\n});\n\nexport const fetchChannelsError = (): TFetchChannelsError => ({\n  type: ChannelsActionsType.fetchChannelsError,\n});\n\nexport const sendMessage = (payload: TMessage): TSendMessage => ({\n  type: ChannelsActionsType.sendMessage,\n  payload,\n});\n\nexport const sendMessageSuccess = (): TSendMessageSuccess => ({\n  type: ChannelsActionsType.sendMessageSuccess,\n});\n\nexport const sendMessageError = (payload: string): TSendMessageError => ({\n  type: ChannelsActionsType.sendMessageError,\n  payload,\n});\n\nexport const setChannelId = (payload: string): TSetChannelId => ({\n  type: ChannelsActionsType.setChannelId,\n  payload,\n});\n","// @ts-nocheck\nexport const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  createProfile = `${REDUCER_KEY}/createProfile`,\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  selectProfile = `${REDUCER_KEY}/selectProfile`,\n  selectProfileError = `${REDUCER_KEY}/selectProfileError`,\n  updateTimeProfile = `${REDUCER_KEY}/updateTimeProfile`,\n  updateTimeProfileError = `${REDUCER_KEY}/updateTimeProfileError`,\n}\n","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TProfile, TProfilesState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(profilesSelector, getFp('isPending'));\n\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\n\nexport const getAttributeFromProfiles = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(profilesSelector, getFp(attribute));\n\n// @ts-ignore\nexport const getAttributesFromSelectedProfile: Selector<TMainState, TProfile> =\n  createSelector(profilesSelector, ({ data, selectedProfileId }) =>\n    findFp(({ profileId }) => profileId === selectedProfileId, data)\n  );\n\nexport const getAttributeFromSelectedProfile = (\n  attribute: string\n): Selector<TMainState, TProfile> =>\n  createSelector(getAttributesFromSelectedProfile, getFp(attribute));\n","export enum LocalStorageKey {\n  marginOffset = 'MARGIN_OFFSET',\n  version = 'VERSION',\n}\n\nexport enum StoragePath {\n  profiles = 'PROFILES',\n}\n","// @ts-nocheck\nimport {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n  useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// others\nimport SendIcon from '../../../assets/images/icons/send-icon.svg';\nimport SendDisabledIcon from '../../../assets/images/icons/send-disabled-icon.svg';\nimport { TProfile } from '../../../store/profiles/types';\n\n// store\nimport { sendMessage } from '../../../store/channels/actions';\nimport { getAttributesFromSelectedProfile } from '../../../store/profiles/selectors';\n\n// styles\nimport './chat-input-styles.scss';\n\ntype TProps = {\n  channelName: string;\n  inputHandler: (event: Event) => void;\n};\n\nconst ChatInput: ForwardRefExoticComponent<\n  TProps & RefAttributes<HTMLDivElement>\n> = forwardRef<HTMLDivElement, TProps>(({ channelName, inputHandler }, ref) => {\n  const dispatch = useDispatch();\n  const [content, setContent] = useState('');\n  const [visibilityPlaceholder, setVisibilityPlaceholder] = useState(true);\n  const {\n    name: profileName,\n    src: avatarSrc,\n    profileId,\n  }: TProfile = useSelector(getAttributesFromSelectedProfile);\n\n  const onBlurHandler = (): void => {\n    if (!content) {\n      setVisibilityPlaceholder(true);\n    }\n  };\n\n  const onInputHandler = (event: Event): void => {\n    const { target } = event;\n\n    setContent(target.innerText.trim());\n    inputHandler();\n  };\n\n  const onSubmitHandler = () => {\n    if (content) {\n      dispatch(\n        sendMessage({\n          avatarSrc,\n          content,\n          profileName,\n          profileId,\n          time: new Date().getTime(),\n        })\n      );\n    }\n  };\n\n  return (\n    <div className=\"ChatInput\" ref={ref}>\n      <p\n        className=\"ChatInput__text-field\"\n        contentEditable={true}\n        onBlur={onBlurHandler}\n        onFocus={() => setVisibilityPlaceholder(false)}\n        onInput={onInputHandler}\n        suppressContentEditableWarning\n        spellCheck={true}\n      />\n      {visibilityPlaceholder && (\n        <span className=\"ChatInput__placeholder\">Message #{channelName}:</span>\n      )}\n      <img\n        alt=\"send-icon\"\n        className=\"ChatInput__send-icon\"\n        onClick={onSubmitHandler}\n        src={content ? SendIcon : SendDisabledIcon}\n      />\n    </div>\n  );\n});\n\nexport default ChatInput;\n","export default __webpack_public_path__ + \"static/media/empty-messages.285e086d.svg\";","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport headFp from 'lodash/head';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TChannel, TChannelsState } from './types';\n\nexport const channelsSelector: Selector<TMainState, TChannelsState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(channelsSelector, getFp('isPending'));\n\nexport const channelsLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(channelsSelector, composeFp(isArrayFp, getFp('channels')));\n\nexport const getDefaultChannelId: Selector<TMainState, TChannel> =\n  createSelector(\n    channelsSelector,\n    composeFp(getFp('channelId'), headFp, getFp('channels'))\n  );\n\nexport const getAttributeFromChannels = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(channelsSelector, getFp(attribute));\n\n// @ts-ignore\nexport const getAttributesFromSelectedChannel: Selector<TMainState, TChannel> =\n  createSelector(channelsSelector, ({ channels, selectedChannelId }) =>\n    findFp(({ channelId }) => channelId === selectedChannelId, channels)\n  );\n\nexport const getAttributeFromSelectedChannel = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(getAttributesFromSelectedChannel, getFp(attribute));\n","// @ts-nocheck\nimport { forwardRef, ForwardRefExoticComponent, RefAttributes } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport EmptyMessages from '../../../assets/images/backgrounds/empty-messages.svg';\nimport { TMessage } from '../../../store/channels/types';\n\n// store\nimport { getAttributeFromSelectedChannel } from '../../../store/channels/selectors';\n\n// styles\nimport './chat-messages-styles.scss';\n\nconst ChatMessages: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>> =\n  forwardRef<HTMLDivElement, {}>((_, ref) => {\n    const messages: Array<TMessage> =\n      useSelector(getAttributeFromSelectedChannel('messages')) || [];\n\n    return (\n      <section className=\"ChatMessages\" ref={ref}>\n        {messages.length === 0 ? (\n          <div className=\"ChatMessages__empty\">\n            <img alt=\"empty-messages\" src={EmptyMessages} />\n            <p className=\"ChatMessages__suggestion\">\n              No messages! You can start a conversation on this channel.\n            </p>\n          </div>\n        ) : (\n          messages.map(({ avatarSrc, content, profileName }, index) => (\n            <div className=\"ChatMessages__wrapper\" key={index}>\n              <img\n                alt=\"avatar\"\n                className=\"ChatMessages__avatar\"\n                src={avatarSrc}\n              />\n              <div className=\"ChatMessages__content\">\n                <p className=\"ChatMessages__profile-name\">\n                  <b>{profileName}</b>\n                </p>\n                <p className=\"ChatMessages__content\">{content}</p>\n              </div>\n            </div>\n          ))\n        )}\n      </section>\n    );\n  });\n\nexport default ChatMessages;\n","// @ts-nocheck\nimport { createContext, FunctionComponent, ReactNode, useState } from 'react';\n\n// other\nimport { LocalStorageKey } from '../../enums';\n\ntype TProps = {\n  children: ReactNode;\n};\n\nexport const Context: React.Context<any> = createContext({\n  margin: 0,\n  setMargin: () => {},\n});\n\nconst getMarginFromLocalStorage = (): number =>\n  parseInt(localStorage.getItem(LocalStorageKey.marginOffset) || 0);\n\nconst ContextProvider: FunctionComponent<TProps> = ({ children }) => {\n  const [margin, setMargin] = useState(getMarginFromLocalStorage());\n\n  const setMarginHandler = (value: number): void => {\n    const result = margin + value;\n\n    if (margin > 0 || value !== -1) {\n      setMargin(result);\n      localStorage.setItem(LocalStorageKey.marginOffset, result);\n    }\n  };\n\n  return (\n    <Context.Provider value={{ margin, setMargin: setMarginHandler }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n  channels = 'channels',\n}\n","// @ts-nocheck\nimport { FunctionComponent, useContext, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport ChatInput from './ChatInput/ChatInput';\nimport ChatMessages from './ChatMessages/ChatMessages';\n\n// core\nimport { Context } from '../../core/ContextProvider/ContextProvider';\n\n// others\nimport { TContext } from '../../core/ContextProvider/types';\n\n// store\nimport { getAttributeFromSelectedChannel } from '../../store/channels/selectors';\n\n// styles\nimport './chat-styles.scss';\n\nconst Chat: FunctionComponent<{}> = () => {\n  const inputRef = useRef(null);\n  const messagesRef = useRef(null);\n  const name = useSelector(getAttributeFromSelectedChannel('name'));\n  const { margin }: TContext = useContext(Context);\n\n  const onInputHandler = (): void => {\n    const height = inputRef.current.clientHeight;\n    const calculatedHeight = `calc(100% - ${height}px)`;\n\n    messagesRef.current.style.height = calculatedHeight;\n    messagesRef.current.style.maxHeight = calculatedHeight;\n  };\n\n  return (\n    <section\n      className=\"Chat\"\n      style={{ height: `calc(100vh - ${80 + margin}px)` }}\n    >\n      <ChatMessages ref={messagesRef} />\n      <ChatInput\n        channelName={name}\n        inputHandler={onInputHandler}\n        ref={inputRef}\n      />\n    </section>\n  );\n};\n\nexport default Chat;\n","export default __webpack_public_path__ + \"static/media/update-icon.82e7731f.svg\";","export const UPDATE_DETAILS = [\n  'Application access by password',\n  'Ability to create profiles',\n  'Ability to create channels',\n  'Status of active brothers-in-law',\n  'Application adapted to all devices',\n  'Ability to write on the channel',\n  'Status on the number of active brothers-in-law',\n  'Ability to send messages',\n];\nexport const CURRENT_VERSION = '1.0.0';\n","import { FunctionComponent, useEffect, useState } from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Button from '@material-ui/core/Button';\nimport Fade from '@material-ui/core/Fade';\nimport Modal from '@material-ui/core/Modal';\n\n// others\nimport UpdateIcon from '../../assets/images/icons/update-icon.svg';\nimport { UPDATE_DETAILS, CURRENT_VERSION } from './constants';\nimport { LocalStorageKey } from '../../enums';\n\n// styles\nimport './modal-new-updates-styles.scss';\n\nconst ModalNewUpdates: FunctionComponent = () => {\n  const [visible, setVisible] = useState(false);\n  const savedVersion = localStorage.getItem(LocalStorageKey.version) || '';\n\n  const onClickHandler = (): void => {\n    localStorage.setItem(LocalStorageKey.version, CURRENT_VERSION);\n    setVisible(false);\n  };\n\n  useEffect(() => {\n    if (savedVersion !== CURRENT_VERSION) {\n      setTimeout(() => {\n        setVisible(true);\n      }, 1000);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Modal\n      className=\"ModalNewUpdates\"\n      closeAfterTransition\n      open={visible}\n      onClose={onClickHandler}\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={visible}>\n        <div className=\"ModalNewUpdates__container\">\n          <div className=\"ModalNewUpdates__wrapper\">\n            {/* ICON */}\n            <div className=\"ModalNewUpdates__icon\">\n              <img alt=\"update-icon\" src={UpdateIcon} />\n            </div>\n\n            {/* DETAILS */}\n            <div className=\"ModalNewUpdates__content\">\n              <h4 className=\"ModalNewUpdates__title\">\n                New Update: {CURRENT_VERSION}\n              </h4>\n              <ul className=\"ModalNewUpdates__details\">\n                {UPDATE_DETAILS.map((description) => (\n                  <li className=\"ModalNewUpdates__item\" key={description}>\n                    <p className=\"ModalNewUpdates__description\">\n                      {description}.\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          <Button\n            className=\"ModalNewUpdates__submit\"\n            onClick={onClickHandler}\n            variant=\"outlined\"\n          >\n            Understand\n          </Button>\n        </div>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default ModalNewUpdates;\n","export enum Mode {\n  createProfile = 'createProfile',\n  listProfiles = 'listProfiles',\n}\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\n// others\nimport { DatabaseColumns } from '../Firebase/enums';\n\n// services\nimport getRefDatabase from '../Firebase/services/getRefDatabase';\n\nconst useOnDisconnectHandlers = (indexProfile: number) => {\n  const disconnectProfile = () =>\n    getRefDatabase([DatabaseColumns.profiles, indexProfile, 'online'])\n      .onDisconnect()\n      .set(false);\n\n  return {\n    disconnectProfile,\n  };\n};\n\nexport default useOnDisconnectHandlers;\n","import { TUpdateTimeProfileError } from './types';\n// others\nimport { TReturnablePayload } from './../common/types';\nimport {\n  TCreateProfile,\n  TCreateProfileSuccess,\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TFetchProfilesError,\n  TProfile,\n  TProfileFormData,\n  TUploadImageFinished,\n  TSelectProfile,\n  TSelectProfileError,\n  TUpdateTimeProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\n\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\n  type: ProfilesActionsType.createProfile,\n  payload,\n});\n\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\n  type: ProfilesActionsType.createProfileSuccess,\n});\n\nexport const createProfileError = (payload: string): TCreateProfileError => ({\n  type: ProfilesActionsType.createProfileError,\n  payload,\n});\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n\nexport const uploadImageFinished = (\n  payload: TReturnablePayload\n): TUploadImageFinished => ({\n  type: ProfilesActionsType.uploadImageFinished,\n  payload,\n});\n\nexport const selectProfile = (payload: string): TSelectProfile => ({\n  type: ProfilesActionsType.selectProfile,\n  payload,\n});\n\nexport const selectProfileError = (payload: string): TSelectProfileError => ({\n  type: ProfilesActionsType.selectProfileError,\n  payload,\n});\n\nexport const updateTimeProfile = (payload: string): TUpdateTimeProfile => ({\n  type: ProfilesActionsType.updateTimeProfile,\n  payload,\n});\n\nexport const updateTimeProfileError = (\n  payload: string\n): TUpdateTimeProfileError => ({\n  type: ProfilesActionsType.updateTimeProfileError,\n  payload,\n});\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// hooks\nimport useOnDisconnectHandlers from './useOnDisconnectHandlers';\n\n// others\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { updateTimeProfile } from '../../store/profiles/actions';\n\nconst OnlineHandler: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const indexProfile = profiles.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n  const { disconnectProfile } = useOnDisconnectHandlers(indexProfile);\n\n  useEffect(() => {\n    disconnectProfile();\n    dispatch(updateTimeProfile(selectedProfileId));\n    // eslint-disable-next-line\n  }, []);\n\n  return null;\n};\n\nexport default OnlineHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// store\nimport { createChannel } from '../../../store/channels/actions';\nimport { isPendingSelector } from '../../../store/channels/selectors';\n\n// styles\nimport './nav-menu-create-channel-form-styles.scss';\n\ntype TProps = {\n  closeModal: () => void;\n  openNotifiaction: () => void;\n};\n\nconst NavMenuCreateChannelForm: FunctionComponent<TProps> = ({\n  closeModal,\n  openNotifiaction,\n}) => {\n  const [name, setName] = useState('');\n  const [shortcut, setShortcut] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n\n  const onSubmitHandler = (event: Event): void => {\n    event.preventDefault();\n\n    if (name && shortcut) {\n      dispatch(createChannel({ name, shortcut: shortcut.toUpperCase() }));\n      setIsSubmitted(true);\n    }\n  };\n\n  useEffect(() => {\n    if (!isPending && isSubmitted) {\n      closeModal();\n      openNotifiaction();\n    }\n    // eslint-disable-next-line\n  }, [isPending, isSubmitted]);\n\n  return (\n    <form className=\"NavMenuCreateChannelForm\" onSubmit={onSubmitHandler}>\n      <h2>Create channel:</h2>\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setName(e.target.value)}\n        label=\"Channel name:\"\n        value={name}\n      />\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setShortcut(e.target.value)}\n        label=\"Shortcut channel name eg. (ME):\"\n        inputProps={{ maxLength: 2 }}\n        value={shortcut}\n      />\n      <Button\n        className=\"ProfileForm__submit-button\"\n        color=\"primary\"\n        disabled={isPending}\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n      >\n        Create Channel\n        {isPending && (\n          <CircularProgress\n            className=\"ProfileForm__spinner\"\n            color=\"primary\"\n            size={20}\n          />\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default NavMenuCreateChannelForm;\n","export default __webpack_public_path__ + \"static/media/plus-white-icon.abb60e4a.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n// components\nimport NavMenuCreateChannelForm from '../NavMenuCreateChannelForm/NavMenuCreateChannelForm';\n\n// others\nimport PlusWhiteIcon from '../../../assets/images/icons/plus-white-icon.svg';\nimport { TChannel } from '../../../store/channels/types';\n\n// store\nimport { getAttributeFromChannels } from '../../../store/channels/selectors';\nimport { setChannelId } from '../../../store/channels/actions';\n\n// styles\nimport './nav-menu-channels-styles.scss';\n\ntype TProps = {\n  closeNavMenu: () => void;\n};\n\nconst NavMenuChannels: FunctionComponent<TProps> = ({ closeNavMenu }) => {\n  const [open, setOpen] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const dispatch = useDispatch();\n  const channels: Array<TChannel> = useSelector(\n    getAttributeFromChannels('channels')\n  );\n\n  const Alert = (props: AlertProps) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  };\n\n  const onClickHandler = (channelId: string): void => {\n    closeNavMenu();\n    dispatch(setChannelId(channelId));\n  };\n\n  return (\n    <div className=\"NavMenuChannels\">\n      {/* NAV */}\n      <div className=\"NavMenuChannels__nav\">\n        <p className=\"NavMenuChannels__title\">Channels</p>\n        <img\n          alt=\"plus-white-icon\"\n          className=\"NavMenuChannels__button\"\n          onClick={() => setVisible(true)}\n          src={PlusWhiteIcon}\n        />\n      </div>\n      {/* CHANNELS */}\n      <div className=\"NavMenuChannels__channels\">\n        {channels.map(({ channelId, name }) => (\n          <p\n            className=\"NavMenuChannels__channel-name\"\n            key={channelId}\n            onClick={() => onClickHandler(channelId)}\n          >\n            #{name}\n          </p>\n        ))}\n      </div>\n\n      {/* MODAL */}\n      <Modal\n        className=\"NavMenuChannels__modal\"\n        closeAfterTransition\n        open={visible}\n        onClose={() => setVisible(false)}\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={visible}>\n          <div className=\"NavMenuChannels__card\">\n            <NavMenuCreateChannelForm\n              closeModal={() => setVisible(false)}\n              openNotifiaction={() => setOpen(true)}\n            />\n          </div>\n        </Fade>\n      </Modal>\n\n      {/* NOTIFICATION */}\n      <Snackbar\n        open={open}\n        className=\"NavMenuChannels__snackbar\"\n        autoHideDuration={5000}\n        onClose={() => setOpen(false)}\n      >\n        <Alert onClose={() => setOpen(false)} severity=\"success\">\n          Channel has been added!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default NavMenuChannels;\n","export default __webpack_public_path__ + \"static/media/offline-icon.e258b94e.svg\";","export default __webpack_public_path__ + \"static/media/online-icon.f3194dda.svg\";","// others\nimport { TIME_TO_COMPARE } from '../constants';\n\nconst isOnlineUser = (\n  lastTimeFromSelectedProfile: number,\n  lastUpdateFromTimeSomeProfile: number,\n  online: boolean\n): boolean =>\n  online &&\n  lastTimeFromSelectedProfile - lastUpdateFromTimeSomeProfile < TIME_TO_COMPARE;\n\nexport default isOnlineUser;\n","export const EMAIL = 'eryk.sandecki@gmail.com';\nexport const UPDATE_DELAY_TIME = 60000;\nexport const TIME_TO_COMPARE = 90000;\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport OfflineIcon from '../../../assets/images/icons/offline-icon.svg';\nimport OnlineIcon from '../../../assets/images/icons/online-icon.svg';\nimport { TProfile } from '../../../store/profiles/types';\n\n// services\nimport isOnlineUser from '../../../services/isOnlineUser';\n\n// store\nimport {\n  getAttributeFromProfiles,\n  getAttributeFromSelectedProfile,\n} from '../../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-profiles-styles.scss';\n\nconst NavMenuProfiles: FunctionComponent = () => {\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n\n  //@ts-ignore\n  const lastUpdateTime: number = useSelector(\n    getAttributeFromSelectedProfile('lastUpdateTime')\n  );\n\n  const getIconPath = (\n    lastUpdateTimeProfile: number,\n    online: boolean\n  ): string => {\n    if (isOnlineUser(lastUpdateTime, lastUpdateTimeProfile, online)) {\n      return OnlineIcon;\n    }\n    return OfflineIcon;\n  };\n\n  return (\n    <div className=\"NavMenuProfiles\">\n      {/* HEADER */}\n      <div className=\"NavMenuProfiles__header\">\n        <p className=\"NavMenuProfiles__title\">Brothers-in-law</p>\n      </div>\n\n      {/* USERS */}\n      <div className=\"NavMenuProfiles__profiles\">\n        {profiles\n          .filter(({ profileId }) => profileId !== selectedProfileId)\n          .map(({ lastUpdateTime, name, online, profileId, src }) => (\n            <div className=\"NavMenuProfiles__profile\" key={profileId}>\n              <img\n                alt={profileId}\n                className=\"NavMenuProfiles__avatar\"\n                src={src}\n              />\n              <img\n                alt=\"status-icon\"\n                className=\"NavMenuProfiles__status\"\n                src={getIconPath(lastUpdateTime, online)}\n              />\n              <p className=\"NavMenuProfiles__name\" key={profileId}>\n                {name}\n              </p>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenuProfiles;\n","export default __webpack_public_path__ + \"static/media/close-white-icon.46536c1e.svg\";","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenuChannels from './NavMenuChannels/NavMenuChannels';\nimport NavMenuProfiles from './NavMenuProfiles/NavMenuProfiles';\n\n// others\nimport CloseWhiteIcon from '../../assets/images/icons/close-white-icon.svg';\n\n// store\nimport { getAttributesFromSelectedProfile } from '../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n  const { name, src } = useSelector(getAttributesFromSelectedProfile);\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      {/* BACKGROUND */}\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n\n      {/* CONTAINER */}\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* HEADER */}\n        <div className=\"NavMenu__header\">\n          <div className=\"NavMenu__profile-data\">\n            <img\n              alt=\"profile-avatar\"\n              className=\"NavMenu__profile-avatar\"\n              src={src}\n            />\n            <p className=\"NavMenu__profile-name\">{name}</p>\n          </div>\n          <img\n            alt=\"close-white-icon\"\n            className=\"NavMenu__button-close\"\n            onClick={onClickHandler}\n            src={CloseWhiteIcon}\n          />\n        </div>\n\n        {/* CONTENT */}\n        <div className=\"NavMenu__content\">\n          <NavMenuChannels closeNavMenu={onClickHandler} />\n          <NavMenuProfiles />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/close-icon.092c61d5.svg\";","export default __webpack_public_path__ + \"static/media/gear-icon.e5deb93c.svg\";","export default __webpack_public_path__ + \"static/media/modify-size-icon.7b8f31f6.svg\";","// @ts-nocheck\nimport { FunctionComponent, useContext, useState } from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// core\nimport { Context } from '../../../core/ContextProvider/ContextProvider';\n\n// others\nimport CloseIcon from '../../../assets/images/icons/close-icon.svg';\nimport GearIcon from '../../../assets/images/icons/gear-icon.svg';\nimport ModifySizeIcon from '../../../assets/images/icons/modify-size-icon.svg';\nimport { TContext } from '../../../core/ContextProvider/types';\n\n// styles\nimport './page-header-settings-menu-styles.scss';\n\nconst PageHeaderSettingsMenu: FunctionComponent<{}> = () => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { setMargin }: TContext = useContext(Context);\n  const onClickOpenHandler = (event: Event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onClickCloseHandler = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className=\"PageHeaderSettingsMenu\">\n      <img alt=\"gear-icon\" onClick={onClickOpenHandler} src={GearIcon} />\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClickCloseHandler}\n      >\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(1)}\n        >\n          Up\n          <img alt=\"gear-icon\" src={ModifySizeIcon} />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(-1)}\n        >\n          Down\n          <img\n            alt=\"reverted-gear-icon\"\n            className=\"PageHeaderSettingsMenu__icon-rotate\"\n            src={ModifySizeIcon}\n          />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={onClickCloseHandler}\n        >\n          Close\n          <img alt=\"close-icon\" src={CloseIcon} />\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\nexport default PageHeaderSettingsMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.85ddbb0d.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\nimport PageHeaderSettingsMenu from './PageHeaderSettingsMenu/PageHeaderSettingsMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\nimport { TChannel } from '../../store/channels/types';\nimport { TProfile } from '../../store/profiles/types';\n\n// services\nimport isOnlineUser from '../../services/isOnlineUser';\n\n// store\nimport { getAttributesFromSelectedChannel } from '../../store/channels/selectors';\nimport {\n  getAttributeFromProfiles,\n  getAttributeFromSelectedProfile,\n} from '../../store/profiles/selectors';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n  const { name, shortcut }: TChannel = useSelector(\n    getAttributesFromSelectedChannel\n  );\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n\n  //@ts-ignore\n  const lastUpdateTime: number = useSelector(\n    getAttributeFromSelectedProfile('lastUpdateTime')\n  );\n\n  const getNumberOfUsersOnline = (): number =>\n    profiles\n      .filter(({ profileId }) => profileId !== selectedProfileId)\n      .reduce(\n        (total, { lastUpdateTime: lastUpdateTimeProfile, online }) =>\n          isOnlineUser(lastUpdateTime, lastUpdateTimeProfile, online)\n            ? ++total\n            : total,\n        0\n      );\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__left-column\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">{shortcut}</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">#{name}</p>\n          <p className=\"PageHeader__users\">\n            {getNumberOfUsersOnline()} Brothers online\n          </p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <div className=\"PageHeader__right-column\">\n        <PageHeaderSettingsMenu />\n        <img\n          alt=\"hamburger-menu\"\n          className=\"PageHeader__hamburger-menu\"\n          onClick={() => setVisible(true)}\n          src={HamburgerMenu}\n        />\n      </div>\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/back.d5208217.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.9659aaae.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.acb60281.svg\";","// @ts-nocheck\n// others\n\nconst loadImage = (\n  event: Event,\n  setImageData: (file: string | ArrayBuffer | null) => void\n) => {\n  const reader = new FileReader();\n  const { files } = event.target;\n\n  reader.onload = (e) => {\n    setImageData({\n      file: files[0],\n      src: e.target.result,\n    });\n  };\n\n  reader.readAsDataURL(files[0]);\n};\n\nexport default loadImage;\n","// @ts-nocheck\nimport { FunctionComponent, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// others\nimport BackIcon from '../../assets/images/icons/back.svg';\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\nimport { TImageData } from '../../types';\nimport { TProfileFormData } from '../../store/profiles/types';\n\n// services\nimport loadImage from './services/loadImage';\n\n// store\nimport { isPendingSelector } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-form-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  name?: string;\n  imageData?: TImageData;\n  submitHandler: (formData: TProfileFormData) => void;\n  title: string;\n};\n\nconst ProfileForm: FunctionComponent<TProps> = ({\n  clickHandler,\n  name: initialName = '',\n  imageData: initialImageData = null,\n  submitHandler,\n  title,\n}) => {\n  const isPending = useSelector(isPendingSelector);\n  const inputRef = useRef(null);\n  const [imageData, setImageData] = useState(initialImageData);\n  const [name, setName] = useState(initialName);\n\n  const onSubmitHandler = (event: Event) => {\n    event.preventDefault();\n\n    if (imageData && name) {\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\n    }\n  };\n\n  return (\n    <div className=\"ProfileForm__form-wrapper\">\n      <h2 className=\"ProfileForm__title\">\n        <img\n          alt=\"back-icon\"\n          className=\"ProfileForm__icon\"\n          onClick={clickHandler}\n          src={BackIcon}\n        />\n        {title}\n      </h2>\n\n      {/* FORM */}\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\n        {/* AVATAR */}\n        <div\n          className={`ProfileForm__avatar ${\n            imageData ? 'ProfileForm__avatar--selected' : ''\n          }`}\n        >\n          {imageData ? (\n            <img\n              alt=\"avatar\"\n              className=\"ProfileForm__image\"\n              src={imageData.src}\n            />\n          ) : (\n            <img\n              alt=\"empty\"\n              className=\"ProfileForm__empty-picture\"\n              src={EmptyImage}\n            />\n          )}\n\n          {/* BUTTON */}\n          <img\n            alt=\"button-icon\"\n            className=\"ProfileForm__button-picture\"\n            onClick={() => inputRef.current.click()}\n            src={ButtonPicture}\n          />\n          <input\n            className=\"ProfileForm__input-file\"\n            onChange={(event: Event) => loadImage(event, setImageData)}\n            ref={inputRef}\n            type=\"file\"\n          />\n        </div>\n\n        {/* INPUT NAME */}\n        <TextField\n          className=\"ProfileForm__input-name\"\n          onChange={(e) => setName(e.target.value)}\n          label=\"Profile name:\"\n          value={name}\n        />\n\n        <Button\n          className=\"ProfileForm__submit-button\"\n          color=\"primary\"\n          disabled={isPending}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Create Profile\n          {isPending && (\n            <CircularProgress\n              className=\"ProfileForm__spinner\"\n              color=\"primary\"\n              size={20}\n            />\n          )}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","import { FunctionComponent } from 'react';\nimport { useDispatch } from 'react-redux';\n\n// components\nimport ProfileForm from '../ProfileForm/ProfileForm';\n\n// store\nimport { createProfile } from '../../store/profiles/actions';\nimport { TProfileFormData } from '../../store/profiles/types';\n\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (formData: TProfileFormData) =>\n    dispatch(createProfile(formData));\n\n  return (\n    //@ts-ignore\n    <ProfileForm\n      submitHandler={submitHandler}\n      title=\"Create Profile:\"\n      {...restProps}\n    />\n  );\n};\n\nexport default CreateProfileForm;\n","// @ts-nocheck\nimport { MutableRefObject, useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nconst useOutsideClickCard = (ref: MutableRefObject<HTMLDivElement>) => {\n  const [isFocus, setFocus] = useState(false);\n  const eventType = isMobile ? 'touchstart' : 'mousedown';\n\n  const handleClickOutside = (event: Event): void => {\n    const target = event.target as Node;\n\n    if (ref.current) {\n      if (!isFocus && ref.current.contains(target)) {\n        setFocus(true);\n      } else if (isFocus && !ref.current.contains(target)) {\n        setFocus(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(eventType, handleClickOutside);\n\n    return () => {\n      document.removeEventListener(eventType, handleClickOutside);\n    };\n    // eslint-disable-next-line\n  }, [ref, isFocus]);\n\n  return isFocus;\n};\n\nexport default useOutsideClickCard;\n","// @ts-nocheck\nimport { useCallback, useRef, useState } from 'react';\n\nconst usePress = (\n  pressHandler,\n  clickHandler,\n  { shouldPreventDefault = true, delay = 1000 } = {}\n) => {\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const timeout = useRef();\n  const target = useRef();\n\n  const start = useCallback(\n    (event) => {\n      if (shouldPreventDefault && event.target) {\n        event.target.addEventListener('touchend', preventDefault, {\n          passive: false,\n        });\n        target.current = event.target;\n      }\n\n      timeout.current = setTimeout(() => {\n        pressHandler(event);\n        setLongPressTriggered(true);\n      }, delay);\n    },\n    [pressHandler, delay, shouldPreventDefault]\n  );\n\n  const clear = useCallback(\n    (_, shouldTriggerClick = true) => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n      }\n\n      if (shouldTriggerClick && !longPressTriggered) {\n        clickHandler();\n      }\n\n      if (shouldPreventDefault && target.current) {\n        target.current.removeEventListener('touchend', preventDefault);\n      }\n\n      setLongPressTriggered(false);\n    },\n    [shouldPreventDefault, clickHandler, longPressTriggered]\n  );\n\n  return {\n    onMouseDown: (e) => start(e),\n    onTouchStart: (e) => start(e),\n    onMouseUp: (e) => clear(e),\n    onMouseLeave: (e) => clear(e, false),\n    onTouchEnd: (e) => clear(e),\n    clearManual: () => clear(null, false),\n  };\n};\n\nconst isTouchEvent = (event) => {\n  return 'touches' in event;\n};\n\nconst preventDefault = (event) => {\n  if (!isTouchEvent(event)) return;\n\n  if (event.touches.length < 2 && event.preventDefault) {\n    event.preventDefault();\n  }\n};\n\nexport default usePress;\n","export default __webpack_public_path__ + \"static/media/edit-icon.a04997a1.svg\";","export default __webpack_public_path__ + \"static/media/plus.c453ef1e.svg\";","export default __webpack_public_path__ + \"static/media/trash-icon.66b5ea88.svg\";","import {\n  FunctionComponent,\n  MutableRefObject,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\n// hooks\nimport useOutsideClickCard from './useOutsideClickCard';\nimport usePress from './usePress';\n\n// others\nimport EditIcon from '../../assets/images/icons/edit-icon.svg';\nimport PlusIcon from '../../assets/images/icons/plus.svg';\nimport TrashIcon from '../../assets/images/icons/trash-icon.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n  name?: string;\n  src?: string;\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n  name,\n  src,\n}) => {\n  // @ts-ignore\n  const cardRef: MutableRefObject<HTMLDivElement> = useRef(null);\n  const isFocus = useOutsideClickCard(cardRef);\n  const [overlayVisible, setOverlayVisible] = useState(false);\n  const isOverlayVisible = mode === 'select' && overlayVisible && isFocus;\n\n  const onPressHandler = () => {\n    setOverlayVisible(true);\n  };\n\n  const onClickHandler = () => {\n    clickHandler();\n  };\n\n  const { clearManual, ...restPropsPress } = usePress(\n    onPressHandler,\n    onClickHandler\n  );\n\n  useEffect(() => {\n    if (!isFocus && overlayVisible) {\n      setOverlayVisible(false);\n      clearManual();\n    }\n    // eslint-disable-next-line\n  }, [isFocus, overlayVisible]);\n\n  return (\n    <section\n      className={`ProfilePicker ${\n        isOverlayVisible ? 'ProfilePicker--blur' : ''\n      }`}\n      ref={cardRef}\n    >\n      <div\n        className={`ProfilePicker__card ProfilePicker--${mode}__card ${\n          isOverlayVisible ? 'ProfilePicker__card--blur' : ''\n        }`}\n        {...restPropsPress}\n      >\n        {/* TITLE */}\n        <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\n          {name ? name : 'Create:'}\n        </p>\n\n        {/* CIRCLE */}\n        <div className={`ProfilePicker__button ProfilePicker--${mode}__button`}>\n          <img\n            alt={name ? `${name}-avatar` : 'icon'}\n            className={`ProfilePicker__image ProfilePicker--${mode}__image`}\n            src={src ? src : PlusIcon}\n          />\n        </div>\n      </div>\n\n      {/* OVERLAY */}\n      {isOverlayVisible && (\n        <div className=\"ProfilePicker__overlay\">\n          <div className=\"ProfilePicker__wrapper\">\n            <p className=\"ProfilePicker__help-text\">\n              Select one of the options:\n            </p>\n            <div className=\"ProfilePicker__options\">\n              <div className=\"ProfilePicker__option\">\n                <img alt=\"edit-icon\" src={EditIcon} />\n              </div>\n              <div className=\"ProfilePicker__option\">\n                <img alt=\"trash-icon\" src={TrashIcon} />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = `${REDUCER_KEY}/login`,\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\n  loginError = `${REDUCER_KEY}/loginError`,\n}\n","import { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { selectProfile } from '../../store/profiles/actions';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  const dispatch = useDispatch();\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a profile to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\n\n        {/* LIST */}\n        {/* @ts-ignore */}\n        {profiles.map(({ name, profileId, src }) => (\n          <ProfilePicker\n            clickHandler={() => dispatch(selectProfile(profileId))}\n            key={profileId}\n            mode=\"select\"\n            name={name}\n            src={src}\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        // LIST\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        // @ts-ignore\n        <CreateProfileForm clickHandler={onClickBackHandler} />\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","export default __webpack_public_path__ + \"static/media/gentleman.ff3326dc.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\ntype TProps = {\n  appDataLoaded: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\n  <div className=\"PageLoader\">\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\n    {/* LOGO */}\n    <img alt=\"gentleman-logo\" src={Gentleman} />\n\n    {/* SPINNER */}\n    <div className=\"PageLoader__spinner\">\n      {Array.from(Array(12)).map((_, index) => (\n        <div\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\n          key={index}\n        ></div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport { channelsLoadedSelector } from './channels/selectors';\nimport {\n  errorMessageSelector,\n  isPendingSelector as isPendingAuthSelector,\n} from './auth/selectors';\nimport { profilesLoadedSelector } from './profiles/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    profilesLoadedSelector,\n    channelsLoadedSelector,\n    (profilesData, channelsData) => profilesData && channelsData\n  );\n","import { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get';\n\n// components\nimport Chat from '../Chat/Chat';\nimport ModalNewUpdates from '../ModalNewUpdates/ModalNewUpdates';\nimport OnlineHandler from '../OnlineHandler/OnlineHandler';\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { appDataLoadedSelector } from '../../store/selectors';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { getAttributeFromChannels } from '../../store/channels/selectors';\nimport { setChannelId } from '../../store/channels/actions';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const dispatch = useDispatch();\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const selectedChannelId = useSelector(\n    getAttributeFromChannels('selectedChannelId')\n  );\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n  const channels = useSelector(getAttributeFromChannels('channels'));\n\n  useEffect(() => {\n    if (appDataLoaded && !selectedChannelId) {\n      const channelId = get(channels, '0.channelId');\n      dispatch(setChannelId(channelId));\n    }\n    // eslint-disable-next-line\n  }, [appDataLoaded, selectedChannelId]);\n\n  if (!appDataLoaded) {\n    return <PageLoader appDataLoaded={appDataLoaded} />;\n  }\n\n  if (!selectedProfileId) {\n    return (\n      <>\n        <ModalNewUpdates />\n        <ProfilePicker />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"Page\">\n      <OnlineHandler />\n      <PageHeader />\n      <Chat />\n    </div>\n  );\n};\n\nexport default Page;\n","import { useEffect, useMemo, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// components\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport Page from '../Page/Page';\n\n// core\nimport ContextProvider from '../../core/ContextProvider/ContextProvider';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    []\n  );\n\n  useEffect(() => {\n    const password = prompt('Please enter a password:');\n    indexedDB.deleteDatabase('firebaseLocalStorageDb');\n    dispatch(loginAction(password as string));\n    // eslint-disable-next-line\n  }, []);\n\n  if (isPending) {\n    return null;\n  }\n\n  if (errorMessage) {\n    return <ErrorPage />;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ContextProvider>\n        <Page />\n      </ContextProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// @ts-nocheck\n// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TChannel } from '../../store/channels/types';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchChannelsSuccess } from '../../store/channels/actions';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n    const channelsActions = (payload: Array<TChannel>): void => {\n      dispatch(fetchChannelsSuccess(payload));\n    };\n\n    if (isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n        databaseHandler(firebase, channelsActions, DatabaseColumns.channels);\n      }, 5000);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n};\n\nconst loginSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport {\n  TCreateChannelError,\n  TFetchChannelsSuccess,\n  TChannelsState,\n  TSendMessageError,\n  TSetChannelId,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TChannelsState = {\n  channels: null,\n  error: '',\n  isPending: true,\n  selectedChannelId: '',\n};\n\nconst createChannel = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createChannelSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createChannelError = (\n  state: TAuthState,\n  { payload: error }: TCreateChannelError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchChannelsSuccess = (\n  state: TAuthState,\n  { payload: channels }: TFetchChannelsSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  channels,\n});\n\nconst fetchChannelsError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst sendMessage = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst sendMessageError = (\n  state: TAuthState,\n  { payload: error }: TSendMessageError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst setChannelId = (\n  state: TAuthState,\n  { payload: selectedChannelId }: TSetChannelId\n): TAuthState => ({\n  ...state,\n  selectedChannelId,\n});\n\nconst channels = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ChannelsActionsType.createChannel:\n      return createChannel(state, action);\n    case ChannelsActionsType.createChannelSuccess:\n      return createChannelSuccess(state, action);\n    case ChannelsActionsType.createChannelsError:\n      return createChannelError(state, action);\n    case ChannelsActionsType.fetchChannelsSuccess:\n      return fetchChannelsSuccess(state, action);\n    case ChannelsActionsType.fetchChannelsError:\n      return fetchChannelsError(state, action);\n    case ChannelsActionsType.sendMessage:\n      return sendMessage(state, action);\n    case ChannelsActionsType.sendMessageError:\n      return sendMessageError(state, action);\n    case ChannelsActionsType.setChannelId:\n      return setChannelId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default channels;\n","// @ts-nocheck\n// others\nimport {\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TProfilesState,\n  TSelectProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TProfilesState = {\n  data: null,\n  error: '',\n  isPending: true,\n  selectedProfileId: '',\n};\n\nconst createProfile = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createProfileError = (\n  state: TAuthState,\n  { payload: error }: TCreateProfileError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setProfileId = (\n  state: TAuthState,\n  { payload: selectedProfileId }: TSelectProfile\n): TAuthState => ({\n  ...state,\n  selectedProfileId,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.createProfile:\n      return createProfile(state, action);\n    case ProfilesActionsType.createProfileSuccess:\n      return createProfileSuccess(state, action);\n    case ProfilesActionsType.createProfileError:\n      return createProfileError(state, action);\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    case ProfilesActionsType.selectProfile:\n      return setProfileId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport channels from './channels/reducer';\nimport profiles from './profiles/reducer';\n\nconst reducers = { auth, channels, profiles };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess());\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\n// others\nimport { TChannel } from '../../../store/channels/types';\nimport { TProfile } from '../../../store/profiles/types';\n\nconst generateId = (data: Array<TProfile | TChannel>, keyId: string) => {\n  const result: Array<string> = [];\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  do {\n    result.splice(0, result.length);\n    for (let i = 0; i < 9; i++) {\n      result.push(\n        characters.charAt(Math.floor(Math.random() * characters.length))\n      );\n    }\n  } while (data.find((data) => data[keyId] === result.join('')));\n\n  return result.join('');\n};\n\nexport default generateId;\n","// @ts-nocheck\nimport { delay, PutEffect, put, select } from 'redux-saga/effects';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { TChannel } from './types';\n\n// services\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport {\n  createChannelSuccess,\n  createChannelError,\n  sendMessageSuccess,\n  sendMessageError,\n} from './actions';\nimport {\n  getAttributeFromChannels,\n  getAttributeFromSelectedChannel,\n} from './selectors';\n\nexport function* createChannel({ payload }): Generator<PutEffect<any>> {\n  const { name, shortcut } = payload;\n  const data = yield select(getAttributeFromChannels('channels'));\n  const channelId = generateId(data, 'channelId');\n\n  try {\n    yield delay(1000);\n    yield getRefDatabase([DatabaseColumns.channels]).set([\n      ...data,\n      { channelId, name, shortcut },\n    ]);\n    yield put(createChannelSuccess());\n  } catch (error) {\n    yield put(createChannelError(error));\n  }\n}\n\nexport function* sendMessage({ payload }): Generator<PutEffect<any>> {\n  const channels: Array<TChannel> = yield select(\n    getAttributeFromChannels('channels')\n  );\n  const selectedChannelId = yield select(\n    getAttributeFromChannels('selectedChannelId')\n  );\n  const messages =\n    (yield select(getAttributeFromSelectedChannel('messages'))) || [];\n  const indexOfChannel = channels.findIndex(\n    ({ channelId }) => channelId === selectedChannelId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.channels,\n      indexOfChannel,\n      'messages',\n    ]).set([...messages, payload]);\n    yield put(sendMessageSuccess());\n  } catch (error) {\n    yield put(sendMessageError(error));\n  }\n}\n","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createChannel, sendMessage } from './saga';\nimport { ChannelsActionsType } from './actionsType';\n\nexport function* watchChannels(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    takeEvery(ChannelsActionsType.createChannel, createChannel),\n    takeEvery(ChannelsActionsType.sendMessage, sendMessage),\n  ]);\n}\n","// @ts-nocheck\nimport firebase from 'firebase';\nimport { eventChannel } from 'redux-saga';\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\nimport { TFileUploadPayload } from './types';\n\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\n  const { action, file, path }: TFileUploadPayload = payload;\n\n  try {\n    const uploadTask = firebase.storage().ref(path).put(file);\n    const channel = eventChannel((emit) =>\n      uploadTask.on('state_changed', emit)\n    );\n    let src = '';\n\n    yield takeEvery(channel, () => {});\n    yield uploadTask;\n    yield uploadTask.snapshot.ref\n      .getDownloadURL()\n      .then((response) => (src = response));\n    yield put(action({ result: 'success', src }));\n  } catch (error) {\n    yield put(action({ error, result: 'error' }));\n  }\n}\n","// @ts-nocheck\nexport const REDUCER_KEY = 'common';\n\nexport enum CommonActionsType {\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { uploadImage } from './saga';\nimport { CommonActionsType } from './actionsType';\n\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\n  ]);\n}\n","// @ts-nocheck\n//others\nimport { TReturnablePayload } from '../../../store/common/types';\n\nconst afterUploadImageHandler = ({\n  error,\n  result,\n  src,\n}: TReturnablePayload) => {\n  if (result === 'error') {\n    throw error;\n  }\n  return src;\n};\n\nexport default afterUploadImageHandler;\n","// others\nimport { TFileUploadPayload, TUploadFile } from './types';\n\n// store\nimport { CommonActionsType } from './actionsType';\n\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\n  type: CommonActionsType.uploadFile,\n  payload,\n});\n","// @ts-nocheck\nimport { delay, PutEffect, put, select, take } from 'redux-saga/effects';\nimport { TProfileFormData } from './types';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { StoragePath } from '../../enums';\nimport { TProfile } from './types';\nimport { UPDATE_DELAY_TIME } from '../../constants';\n\n// services\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport {\n  createProfileSuccess,\n  createProfileError,\n  uploadImageFinished,\n  selectProfileError,\n  updateTimeProfileError,\n} from './actions';\nimport { uploadFile } from '../common/actions';\nimport { getAttributeFromProfiles } from './selectors';\n\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\n  const {\n    backToProfileList,\n    name,\n    imageData: { file },\n  }: TProfileFormData = payload;\n  const path = `${StoragePath.profiles}/${name}`;\n  const data = yield select(getAttributeFromProfiles('data'));\n  const profileId = generateId(data, 'profileId');\n\n  try {\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\n\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\n    const src = afterUploadImageHandler(payload);\n\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\n      ...data,\n      {\n        lastUpdateTime: new Date().getTime(),\n        name,\n        online: false,\n        profileId,\n        src,\n      },\n    ]);\n    yield put(createProfileSuccess());\n    yield backToProfileList();\n  } catch (error) {\n    yield put(createProfileError(error));\n  }\n}\n\nexport function* selectProfile({\n  payload: selectedProfileId,\n}): Generator<PutEffect<any>> {\n  const profiles: Array<TProfile> = yield select(\n    getAttributeFromProfiles('data')\n  );\n  const indexProfile = profiles.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'online',\n    ]).set(true);\n  } catch (error) {\n    yield put(selectProfileError(error));\n  }\n}\n\nexport function* updateTimeProfile({\n  payload: selectedProfileId,\n}): Generator<PutEffect<any>> {\n  const data: Array<TProfile> = yield select(getAttributeFromProfiles('data'));\n  const indexProfile = data.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'lastUpdateTime',\n    ]).set(new Date().getTime());\n    yield delay(UPDATE_DELAY_TIME);\n    yield updateTimeProfile({ payload: selectedProfileId });\n  } catch (error) {\n    yield put(updateTimeProfileError(error));\n  }\n}\n","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createProfile, selectProfile, updateTimeProfile } from './saga';\nimport { ProfilesActionsType } from './actionsType';\n\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\n    takeEvery(ProfilesActionsType.selectProfile, selectProfile),\n    takeEvery(ProfilesActionsType.updateTimeProfile, updateTimeProfile),\n  ]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\nimport { watchChannels } from './channels/watch';\nimport { watchCommonStore } from './common/watch';\nimport { watchProfiles } from './profiles/watch';\n\nconst watches = [watchAuth, watchChannels, watchCommonStore, watchProfiles];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './watchers';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}