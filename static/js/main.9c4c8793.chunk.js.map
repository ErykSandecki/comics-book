{"version":3,"sources":["enums.ts","assets/images/icons/send-icon.svg","components/Chat/ChatInput/ChatInput.tsx","components/Chat/ChatMessages/ChatMessages.tsx","core/ContextProvider/ContextProvider.tsx","store/profiles/actionsType.ts","components/Chat/Chat.tsx","components/NavMenu/NavMenuCreateChannelForm/NavMenuCreateChannelForm.tsx","assets/images/icons/plus-white-icon.svg","components/NavMenu/NavMenuChannels/NavMenuChannels.tsx","assets/images/icons/close-white-icon.svg","store/profiles/selectors.ts","components/ProfilePickerSection/enums.ts","components/NavMenu/NavMenu.tsx","assets/images/icons/close-icon.svg","assets/images/icons/gear-icon.svg","assets/images/icons/modify-size-icon.svg","components/PageHeader/PageHeaderSettingsMenu/PageHeaderSettingsMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","components/ProfileForm/ProfileForm.tsx","store/profiles/actions.ts","components/CreateProfileForm/CreateProfileForm.tsx","components/ProfilePicker/usePress.ts","assets/images/icons/plus.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","components/Firebase/enums.ts","store/selectors.ts","components/Page/Page.tsx","components/App/App.tsx","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/actions.ts","store/auth/saga.ts","constants.ts","store/auth/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","components/Firebase/services/generateProfileId.ts","components/Firebase/services/getRefDatabase.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["LocalStorageKey","StoragePath","ChatInput","forwardRef","ref","inputHandler","useState","visibilityPlaceholder","setVisibilityPlaceholder","className","contentEditable","onBlur","event","target","innerText","trim","length","onFocus","onInput","suppressContentEditableWarning","alt","src","SendIcon","ChatMessages","_","ProfilesActionsType","Context","createContext","margin","setMargin","ContextProvider","children","parseInt","localStorage","getItem","marginOffset","Provider","value","result","setItem","Chat","messagesRef","useRef","inputRef","useContext","style","height","current","clientHeight","NavMenuCreateChannelForm","channelName","setChannelName","TextField","onChange","e","label","Button","color","size","type","variant","NavMenuChannels","visible","setVisible","onClick","PlusWhiteIcon","Modal","closeAfterTransition","open","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","REDUCER_KEY","Mode","profilesSelector","getFp","isPendingSelector","createSelector","profilesLoadedSelector","composeFp","isArrayFp","getAttributeFromProfiles","attribute","NavMenu","onClickHandler","selectedProfileId","useSelector","findFp","profileId","getAttributesFromSelectedProfile","name","stopPropagation","CloseWhiteIcon","PageHeaderSettingsMenu","anchorEl","setAnchorEl","onClickCloseHandler","currentTarget","GearIcon","Menu","id","keepMounted","Boolean","MenuItem","ModifySizeIcon","CloseIcon","PageHeader","HamburgerMenu","loadImage","setImageData","reader","FileReader","files","onload","file","readAsDataURL","ProfileForm","clickHandler","initialName","imageData","initialImageData","submitHandler","title","isPending","setName","BackIcon","onSubmit","preventDefault","backToProfileList","EmptyImage","click","ButtonPicture","disabled","CircularProgress","createProfileError","payload","uploadImageFinished","CreateProfileForm","restProps","dispatch","useDispatch","formData","createProfile","isTouchEvent","touches","usePress","pressHandler","shouldPreventDefault","delay","longPressTriggered","setLongPressTriggered","start","useCallback","addEventListener","passive","setTimeout","clear","shouldTriggerClick","clearTimeout","removeEventListener","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","ProfilePicker","mode","overlayVisible","setOverlayVisible","isOverlayVisible","press","PlusIcon","AuthActionsType","ProfilePickerList","profiles","map","setProfileId","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","index","DatabaseColumns","authSelector","errorMessageSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","Page","App","theme","useMemo","createMuiTheme","palette","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","data","i","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","database","on","Firebase","isAuthenticated","useEffect","initializeApp","profilesActions","fetchProfilesSuccess","initialState","loginSuccess","state","loginError","seletedProfileId","createProfileSuccess","fetchProfilesError","reducers","auth","action","createRootReducer","combineReducers","loginActionError","login","password","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","uploadImage","path","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","generateProfileId","characters","splice","charAt","Math","floor","random","find","join","getRefDatabase","refDataBase","child","select","take","set","online","watchProfiles","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c4c8793.chunk.js","sourcesContent":["export enum LocalStorageKey {\n  profileId = 'profileId',\n  marginOffset = 'MARGIN_OFFSET',\n}\n\nexport enum StoragePath {\n  profiles = 'PROFILES',\n}\n","export default __webpack_public_path__ + \"static/media/send-icon.d7969ca4.svg\";","// @ts-nocheck\nimport {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n  useState,\n} from 'react';\n\n// others\nimport SendIcon from '../../../assets/images/icons/send-icon.svg';\n\n// styles\nimport './chat-input-styles.scss';\n\ntype TProps = {\n  inputHandler: (event: Event) => void;\n};\n\nconst ChatInput: ForwardRefExoticComponent<\n  TProps & RefAttributes<HTMLDivElement>\n> = forwardRef<HTMLDivElement, TProps>(({ inputHandler }, ref) => {\n  const [visibilityPlaceholder, setVisibilityPlaceholder] = useState(true);\n\n  const onBlurHandler = (event: Event): void => {\n    const { target } = event;\n\n    if (target.innerText.trim().length === 0) {\n      setVisibilityPlaceholder(true);\n    }\n  };\n\n  return (\n    <div className=\"ChatInput\" ref={ref}>\n      <p\n        className=\"ChatInput__text-field\"\n        contentEditable={true}\n        onBlur={onBlurHandler}\n        onFocus={() => setVisibilityPlaceholder(false)}\n        onInput={inputHandler}\n        suppressContentEditableWarning\n      />\n      {visibilityPlaceholder && (\n        <span className=\"ChatInput__placeholder\">Message #Meetings:</span>\n      )}\n      <img alt=\"send-icon\" className=\"ChatInput__send-icon\" src={SendIcon} />\n    </div>\n  );\n});\n\nexport default ChatInput;\n","import { forwardRef, ForwardRefExoticComponent, RefAttributes } from 'react';\n\n// styles\nimport './chat-messages-styles.scss';\n\nconst ChatMessages: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>> =\n  forwardRef<HTMLDivElement, {}>((_, ref) => {\n    return <div className=\"ChatMessages\" ref={ref}></div>;\n  });\n\nexport default ChatMessages;\n","// @ts-nocheck\nimport { createContext, FunctionComponent, ReactNode, useState } from 'react';\n\n// other\nimport { LocalStorageKey } from '../../enums';\n\ntype TProps = {\n  children: ReactNode;\n};\n\nexport const Context: React.Context<any> = createContext({\n  margin: 0,\n  setMargin: () => {},\n});\n\nconst getMarginFromLocalStorage = (): number =>\n  parseInt(localStorage.getItem(LocalStorageKey.marginOffset) || 0);\n\nconst ContextProvider: FunctionComponent<TProps> = ({ children }) => {\n  const [margin, setMargin] = useState(getMarginFromLocalStorage());\n\n  const setMarginHandler = (value: number): void => {\n    const result = margin + value;\n\n    if (margin > 0 || value !== -1) {\n      setMargin(result);\n      localStorage.setItem(LocalStorageKey.marginOffset, result);\n    }\n  };\n\n  return (\n    <Context.Provider value={{ margin, setMargin: setMarginHandler }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  createProfile = `${REDUCER_KEY}/createProfile`,\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  setProfileId = `${REDUCER_KEY}/setProfileId`,\n}\n","// @ts-nocheck\nimport { FunctionComponent, useContext, useRef } from 'react';\n\n// components\nimport ChatInput from './ChatInput/ChatInput';\nimport ChatMessages from './ChatMessages/ChatMessages';\n\n// core\nimport { Context } from '../../core/ContextProvider/ContextProvider';\n\n// others\nimport { TContext } from '../../core/ContextProvider/types';\n\n// styles\nimport './chat-styles.scss';\n\nconst Chat: FunctionComponent<{}> = () => {\n  const messagesRef = useRef(null);\n  const inputRef = useRef(null);\n  const { margin }: TContext = useContext(Context);\n\n  const onInputHandler = (): void => {\n    const height = inputRef.current.clientHeight;\n    messagesRef.current.style.height = `calc(100% - ${height}px)`;\n  };\n\n  return (\n    <section\n      className=\"Chat\"\n      style={{ height: `calc(100vh - ${80 + margin}px)` }}\n    >\n      <ChatMessages ref={messagesRef} />\n      <ChatInput inputHandler={onInputHandler} ref={inputRef} />\n    </section>\n  );\n};\n\nexport default Chat;\n","import { FunctionComponent, useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n// styles\r\nimport './nav-menu-create-channel-form-styles.scss';\r\n\r\nconst NavMenuCreateChannelForm: FunctionComponent = () => {\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n  return (\r\n    <form className=\"NavMenuCreateChannelForm\">\r\n      <h2>Create channel:</h2>\r\n      <TextField\r\n        className=\"NavMenuCreateChannelForm__input\"\r\n        onChange={(e) => setChannelName(e.target.value)}\r\n        label=\"Channel name:\"\r\n        value={channelName}\r\n      />\r\n      <Button\r\n        className=\"ProfileForm__submit-button\"\r\n        color=\"primary\"\r\n        // disabled={isPending}\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n      >\r\n        Create Channel\r\n        {/* {isPending && (\r\n          <CircularProgress\r\n            className=\"ProfileForm__spinner\"\r\n            color=\"primary\"\r\n            size={20}\r\n          />\r\n        )} */}\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NavMenuCreateChannelForm;\r\n","export default __webpack_public_path__ + \"static/media/plus-white-icon.f41cd2c2.svg\";","import { FunctionComponent, useState } from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n// components\r\nimport NavMenuCreateChannelForm from '../NavMenuCreateChannelForm/NavMenuCreateChannelForm';\r\n\r\n// others\r\nimport PlusWhiteIcon from '../../../assets/images/icons/plus-white-icon.svg';\r\n\r\n// styles\r\nimport './nav-menu-channels-styles.scss';\r\n\r\nconst NavMenuChannels: FunctionComponent = () => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  return (\r\n    <div className=\"NavMenuChannels\">\r\n      {/* NAV */}\r\n      <div className=\"NavMenuChannels__nav\">\r\n        <p className=\"NavMenuChannels__title\">Channels</p>\r\n        <img\r\n          alt=\"plus-white-icon\"\r\n          className=\"NavMenuChannels__button\"\r\n          onClick={() => setVisible(true)}\r\n          src={PlusWhiteIcon}\r\n        />\r\n      </div>\r\n\r\n      {/* MODAL */}\r\n      <Modal\r\n        className=\"NavMenuChannels__modal\"\r\n        closeAfterTransition\r\n        open={visible}\r\n        onClose={() => setVisible(false)}\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={visible}>\r\n          <div className=\"NavMenuChannels__card\">\r\n            <NavMenuCreateChannelForm />\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenuChannels;\r\n","export default __webpack_public_path__ + \"static/media/close-white-icon.c6df9cb2.svg\";","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TProfile, TProfilesState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(profilesSelector, getFp('isPending'));\n\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\n\nexport const getAttributeFromProfiles = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(profilesSelector, getFp(attribute));\n\nexport const getAttributesFromSelectedProfile = (\n  selectedProfileId: string\n): Selector<TMainState, TProfile> =>\n  // @ts-ignore\n  createSelector(\n    profilesSelector,\n    composeFp(\n      findFp(({ profileId }) => profileId === selectedProfileId),\n      getFp('data')\n    )\n  );\n","export enum Mode {\n  createProfile = 'createProfile',\n  listProfiles = 'listProfiles',\n}\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenuChannels from './NavMenuChannels/NavMenuChannels';\n\n// others\nimport CloseWhiteIcon from '../../assets/images/icons/close-white-icon.svg';\n\n// store\nimport {\n  getAttributeFromProfiles,\n  getAttributesFromSelectedProfile,\n} from '../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('seletedProfileId')\n  );\n  const { name, src } = useSelector(\n    getAttributesFromSelectedProfile(selectedProfileId)\n  );\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      {/* BACKGROUND */}\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n\n      {/* CONTAINER */}\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* HEADER */}\n        <div className=\"NavMenu__header\">\n          <div className=\"NavMenu__profile-data\">\n            <img\n              alt=\"profile-avatar\"\n              className=\"NavMenu__profile-avatar\"\n              src={src}\n            />\n            <p className=\"NavMenu__profile-name\">{name}</p>\n          </div>\n          <img\n            alt=\"close-white-icon\"\n            className=\"NavMenu__button-close\"\n            onClick={onClickHandler}\n            src={CloseWhiteIcon}\n          />\n        </div>\n\n        {/* CONTENT */}\n        <div className=\"NavMenu__content\">\n          <NavMenuChannels />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/close-icon.092c61d5.svg\";","export default __webpack_public_path__ + \"static/media/gear-icon.e5deb93c.svg\";","export default __webpack_public_path__ + \"static/media/modify-size-icon.7b8f31f6.svg\";","// @ts-nocheck\nimport { FunctionComponent, useContext, useState } from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// core\nimport { Context } from '../../../core/ContextProvider/ContextProvider';\n\n// others\nimport CloseIcon from '../../../assets/images/icons/close-icon.svg';\nimport GearIcon from '../../../assets/images/icons/gear-icon.svg';\nimport ModifySizeIcon from '../../../assets/images/icons/modify-size-icon.svg';\nimport { TContext } from '../../../core/ContextProvider/types';\n\n// styles\nimport './page-header-settings-menu-styles.scss';\n\nconst PageHeaderSettingsMenu: FunctionComponent<{}> = () => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { setMargin }: TContext = useContext(Context);\n  const onClickOpenHandler = (event: Event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onClickCloseHandler = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className=\"PageHeaderSettingsMenu\">\n      <img alt=\"gear-icon\" onClick={onClickOpenHandler} src={GearIcon} />\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClickCloseHandler}\n      >\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(1)}\n        >\n          Up\n          <img alt=\"gear-icon\" src={ModifySizeIcon} />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(-1)}\n        >\n          Down\n          <img\n            alt=\"reverted-gear-icon\"\n            className=\"PageHeaderSettingsMenu__icon-rotate\"\n            src={ModifySizeIcon}\n          />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={onClickCloseHandler}\n        >\n          Close\n          <img alt=\"close-icon\" src={CloseIcon} />\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\nexport default PageHeaderSettingsMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.85ddbb0d.svg\";","import { FunctionComponent, useState } from 'react';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\nimport PageHeaderSettingsMenu from './PageHeaderSettingsMenu/PageHeaderSettingsMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__left-column\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">ME</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">#Meetings</p>\n          <p className=\"PageHeader__users\">2 Brothers online</p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <div className=\"PageHeader__right-column\">\n        <PageHeaderSettingsMenu />\n        <img\n          alt=\"hamburger-menu\"\n          className=\"PageHeader__hamburger-menu\"\n          onClick={() => setVisible(true)}\n          src={HamburgerMenu}\n        />\n      </div>\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/back.d5208217.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.9659aaae.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.acb60281.svg\";","// @ts-nocheck\n// others\n\nconst loadImage = (\n  event: Event,\n  setImageData: (file: string | ArrayBuffer | null) => void\n) => {\n  const reader = new FileReader();\n  const { files } = event.target;\n\n  reader.onload = (e) => {\n    setImageData({\n      file: files[0],\n      src: e.target.result,\n    });\n  };\n\n  reader.readAsDataURL(files[0]);\n};\n\nexport default loadImage;\n","// @ts-nocheck\nimport { FunctionComponent, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// others\nimport BackIcon from '../../assets/images/icons/back.svg';\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\nimport { TImageData } from '../../types';\nimport { TProfileFormData } from '../../store/profiles/types';\n\n// services\nimport loadImage from './services/loadImage';\n\n// store\nimport { isPendingSelector } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-form-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  name?: string;\n  imageData?: TImageData;\n  submitHandler: (formData: TProfileFormData) => void;\n  title: string;\n};\n\nconst ProfileForm: FunctionComponent<TProps> = ({\n  clickHandler,\n  name: initialName = '',\n  imageData: initialImageData = null,\n  submitHandler,\n  title,\n}) => {\n  const isPending = useSelector(isPendingSelector);\n  const inputRef = useRef(null);\n  const [imageData, setImageData] = useState(initialImageData);\n  const [name, setName] = useState(initialName);\n\n  const onSubmitHandler = (event: Event) => {\n    event.preventDefault();\n\n    if (imageData && name) {\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\n    }\n  };\n\n  return (\n    <div className=\"ProfileForm__form-wrapper\">\n      <h2 className=\"ProfileForm__title\">\n        <img\n          alt=\"back-icon\"\n          className=\"ProfileForm__icon\"\n          onClick={clickHandler}\n          src={BackIcon}\n        />\n        {title}\n      </h2>\n\n      {/* FORM */}\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\n        {/* AVATAR */}\n        <div\n          className={`ProfileForm__avatar ${\n            imageData ? 'ProfileForm__avatar--selected' : ''\n          }`}\n        >\n          {imageData ? (\n            <img\n              alt=\"avatar\"\n              className=\"ProfileForm__image\"\n              src={imageData.src}\n            />\n          ) : (\n            <img\n              alt=\"empty\"\n              className=\"ProfileForm__empty-picture\"\n              src={EmptyImage}\n            />\n          )}\n\n          {/* BUTTON */}\n          <img\n            alt=\"button-icon\"\n            className=\"ProfileForm__button-picture\"\n            onClick={() => inputRef.current.click()}\n            src={ButtonPicture}\n          />\n          <input\n            className=\"ProfileForm__input-file\"\n            onChange={(event: Event) => loadImage(event, setImageData)}\n            ref={inputRef}\n            type=\"file\"\n          />\n        </div>\n\n        {/* INPUT NAME */}\n        <TextField\n          className=\"ProfileForm__input-name\"\n          onChange={(e) => setName(e.target.value)}\n          label=\"Profile name:\"\n          value={name}\n        />\n\n        <Button\n          className=\"ProfileForm__submit-button\"\n          color=\"primary\"\n          disabled={isPending}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Create Profile\n          {isPending && (\n            <CircularProgress\n              className=\"ProfileForm__spinner\"\n              color=\"primary\"\n              size={20}\n            />\n          )}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","// others\nimport { TReturnablePayload } from './../common/types';\nimport {\n  TCreateProfile,\n  TCreateProfileSuccess,\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TFetchProfilesError,\n  TProfile,\n  TProfileFormData,\n  TUploadImageFinished,\n  TSetProfileId,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\n\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\n  type: ProfilesActionsType.createProfile,\n  payload,\n});\n\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\n  type: ProfilesActionsType.createProfileSuccess,\n});\n\nexport const createProfileError = (payload: string): TCreateProfileError => ({\n  type: ProfilesActionsType.createProfileError,\n  payload,\n});\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n\nexport const uploadImageFinished = (\n  payload: TReturnablePayload\n): TUploadImageFinished => ({\n  type: ProfilesActionsType.uploadImageFinished,\n  payload,\n});\n\nexport const setProfileId = (payload: string): TSetProfileId => ({\n  type: ProfilesActionsType.setProfileId,\n  payload,\n});\n","import { FunctionComponent } from 'react';\nimport { useDispatch } from 'react-redux';\n\n// components\nimport ProfileForm from '../ProfileForm/ProfileForm';\n\n// store\nimport { createProfile } from '../../store/profiles/actions';\nimport { TProfileFormData } from '../../store/profiles/types';\n\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (formData: TProfileFormData) =>\n    dispatch(createProfile(formData));\n\n  return (\n    //@ts-ignore\n    <ProfileForm\n      submitHandler={submitHandler}\n      title=\"Create Profile:\"\n      {...restProps}\n    />\n  );\n};\n\nexport default CreateProfileForm;\n","// @ts-nocheck\nimport { useCallback, useRef, useState } from 'react';\n\nconst usePress = (\n  pressHandler,\n  clickHandler,\n  { shouldPreventDefault = true, delay = 1000 } = {}\n) => {\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const timeout = useRef();\n  const target = useRef();\n\n  const start = useCallback(\n    (event) => {\n      if (shouldPreventDefault && event.target) {\n        event.target.addEventListener('touchend', preventDefault, {\n          passive: false,\n        });\n        target.current = event.target;\n      }\n      timeout.current = setTimeout(() => {\n        pressHandler(event);\n        setLongPressTriggered(true);\n      }, delay);\n    },\n    [pressHandler, delay, shouldPreventDefault]\n  );\n\n  const clear = useCallback(\n    (_, shouldTriggerClick = true) => {\n      timeout.current && clearTimeout(timeout.current);\n      shouldTriggerClick && !longPressTriggered && clickHandler();\n      setLongPressTriggered(false);\n      if (shouldPreventDefault && target.current) {\n        target.current.removeEventListener('touchend', preventDefault);\n      }\n    },\n    [shouldPreventDefault, clickHandler, longPressTriggered]\n  );\n\n  return {\n    onMouseDown: (e) => start(e),\n    onTouchStart: (e) => start(e),\n    onMouseUp: (e) => clear(e),\n    onMouseLeave: (e) => clear(e, false),\n    onTouchEnd: (e) => clear(e),\n  };\n};\n\nconst isTouchEvent = (event) => {\n  return 'touches' in event;\n};\n\nconst preventDefault = (event) => {\n  if (!isTouchEvent(event)) return;\n\n  if (event.touches.length < 2 && event.preventDefault) {\n    event.preventDefault();\n  }\n};\n\nexport default usePress;\n","export default __webpack_public_path__ + \"static/media/plus.c453ef1e.svg\";","import { FunctionComponent, useState } from 'react';\n\n// hooks\nimport usePress from './usePress';\n\n// others\nimport PlusIcon from '../../assets/images/icons/plus.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n  name?: string;\n  src?: string;\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n  name,\n  src,\n}) => {\n  const [overlayVisible, setOverlayVisible] = useState(false);\n  const isOverlayVisible = mode === 'select' && overlayVisible;\n  const onPressHandler = () => {\n    setOverlayVisible(true);\n  };\n\n  const onClickHandler = () => {\n    clickHandler();\n  };\n\n  const press = usePress(onPressHandler, onClickHandler);\n\n  return (\n    <section\n      className={`ProfilePicker ${\n        isOverlayVisible ? 'ProfilePicker--blur' : ''\n      }`}\n    >\n      <div\n        className={`ProfilePicker__card ProfilePicker--${mode}__card ${\n          isOverlayVisible ? 'ProfilePicker__card--blur' : ''\n        }`}\n        {...press}\n      >\n        {/* TITLE */}\n        <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\n          {name ? name : 'Create:'}\n        </p>\n\n        {/* CIRCLE */}\n        <div className={`ProfilePicker__button ProfilePicker--${mode}__button`}>\n          <img\n            alt={name ? `${name}-avatar` : 'icon'}\n            className={`ProfilePicker__image ProfilePicker--${mode}__image`}\n            src={src ? src : PlusIcon}\n          />\n        </div>\n      </div>\n\n      {/* OVERLAY */}\n      {isOverlayVisible && <div className=\"ProfilePicker__overlay\"></div>}\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = `${REDUCER_KEY}/login`,\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\n  loginError = `${REDUCER_KEY}/loginError`,\n}\n","import { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { setProfileId } from '../../store/profiles/actions';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  const dispatch = useDispatch();\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a profile to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\n\n        {/* LIST */}\n        {/* @ts-ignore */}\n        {profiles.map(({ name, profileId, src }) => (\n          <ProfilePicker\n            clickHandler={() => dispatch(setProfileId(profileId))}\n            key={profileId}\n            mode=\"select\"\n            name={name}\n            src={src}\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        // LIST\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        // @ts-ignore\n        <CreateProfileForm clickHandler={onClickBackHandler} />\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","export default __webpack_public_path__ + \"static/media/gentleman.ff3326dc.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\ntype TProps = {\n  appDataLoaded: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\n  <div className=\"PageLoader\">\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\n    {/* LOGO */}\n    <img alt=\"gentleman-logo\" src={Gentleman} />\n\n    {/* SPINNER */}\n    <div className=\"PageLoader__spinner\">\n      {Array.from(Array(12)).map((_, index) => (\n        <div\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\n          key={index}\n        ></div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n  channels = 'channels',\n}\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport {\n  isPendingSelector as isPendingAuthSelector,\n  errorMessageSelector,\n} from './auth/selectors';\nimport { profilesLoadedSelector } from './profiles/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesLoadedSelector, (profilesData) => profilesData);\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport Chat from '../Chat/Chat';\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { appDataLoadedSelector } from '../../store/selectors';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('seletedProfileId')\n  );\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n\n  if (!appDataLoaded) {\n    return <PageLoader appDataLoaded={appDataLoaded} />;\n  }\n\n  if (!selectedProfileId) {\n    return <ProfilePicker />;\n  }\n\n  return (\n    <div className=\"Page\">\n      <PageHeader />\n      <Chat />\n    </div>\n  );\n};\n\nexport default Page;\n","import { useEffect, useMemo, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// components\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport Page from '../Page/Page';\n\n// core\nimport ContextProvider from '../../core/ContextProvider/ContextProvider';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    []\n  );\n\n  // useEffect(() => {\n  //   const password = prompt('Please enter a password:');\n  //   indexedDB.deleteDatabase('firebaseLocalStorageDb');\n  //   dispatch(loginAction(password as string));\n  //   // eslint-disable-next-line\n  // }, []);\n\n  // if (isPending) {\n  //   return null;\n  // }\n\n  // if (errorMessage) {\n  //   return <ErrorPage />;\n  // }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ContextProvider>\n        <Page />\n      </ContextProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n\n    if (!isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n      }, 1);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError, TLoginSuccess } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n  profileId: '',\n};\n\nconst loginSuccess = (\n  state: TAuthState,\n  { payload: profileId }: TLoginSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  profileId,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport {\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TProfilesState,\n  TSetProfileId,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TProfilesState = {\n  data: null,\n  error: '',\n  isPending: true,\n  seletedProfileId: '',\n};\n\nconst createProfile = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createProfileError = (\n  state: TAuthState,\n  { payload: error }: TCreateProfileError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setProfileId = (\n  state: TAuthState,\n  { payload: seletedProfileId }: TSetProfileId\n): TAuthState => ({\n  ...state,\n  seletedProfileId,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.createProfile:\n      return createProfile(state, action);\n    case ProfilesActionsType.createProfileSuccess:\n      return createProfileSuccess(state, action);\n    case ProfilesActionsType.createProfileError:\n      return createProfileError(state, action);\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    case ProfilesActionsType.setProfileId:\n      return setProfileId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport profiles from './profiles/reducer';\n\nconst reducers = { auth, profiles };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (payload: string): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n  payload,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\nimport { LocalStorageKey } from '../../enums';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n  const profileId = localStorage.getItem(LocalStorageKey.profileId) || '';\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess(profileId));\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","export const EMAIL = 'eryk.sandecki@gmail.com';\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\nimport firebase from 'firebase';\nimport { eventChannel } from 'redux-saga';\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\nimport { TFileUploadPayload } from './types';\n\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\n  const { action, file, path }: TFileUploadPayload = payload;\n\n  try {\n    const uploadTask = firebase.storage().ref(path).put(file);\n    const channel = eventChannel((emit) =>\n      uploadTask.on('state_changed', emit)\n    );\n    let src = '';\n\n    yield takeEvery(channel, () => {});\n    yield uploadTask;\n    yield uploadTask.snapshot.ref\n      .getDownloadURL()\n      .then((response) => (src = response));\n    yield put(action({ result: 'success', src }));\n  } catch (error) {\n    yield put(action({ error, result: 'error' }));\n  }\n}\n","// @ts-nocheck\nexport const REDUCER_KEY = 'common';\n\nexport enum CommonActionsType {\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { uploadImage } from './saga';\nimport { CommonActionsType } from './actionsType';\n\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\n  ]);\n}\n","// @ts-nocheck\n//others\nimport { TReturnablePayload } from '../../../store/common/types';\n\nconst afterUploadImageHandler = ({\n  error,\n  result,\n  src,\n}: TReturnablePayload) => {\n  if (result === 'error') {\n    throw error;\n  }\n  return src;\n};\n\nexport default afterUploadImageHandler;\n","// others\nimport { TProfile } from './../../../store/profiles/types';\n\nconst generateProfileId = (data: Array<TProfile>) => {\n  const result: Array<string> = [];\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  do {\n    result.splice(0, result.length);\n    for (let i = 0; i < 9; i++) {\n      result.push(\n        characters.charAt(Math.floor(Math.random() * characters.length))\n      );\n    }\n  } while (data.find(({ profileId }) => profileId === result.join('')));\n\n  return result.join('');\n};\n\nexport default generateProfileId;\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// others\nimport { TFileUploadPayload, TUploadFile } from './types';\n\n// store\nimport { CommonActionsType } from './actionsType';\n\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\n  type: CommonActionsType.uploadFile,\n  payload,\n});\n","// @ts-nocheck\nimport { PutEffect, take, put, select } from 'redux-saga/effects';\nimport { TProfileFormData } from './types';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { StoragePath } from '../../enums';\n\n// services\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\nimport generateProfileId from '../../components/Firebase/services/generateProfileId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport {\n  createProfileSuccess,\n  createProfileError,\n  uploadImageFinished,\n} from './actions';\nimport { uploadFile } from '../common/actions';\nimport { getAttributeFromProfiles } from './selectors';\n\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\n  const {\n    backToProfileList,\n    name,\n    imageData: { file },\n  }: TProfileFormData = payload;\n  const path = `${StoragePath.profiles}/${name}`;\n  const data = yield select(getAttributeFromProfiles('data'));\n  const profileId = generateProfileId(data);\n\n  try {\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\n\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\n    const src = afterUploadImageHandler(payload);\n\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\n      ...data,\n      { name, online: false, profileId, src },\n    ]);\n    yield put(createProfileSuccess());\n    yield backToProfileList();\n  } catch (error) {\n    yield put(createProfileError(error));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createProfile } from './saga';\nimport { ProfilesActionsType } from './actionsType';\n\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\n  ]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\nimport { watchCommonStore } from './common/watch';\nimport { watchProfiles } from './profiles/watch';\n\nconst watches = [watchAuth, watchCommonStore, watchProfiles];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './watchers';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}