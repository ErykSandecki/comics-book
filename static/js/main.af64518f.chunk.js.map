{"version":3,"sources":["store/profiles/actionsType.ts","assets/images/backgrounds/error.svg","components/ErrorPage/ErrorPage.tsx","assets/images/icons/send-icon.svg","components/Chat/ChatInput/ChatInput.tsx","components/Chat/ChatMessages/ChatMessages.tsx","components/Chat/Chat.tsx","assets/images/icons/close.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","store/profiles/selectors.ts","components/ProfilePickerSection/enums.ts","components/ProfileForm/ProfileForm.tsx","store/profiles/actions.ts","components/CreateProfileForm/CreateProfileForm.tsx","assets/images/icons/plus.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","components/Firebase/enums.ts","store/selectors.ts","components/Page/Page.tsx","store/auth/actions.ts","components/App/App.tsx","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","enums.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/saga.ts","constants.ts","store/auth/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","components/Firebase/services/generateProfileId.ts","components/Firebase/services/getRefDatabase.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["ProfilesActionsType","ErrorPage","className","alt","src","Background","ChatInput","forwardRef","ref","changeHandler","contentEditable","onInput","suppressContentEditableWarning","SendIcon","ChatMessages","_","Chat","messagesRef","useRef","inputRef","event","height","current","clientHeight","style","NavMenu","visible","setVisible","onClickHandler","onClick","e","stopPropagation","CloseIcon","PageHeader","useState","HamburgerMenu","loadImage","setImageData","reader","FileReader","files","target","onload","file","result","readAsDataURL","REDUCER_KEY","Mode","profilesSelector","getFp","isPendingSelector","createSelector","profilesLoadedSelector","composeFp","isArrayFp","getAttributeFromProfiles","attribute","ProfileForm","clickHandler","name","initialName","imageData","initialImageData","submitHandler","title","isPending","useSelector","setName","BackIcon","onSubmit","preventDefault","backToProfileList","EmptyImage","click","ButtonPicture","onChange","type","TextField","value","label","Button","color","disabled","size","variant","CircularProgress","createProfileError","payload","uploadImageFinished","CreateProfileForm","restProps","dispatch","useDispatch","formData","createProfile","ProfilePicker","mode","PlusIcon","AuthActionsType","ProfilePickerList","profiles","map","profileId","setProfileId","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","index","DatabaseColumns","authSelector","errorMessageSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","Page","selectedProfileId","loginActionError","loginError","App","theme","useMemo","createMuiTheme","palette","useEffect","password","prompt","indexedDB","deleteDatabase","login","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","LocalStorageKey","StoragePath","databaseErrorHandler","error","console","getData","values","keys","Object","data","i","length","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","database","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","setTimeout","initialState","loginSuccess","state","seletedProfileId","createProfileSuccess","fetchProfilesError","reducers","auth","action","createRootReducer","combineReducers","localStorage","getItem","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","uploadImage","path","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","generateProfileId","characters","splice","charAt","Math","floor","random","find","join","getRefDatabase","refDataBase","child","select","take","set","online","watchProfiles","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af64518f.chunk.js","sourcesContent":["// @ts-nocheck\nexport const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  createProfile = `${REDUCER_KEY}/createProfile`,\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  setProfileId = `${REDUCER_KEY}/setProfileId`,\n}\n","export default __webpack_public_path__ + \"static/media/error.aee84ee0.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Background from '../../assets/images/backgrounds/error.svg';\n\n// styles\nimport './error-page-styles.scss';\n\nconst ErrorPage: FunctionComponent = () => (\n  <section className=\"ErrorPage\">\n    <img\n      alt=\"background-error\"\n      className=\"ErrorPage__background\"\n      src={Background}\n    />\n  </section>\n);\n\nexport default ErrorPage;\n","export default __webpack_public_path__ + \"static/media/send-icon.2dc21fc0.svg\";","// @ts-nocheck\nimport { forwardRef, ForwardRefExoticComponent, RefAttributes } from 'react';\n\n// others\nimport SendIcon from '../../../assets/images/icons/send-icon.svg';\n\n// styles\nimport './chat-input-styles.scss';\n\ntype TProps = {\n  changeHandler: (event: Event) => void;\n};\n\nconst ChatInput: ForwardRefExoticComponent<\n  TProps & RefAttributes<HTMLDivElement>\n> = forwardRef<HTMLDivElement, TProps>(({ changeHandler }, ref) => {\n  return (\n    <div className=\"ChatInput\" ref={ref}>\n      <p\n        className=\"ChatInput__text-field\"\n        contentEditable={true}\n        onInput={changeHandler}\n        suppressContentEditableWarning\n      />\n      <img alt=\"send-icon\" className=\"ChatInput__send-icon\" src={SendIcon} />\n    </div>\n  );\n});\n\nexport default ChatInput;\n","import { forwardRef, ForwardRefExoticComponent, RefAttributes } from 'react';\n\n// styles\nimport './chat-messages-styles.scss';\n\nconst ChatMessages: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>> =\n  forwardRef<HTMLDivElement, {}>((_, ref) => {\n    return <div className=\"ChatMessages\" ref={ref}></div>;\n  });\n\nexport default ChatMessages;\n","// @ts-nocheck\nimport { FunctionComponent, useRef } from 'react';\n\n// components\nimport ChatInput from './ChatInput/ChatInput';\nimport ChatMessages from './ChatMessages/ChatMessages';\n\n// styles\nimport './chat-styles.scss';\n\nconst Chat: FunctionComponent<{}> = () => {\n  const messagesRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const onChangeHandler = (event: Event): void => {\n    const height = inputRef.current.clientHeight;\n    messagesRef.current.style.height = `calc(100% - ${height}px)`;\n  };\n\n  return (\n    <section className=\"Chat\">\n      <ChatMessages ref={messagesRef} />\n      <ChatInput changeHandler={onChangeHandler} ref={inputRef} />\n    </section>\n  );\n};\n\nexport default Chat;\n","export default __webpack_public_path__ + \"static/media/close.91205169.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport CloseIcon from '../../assets/images/icons/close.svg';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"NavMenu__header\">\n          <div className=\"NavMenu__button-close\">\n            <img alt=\"close-icon\" onClick={onClickHandler} src={CloseIcon} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.4f615ee5.svg\";","import { FunctionComponent, useState } from 'react';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__content\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">ME</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">Gentleman App - Meetings</p>\n          <p className=\"PageHeader__users\">2 Brothers-in-law online</p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <img\n        alt=\"hamburger-menu\"\n        className=\"PageHeader__hamburger-menu\"\n        onClick={() => setVisible(true)}\n        src={HamburgerMenu}\n      />\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/back.3f83d067.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.7e1048a6.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.c3e5e19d.svg\";","// @ts-nocheck\n// others\n\nconst loadImage = (\n  event: Event,\n  setImageData: (file: string | ArrayBuffer | null) => void\n) => {\n  const reader = new FileReader();\n  const { files } = event.target;\n\n  reader.onload = (e) => {\n    setImageData({\n      file: files[0],\n      src: e.target.result,\n    });\n  };\n\n  reader.readAsDataURL(files[0]);\n};\n\nexport default loadImage;\n","import getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport composeFp from 'lodash/fp/compose';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TProfile, TProfilesState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(profilesSelector, getFp('isPending'));\n\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\n\nexport const getAttributeFromProfiles = (\n  attribute: string\n): Selector<TMainState, Array<TProfile>> =>\n  createSelector(profilesSelector, getFp(attribute));\n","export enum Mode {\n  createProfile = 'createProfile',\n  listProfiles = 'listProfiles',\n}\n","// @ts-nocheck\nimport { FunctionComponent, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// others\nimport BackIcon from '../../assets/images/icons/back.svg';\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\nimport { TImageData } from '../../types';\nimport { TProfileFormData } from '../../store/profiles/types';\n\n// services\nimport loadImage from './services/loadImage';\n\n// store\nimport { isPendingSelector } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-form-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  name?: string;\n  imageData?: TImageData;\n  submitHandler: (formData: TProfileFormData) => void;\n  title: string;\n};\n\nconst ProfileForm: FunctionComponent<TProps> = ({\n  clickHandler,\n  name: initialName = '',\n  imageData: initialImageData = null,\n  submitHandler,\n  title,\n}) => {\n  const isPending = useSelector(isPendingSelector);\n  const inputRef = useRef(null);\n  const [imageData, setImageData] = useState(initialImageData);\n  const [name, setName] = useState(initialName);\n\n  const onSubmitHandler = (event: Event) => {\n    event.preventDefault();\n\n    if (imageData && name) {\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\n    }\n  };\n\n  return (\n    <div className=\"ProfileForm__form-wrapper\">\n      <h2 className=\"ProfileForm__title\">\n        <img\n          alt=\"back-icon\"\n          className=\"ProfileForm__icon\"\n          onClick={clickHandler}\n          src={BackIcon}\n        />\n        {title}\n      </h2>\n\n      {/* FORM */}\n      {/* @ts-ignore */}\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\n        {/* AVATAR */}\n        <div\n          className={`ProfileForm__avatar ${\n            imageData ? 'ProfileForm__avatar--selected' : ''\n          }`}\n        >\n          {imageData ? (\n            // @ts-ignore\n            <img\n              alt=\"avatar\"\n              className=\"ProfileForm__image\"\n              src={imageData.src}\n            />\n          ) : (\n            <img\n              alt=\"empty\"\n              className=\"ProfileForm__empty-picture\"\n              src={EmptyImage}\n            />\n          )}\n\n          {/* BUTTON */}\n          <img\n            alt=\"button-icon\"\n            className=\"ProfileForm__button-picture\"\n            // @ts-ignore\n            onClick={() => inputRef.current.click()}\n            src={ButtonPicture}\n          />\n          <input\n            className=\"ProfileForm__input-file\"\n            // @ts-ignore\n            onChange={(event: Event) => loadImage(event, setImageData)}\n            ref={inputRef}\n            type=\"file\"\n          />\n        </div>\n\n        {/* INPUT NAME */}\n        <TextField\n          className=\"ProfileForm__input-name\"\n          onChange={(e) => setName(e.target.value)}\n          label=\"Profile name:\"\n          value={name}\n        />\n\n        <Button\n          className=\"ProfileForm__submit-button\"\n          color=\"primary\"\n          disabled={isPending}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Create Profile\n          {isPending && (\n            <CircularProgress\n              className=\"ProfileForm__spinner\"\n              color=\"primary\"\n              size={20}\n            />\n          )}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","// others\nimport { TReturnablePayload } from './../common/types';\nimport {\n  TCreateProfile,\n  TCreateProfileSuccess,\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TFetchProfilesError,\n  TProfile,\n  TProfileFormData,\n  TUploadImageFinished,\n  TSetProfileId,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\n\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\n  type: ProfilesActionsType.createProfile,\n  payload,\n});\n\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\n  type: ProfilesActionsType.createProfileSuccess,\n});\n\nexport const createProfileError = (payload: string): TCreateProfileError => ({\n  type: ProfilesActionsType.createProfileError,\n  payload,\n});\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n\nexport const uploadImageFinished = (\n  payload: TReturnablePayload\n): TUploadImageFinished => ({\n  type: ProfilesActionsType.uploadImageFinished,\n  payload,\n});\n\nexport const setProfileId = (payload: string): TSetProfileId => ({\n  type: ProfilesActionsType.setProfileId,\n  payload,\n});\n","import { FunctionComponent } from 'react';\nimport { useDispatch } from 'react-redux';\n\n// components\nimport ProfileForm from '../ProfileForm/ProfileForm';\n\n// store\nimport { createProfile } from '../../store/profiles/actions';\nimport { TProfileFormData } from '../../store/profiles/types';\n\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (formData: TProfileFormData) =>\n    dispatch(createProfile(formData));\n\n  return (\n    //@ts-ignore\n    <ProfileForm\n      submitHandler={submitHandler}\n      title=\"Create Profile:\"\n      {...restProps}\n    />\n  );\n};\n\nexport default CreateProfileForm;\n","export default __webpack_public_path__ + \"static/media/plus.553def23.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport PlusIcon from '../../assets/images/icons/plus.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n  name?: string;\n  src?: string;\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n  name,\n  src,\n}) => {\n  return (\n    <section className={`ProfilePicker ProfilePicker--${mode}`}>\n      {/* TITLE */}\n      <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\n        {name ? name : 'Create:'}\n      </p>\n\n      {/* CIRCLE */}\n      <div className=\"ProfilePicker__button\" onClick={clickHandler}>\n        <img\n          alt={name ? `${name}-avatar` : 'icon'}\n          className={`ProfilePicker__image ProfilePicker--${mode}__image`}\n          src={src ? src : PlusIcon}\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = `${REDUCER_KEY}/login`,\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\n  loginError = `${REDUCER_KEY}/loginError`,\n}\n","import { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { setProfileId } from '../../store/profiles/actions';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  const dispatch = useDispatch();\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a profile to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\n\n        {/* LIST */}\n        {/* @ts-ignore */}\n        {profiles.map(({ name, profileId, src }) => (\n          <ProfilePicker\n            clickHandler={() => dispatch(setProfileId(profileId))}\n            key={profileId}\n            mode=\"select\"\n            name={name}\n            src={src}\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        // LIST\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        // @ts-ignore\n        <CreateProfileForm clickHandler={onClickBackHandler} />\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","export default __webpack_public_path__ + \"static/media/gentleman.154e51ca.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\ntype TProps = {\n  appDataLoaded: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\n  <div className=\"PageLoader\">\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\n    {/* LOGO */}\n    <img alt=\"gentleman-logo\" src={Gentleman} />\n\n    {/* SPINNER */}\n    <div className=\"PageLoader__spinner\">\n      {Array.from(Array(12)).map((_, index) => (\n        <div\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\n          key={index}\n        ></div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n}\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport {\n  isPendingSelector as isPendingAuthSelector,\n  errorMessageSelector,\n} from './auth/selectors';\nimport { profilesLoadedSelector } from './profiles/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesLoadedSelector, (profilesData) => profilesData);\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport Chat from '../Chat/Chat';\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { appDataLoadedSelector } from '../../store/selectors';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('seletedProfileId')\n  );\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n\n  if (!appDataLoaded) {\n    return <PageLoader appDataLoaded={appDataLoaded} />;\n  }\n\n  if (!selectedProfileId) {\n    return <ProfilePicker />;\n  }\n\n  return (\n    <div className=\"Page\">\n      <PageHeader />\n      <Chat />\n    </div>\n  );\n};\n\nexport default Page;\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (payload: string): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n  payload,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","import { useEffect, useMemo, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// components\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport Page from '../Page/Page';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    []\n  );\n\n  useEffect(() => {\n    const password = prompt('Please enter a password:');\n    indexedDB.deleteDatabase('firebaseLocalStorageDb');\n    dispatch(loginAction(password as string));\n    // eslint-disable-next-line\n  }, []);\n\n  if (isPending) {\n    return null;\n  }\n\n  if (errorMessage) {\n    return <ErrorPage />;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Page />;\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","export enum LocalStorageKey {\n  profileId = 'profileId',\n}\n\nexport enum StoragePath {\n  profiles = 'PROFILES',\n}\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n\n    if (isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n      }, 5000);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError, TLoginSuccess } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n  profileId: '',\n};\n\nconst loginSuccess = (\n  state: TAuthState,\n  { payload: profileId }: TLoginSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  profileId,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport {\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TProfilesState,\n  TSetProfileId,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TProfilesState = {\n  data: null,\n  error: '',\n  isPending: true,\n  seletedProfileId: '',\n};\n\nconst createProfile = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createProfileError = (\n  state: TAuthState,\n  { payload: error }: TCreateProfileError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setProfileId = (\n  state: TAuthState,\n  { payload: seletedProfileId }: TSetProfileId\n): TAuthState => ({\n  ...state,\n  seletedProfileId,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.createProfile:\n      return createProfile(state, action);\n    case ProfilesActionsType.createProfileSuccess:\n      return createProfileSuccess(state, action);\n    case ProfilesActionsType.createProfileError:\n      return createProfileError(state, action);\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    case ProfilesActionsType.setProfileId:\n      return setProfileId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport profiles from './profiles/reducer';\n\nconst reducers = { auth, profiles };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\nimport { LocalStorageKey } from '../../enums';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n  const profileId = localStorage.getItem(LocalStorageKey.profileId) || '';\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess(profileId));\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","export const EMAIL = 'eryk.sandecki@gmail.com';\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\nimport firebase from 'firebase';\nimport { eventChannel } from 'redux-saga';\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\nimport { TFileUploadPayload } from './types';\n\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\n  const { action, file, path }: TFileUploadPayload = payload;\n\n  try {\n    const uploadTask = firebase.storage().ref(path).put(file);\n    const channel = eventChannel((emit) =>\n      uploadTask.on('state_changed', emit)\n    );\n    let src = '';\n\n    yield takeEvery(channel, () => {});\n    yield uploadTask;\n    yield uploadTask.snapshot.ref\n      .getDownloadURL()\n      .then((response) => (src = response));\n    yield put(action({ result: 'success', src }));\n  } catch (error) {\n    yield put(action({ error, result: 'error' }));\n  }\n}\n","// @ts-nocheck\nexport const REDUCER_KEY = 'common';\n\nexport enum CommonActionsType {\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { uploadImage } from './saga';\nimport { CommonActionsType } from './actionsType';\n\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\n  ]);\n}\n","// @ts-nocheck\n//others\nimport { TReturnablePayload } from '../../../store/common/types';\n\nconst afterUploadImageHandler = ({\n  error,\n  result,\n  src,\n}: TReturnablePayload) => {\n  if (result === 'error') {\n    throw error;\n  }\n  return src;\n};\n\nexport default afterUploadImageHandler;\n","// others\nimport { TProfile } from './../../../store/profiles/types';\n\nconst generateProfileId = (data: Array<TProfile>) => {\n  const result: Array<string> = [];\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  do {\n    result.splice(0, result.length);\n    for (let i = 0; i < 9; i++) {\n      result.push(\n        characters.charAt(Math.floor(Math.random() * characters.length))\n      );\n    }\n  } while (data.find(({ profileId }) => profileId === result.join('')));\n\n  return result.join('');\n};\n\nexport default generateProfileId;\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// others\nimport { TFileUploadPayload, TUploadFile } from './types';\n\n// store\nimport { CommonActionsType } from './actionsType';\n\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\n  type: CommonActionsType.uploadFile,\n  payload,\n});\n","// @ts-nocheck\nimport { PutEffect, take, put, select } from 'redux-saga/effects';\nimport { TProfileFormData } from './types';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { StoragePath } from '../../enums';\n\n// services\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\nimport generateProfileId from '../../components/Firebase/services/generateProfileId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport {\n  createProfileSuccess,\n  createProfileError,\n  uploadImageFinished,\n} from './actions';\nimport { uploadFile } from '../common/actions';\nimport { getAttributeFromProfiles } from './selectors';\n\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\n  const {\n    backToProfileList,\n    name,\n    imageData: { file },\n  }: TProfileFormData = payload;\n  const path = `${StoragePath.profiles}/${name}`;\n  const data = yield select(getAttributeFromProfiles('data'));\n  const profileId = generateProfileId(data);\n\n  try {\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\n\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\n    const src = afterUploadImageHandler(payload);\n\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\n      ...data,\n      { name, online: false, profileId, src },\n    ]);\n    yield put(createProfileSuccess());\n    yield backToProfileList();\n  } catch (error) {\n    yield put(createProfileError(error));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createProfile } from './saga';\nimport { ProfilesActionsType } from './actionsType';\n\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\n  ]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\nimport { watchCommonStore } from './common/watch';\nimport { watchProfiles } from './profiles/watch';\n\nconst watches = [watchAuth, watchCommonStore, watchProfiles];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './watchers';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}