{"version":3,"sources":["enums.ts","assets/images/icons/send-icon.svg","components/Chat/ChatInput/ChatInput.tsx","components/Chat/ChatMessages/ChatMessages.tsx","core/ContextProvider/ContextProvider.tsx","components/Firebase/enums.ts","components/Chat/Chat.tsx","store/profiles/actionsType.ts","components/Firebase/services/getRefDatabase.ts","components/OnlineHandler/useOnDisconnectHandlers.ts","store/profiles/selectors.ts","store/channels/actionsType.ts","store/profiles/actions.ts","components/OnlineHandler/OnlineHandler.tsx","store/channels/actions.ts","components/ProfilePickerSection/enums.ts","store/channels/selectors.ts","components/NavMenu/NavMenuCreateChannelForm/NavMenuCreateChannelForm.tsx","assets/images/icons/plus-white-icon.svg","components/NavMenu/NavMenuChannels/NavMenuChannels.tsx","assets/images/icons/offline-icon.svg","assets/images/icons/online-icon.svg","services/isOnlineUser.ts","constants.ts","components/NavMenu/NavMenuProfiles/NavMenuProfiles.tsx","assets/images/icons/close-white-icon.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/close-icon.svg","assets/images/icons/gear-icon.svg","assets/images/icons/modify-size-icon.svg","components/PageHeader/PageHeaderSettingsMenu/PageHeaderSettingsMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","components/ProfileForm/ProfileForm.tsx","components/CreateProfileForm/CreateProfileForm.tsx","components/ProfilePicker/useOutsideClickCard.ts","components/ProfilePicker/usePress.ts","assets/images/icons/edit-icon.svg","assets/images/icons/plus.svg","assets/images/icons/trash-icon.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","store/selectors.ts","components/Page/Page.tsx","components/App/App.tsx","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/channels/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/saga.ts","store/auth/actions.ts","store/auth/watch.ts","components/Firebase/services/generateId.ts","store/channels/saga.ts","store/channels/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["LocalStorageKey","StoragePath","ChatInput","forwardRef","ref","inputHandler","useState","visibilityPlaceholder","setVisibilityPlaceholder","className","contentEditable","onBlur","event","target","innerText","trim","length","onFocus","onInput","suppressContentEditableWarning","alt","src","SendIcon","ChatMessages","_","DatabaseColumns","Context","createContext","margin","setMargin","ContextProvider","children","parseInt","localStorage","getItem","marginOffset","Provider","value","result","setItem","Chat","messagesRef","useRef","inputRef","useContext","style","height","current","clientHeight","ProfilesActionsType","getRefDatabase","path","refDataBase","firebase","database","i","child","useOnDisconnectHandlers","indexProfile","disconnectProfile","profiles","onDisconnect","set","REDUCER_KEY","ChannelsActionsType","profilesSelector","getFp","isPendingSelector","createSelector","profilesLoadedSelector","composeFp","isArrayFp","getAttributeFromProfiles","attribute","getAttributesFromSelectedProfile","selectedProfileId","findFp","profileId","getAttributeFromSelectedProfile","createProfileError","payload","type","uploadImageFinished","OnlineHandler","dispatch","useDispatch","useSelector","findIndex","useEffect","updateTimeProfile","Mode","createChannelError","createChannelsError","channelsSelector","channelsLoadedSelector","getDefaultChannelId","headFp","getAttributeFromChannels","NavMenuCreateChannelForm","closeModal","openNotifiaction","name","setName","shortcut","setShortcut","isSubmitted","setIsSubmitted","isPending","onSubmit","preventDefault","toUpperCase","createChannel","TextField","onChange","e","label","inputProps","maxLength","Button","color","disabled","size","variant","CircularProgress","NavMenuChannels","closeNavMenu","open","setOpen","visible","setVisible","channels","Alert","props","elevation","onClickHandler","channelId","setChannelId","onClick","PlusWhiteIcon","map","Modal","closeAfterTransition","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Snackbar","autoHideDuration","severity","isOnlineUser","lastTimeFromSelectedProfile","lastUpdateFromTimeSomeProfile","online","NavMenuProfiles","lastUpdateTime","getIconPath","lastUpdateTimeProfile","OnlineIcon","OfflineIcon","filter","NavMenu","stopPropagation","CloseWhiteIcon","PageHeaderSettingsMenu","anchorEl","setAnchorEl","onClickCloseHandler","currentTarget","GearIcon","Menu","id","keepMounted","Boolean","MenuItem","ModifySizeIcon","CloseIcon","PageHeader","defaultChannelId","selectedChannelId","getAttributesFromSelectedChannel","reduce","total","HamburgerMenu","loadImage","setImageData","reader","FileReader","files","onload","file","readAsDataURL","ProfileForm","clickHandler","initialName","imageData","initialImageData","submitHandler","title","BackIcon","backToProfileList","EmptyImage","click","ButtonPicture","CreateProfileForm","restProps","formData","createProfile","useOutsideClickCard","isFocus","setFocus","eventType","isMobile","handleClickOutside","contains","document","addEventListener","removeEventListener","isTouchEvent","touches","usePress","pressHandler","shouldPreventDefault","delay","longPressTriggered","setLongPressTriggered","start","useCallback","passive","setTimeout","clear","shouldTriggerClick","clearTimeout","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","clearManual","ProfilePicker","mode","cardRef","overlayVisible","setOverlayVisible","isOverlayVisible","restPropsPress","PlusIcon","EditIcon","TrashIcon","AuthActionsType","ProfilePickerList","selectProfile","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","index","authSelector","errorMessageSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","channelsData","Page","App","theme","useMemo","createMuiTheme","palette","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","data","push","databaseSuccessHandler","response","actions","val","databaseHandler","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","channelsActions","fetchChannelsSuccess","initialState","loginSuccess","state","loginError","createChannelSuccess","fetchChannelsError","createProfileSuccess","fetchProfilesError","setProfileId","reducers","auth","action","createRootReducer","combineReducers","login","password","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","generateId","keyId","characters","splice","charAt","Math","floor","random","find","join","select","watchChannels","uploadImage","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","take","Date","getTime","selectProfileError","updateTimeProfileError","watchProfiles","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eb8fbe1b.chunk.js","sourcesContent":["export enum LocalStorageKey {\n  marginOffset = 'MARGIN_OFFSET',\n}\n\nexport enum StoragePath {\n  profiles = 'PROFILES',\n}\n","export default __webpack_public_path__ + \"static/media/send-icon.d7969ca4.svg\";","// @ts-nocheck\nimport {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n  useState,\n} from 'react';\n\n// others\nimport SendIcon from '../../../assets/images/icons/send-icon.svg';\n\n// styles\nimport './chat-input-styles.scss';\n\ntype TProps = {\n  inputHandler: (event: Event) => void;\n};\n\nconst ChatInput: ForwardRefExoticComponent<\n  TProps & RefAttributes<HTMLDivElement>\n> = forwardRef<HTMLDivElement, TProps>(({ inputHandler }, ref) => {\n  const [visibilityPlaceholder, setVisibilityPlaceholder] = useState(true);\n\n  const onBlurHandler = (event: Event): void => {\n    const { target } = event;\n\n    if (target.innerText.trim().length === 0) {\n      setVisibilityPlaceholder(true);\n    }\n  };\n\n  return (\n    <div className=\"ChatInput\" ref={ref}>\n      <p\n        className=\"ChatInput__text-field\"\n        contentEditable={true}\n        onBlur={onBlurHandler}\n        onFocus={() => setVisibilityPlaceholder(false)}\n        onInput={inputHandler}\n        suppressContentEditableWarning\n      />\n      {visibilityPlaceholder && (\n        <span className=\"ChatInput__placeholder\">Message #Meetings:</span>\n      )}\n      <img alt=\"send-icon\" className=\"ChatInput__send-icon\" src={SendIcon} />\n    </div>\n  );\n});\n\nexport default ChatInput;\n","import { forwardRef, ForwardRefExoticComponent, RefAttributes } from 'react';\n\n// styles\nimport './chat-messages-styles.scss';\n\nconst ChatMessages: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>> =\n  forwardRef<HTMLDivElement, {}>((_, ref) => {\n    return <div className=\"ChatMessages\" ref={ref}></div>;\n  });\n\nexport default ChatMessages;\n","// @ts-nocheck\nimport { createContext, FunctionComponent, ReactNode, useState } from 'react';\n\n// other\nimport { LocalStorageKey } from '../../enums';\n\ntype TProps = {\n  children: ReactNode;\n};\n\nexport const Context: React.Context<any> = createContext({\n  margin: 0,\n  setMargin: () => {},\n});\n\nconst getMarginFromLocalStorage = (): number =>\n  parseInt(localStorage.getItem(LocalStorageKey.marginOffset) || 0);\n\nconst ContextProvider: FunctionComponent<TProps> = ({ children }) => {\n  const [margin, setMargin] = useState(getMarginFromLocalStorage());\n\n  const setMarginHandler = (value: number): void => {\n    const result = margin + value;\n\n    if (margin > 0 || value !== -1) {\n      setMargin(result);\n      localStorage.setItem(LocalStorageKey.marginOffset, result);\n    }\n  };\n\n  return (\n    <Context.Provider value={{ margin, setMargin: setMarginHandler }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n  channels = 'channels',\n}\n","// @ts-nocheck\nimport { FunctionComponent, useContext, useRef } from 'react';\n\n// components\nimport ChatInput from './ChatInput/ChatInput';\nimport ChatMessages from './ChatMessages/ChatMessages';\n\n// core\nimport { Context } from '../../core/ContextProvider/ContextProvider';\n\n// others\nimport { TContext } from '../../core/ContextProvider/types';\n\n// styles\nimport './chat-styles.scss';\n\nconst Chat: FunctionComponent<{}> = () => {\n  const messagesRef = useRef(null);\n  const inputRef = useRef(null);\n  const { margin }: TContext = useContext(Context);\n\n  const onInputHandler = (): void => {\n    const height = inputRef.current.clientHeight;\n    messagesRef.current.style.height = `calc(100% - ${height}px)`;\n  };\n\n  return (\n    <section\n      className=\"Chat\"\n      style={{ height: `calc(100vh - ${80 + margin}px)` }}\n    >\n      <ChatMessages ref={messagesRef} />\n      <ChatInput inputHandler={onInputHandler} ref={inputRef} />\n    </section>\n  );\n};\n\nexport default Chat;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  createProfile = `${REDUCER_KEY}/createProfile`,\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  selectProfile = `${REDUCER_KEY}/selectProfile`,\n  selectProfileError = `${REDUCER_KEY}/selectProfileError`,\n  updateTimeProfile = `${REDUCER_KEY}/updateTimeProfile`,\n  updateTimeProfileError = `${REDUCER_KEY}/updateTimeProfileError`,\n}\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\n// others\nimport { DatabaseColumns } from '../Firebase/enums';\n\n// services\nimport getRefDatabase from '../Firebase/services/getRefDatabase';\n\nconst useOnDisconnectHandlers = (indexProfile: number) => {\n  const disconnectProfile = () =>\n    getRefDatabase([DatabaseColumns.profiles, indexProfile, 'online'])\n      .onDisconnect()\n      .set(false);\n\n  return {\n    disconnectProfile,\n  };\n};\n\nexport default useOnDisconnectHandlers;\n","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TProfile, TProfilesState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(profilesSelector, getFp('isPending'));\n\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\n\nexport const getAttributeFromProfiles = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(profilesSelector, getFp(attribute));\n\nexport const getAttributesFromSelectedProfile = (\n  selectedProfileId: string\n): Selector<TMainState, TProfile> =>\n  // @ts-ignore\n  createSelector(\n    profilesSelector,\n    composeFp(\n      findFp(({ profileId }) => profileId === selectedProfileId),\n      getFp('data')\n    )\n  );\n\nexport const getAttributeFromSelectedProfile = (\n  attribute: string,\n  selectedProfileId: string\n): Selector<TMainState, TProfile> =>\n  // @ts-ignore\n  createSelector(\n    getAttributesFromSelectedProfile(selectedProfileId),\n    getFp(attribute)\n  );\n","// @ts-nocheck\nexport const REDUCER_KEY = 'channels';\n\nexport enum ChannelsActionsType {\n  createChannel = `${REDUCER_KEY}/createChannel`,\n  createChannelSuccess = `${REDUCER_KEY}/createChannelSuccess`,\n  createChannelsError = `${REDUCER_KEY}/createChannelsError`,\n  fetchChannelsSuccess = `${REDUCER_KEY}/fetchChannelsSuccess`,\n  fetchChannelsError = `${REDUCER_KEY}/fetchChannelsError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  setChannelId = `${REDUCER_KEY}/setChannelId`,\n}\n","import { TUpdateTimeProfileError } from './types';\n// others\nimport { TReturnablePayload } from './../common/types';\nimport {\n  TCreateProfile,\n  TCreateProfileSuccess,\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TFetchProfilesError,\n  TProfile,\n  TProfileFormData,\n  TUploadImageFinished,\n  TSelectProfile,\n  TSelectProfileError,\n  TUpdateTimeProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\n\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\n  type: ProfilesActionsType.createProfile,\n  payload,\n});\n\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\n  type: ProfilesActionsType.createProfileSuccess,\n});\n\nexport const createProfileError = (payload: string): TCreateProfileError => ({\n  type: ProfilesActionsType.createProfileError,\n  payload,\n});\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n\nexport const uploadImageFinished = (\n  payload: TReturnablePayload\n): TUploadImageFinished => ({\n  type: ProfilesActionsType.uploadImageFinished,\n  payload,\n});\n\nexport const selectProfile = (payload: string): TSelectProfile => ({\n  type: ProfilesActionsType.selectProfile,\n  payload,\n});\n\nexport const selectProfileError = (payload: string): TSelectProfileError => ({\n  type: ProfilesActionsType.selectProfileError,\n  payload,\n});\n\nexport const updateTimeProfile = (payload: string): TUpdateTimeProfile => ({\n  type: ProfilesActionsType.updateTimeProfile,\n  payload,\n});\n\nexport const updateTimeProfileError = (\n  payload: string\n): TUpdateTimeProfileError => ({\n  type: ProfilesActionsType.updateTimeProfileError,\n  payload,\n});\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// hooks\nimport useOnDisconnectHandlers from './useOnDisconnectHandlers';\n\n// others\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { updateTimeProfile } from '../../store/profiles/actions';\n\nconst OnlineHandler: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const indexProfile = profiles.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n  const { disconnectProfile } = useOnDisconnectHandlers(indexProfile);\n\n  useEffect(() => {\n    disconnectProfile();\n    dispatch(updateTimeProfile(selectedProfileId));\n    // eslint-disable-next-line\n  }, []);\n\n  return null;\n};\n\nexport default OnlineHandler;\n","// others\nimport {\n  TChannel,\n  TCreateChannel,\n  TCreateChannelSuccess,\n  TCreateChannelError,\n  TFetchChannelsSuccess,\n  TFetchChannelsError,\n  TSetChannelId,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\n\nexport const createChannel = (\n  payload: Omit<TChannel, 'chanelId' | 'messages'>\n): TCreateChannel => ({\n  type: ChannelsActionsType.createChannel,\n  payload,\n});\n\nexport const createChannelSuccess = (): TCreateChannelSuccess => ({\n  type: ChannelsActionsType.createChannelSuccess,\n});\n\nexport const createChannelError = (payload: string): TCreateChannelError => ({\n  type: ChannelsActionsType.createChannelsError,\n  payload,\n});\n\nexport const fetchChannelsSuccess = (\n  payload: Array<TChannel>\n): TFetchChannelsSuccess => ({\n  type: ChannelsActionsType.fetchChannelsSuccess,\n  payload,\n});\n\nexport const fetchChannelsError = (): TFetchChannelsError => ({\n  type: ChannelsActionsType.fetchChannelsError,\n});\n\nexport const setChannelId = (payload: string): TSetChannelId => ({\n  type: ChannelsActionsType.setChannelId,\n  payload,\n});\n","export enum Mode {\n  createProfile = 'createProfile',\n  listProfiles = 'listProfiles',\n}\n","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport headFp from 'lodash/head';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TChannel, TChannelsState } from './types';\n\nexport const channelsSelector: Selector<TMainState, TChannelsState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(channelsSelector, getFp('isPending'));\n\nexport const channelsLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(channelsSelector, composeFp(isArrayFp, getFp('channels')));\n\nexport const getDefaultChannelId: Selector<TMainState, TChannel> =\n  createSelector(\n    channelsSelector,\n    composeFp(getFp('channelId'), headFp, getFp('channels'))\n  );\n\nexport const getAttributeFromChannels = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(channelsSelector, getFp(attribute));\n\nexport const getAttributesFromSelectedChannel = (\n  selectedChannelId: string\n): Selector<TMainState, TChannel> =>\n  // @ts-ignore\n  createSelector(\n    channelsSelector,\n    composeFp(\n      findFp(({ channelId }) => channelId === selectedChannelId),\n      getFp('channels')\n    )\n  );\n","// @ts-nocheck\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// store\nimport { createChannel } from '../../../store/channels/actions';\nimport { isPendingSelector } from '../../../store/channels/selectors';\n\n// styles\nimport './nav-menu-create-channel-form-styles.scss';\n\ntype TProps = {\n  closeModal: () => void;\n  openNotifiaction: () => void;\n};\n\nconst NavMenuCreateChannelForm: FunctionComponent<TProps> = ({\n  closeModal,\n  openNotifiaction,\n}) => {\n  const [name, setName] = useState('');\n  const [shortcut, setShortcut] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n\n  const onSubmitHandler = (event: Event): void => {\n    event.preventDefault();\n\n    if (name && shortcut) {\n      dispatch(createChannel({ name, shortcut: shortcut.toUpperCase() }));\n      setIsSubmitted(true);\n    }\n  };\n\n  useEffect(() => {\n    if (!isPending && isSubmitted) {\n      closeModal();\n      openNotifiaction();\n    }\n    // eslint-disable-next-line\n  }, [isPending, isSubmitted]);\n\n  return (\n    <form className=\"NavMenuCreateChannelForm\" onSubmit={onSubmitHandler}>\n      <h2>Create channel:</h2>\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setName(e.target.value)}\n        label=\"Channel name:\"\n        value={name}\n      />\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setShortcut(e.target.value)}\n        label=\"Shortcut channel name eg. (ME):\"\n        inputProps={{ maxLength: 2 }}\n        value={shortcut}\n      />\n      <Button\n        className=\"ProfileForm__submit-button\"\n        color=\"primary\"\n        disabled={isPending}\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n      >\n        Create Channel\n        {isPending && (\n          <CircularProgress\n            className=\"ProfileForm__spinner\"\n            color=\"primary\"\n            size={20}\n          />\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default NavMenuCreateChannelForm;\n","export default __webpack_public_path__ + \"static/media/plus-white-icon.abb60e4a.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n// components\nimport NavMenuCreateChannelForm from '../NavMenuCreateChannelForm/NavMenuCreateChannelForm';\n\n// others\nimport PlusWhiteIcon from '../../../assets/images/icons/plus-white-icon.svg';\nimport { TChannel } from '../../../store/channels/types';\n\n// store\nimport { getAttributeFromChannels } from '../../../store/channels/selectors';\nimport { setChannelId } from '../../../store/channels/actions';\n\n// styles\nimport './nav-menu-channels-styles.scss';\n\ntype TProps = {\n  closeNavMenu: () => void;\n};\n\nconst NavMenuChannels: FunctionComponent<TProps> = ({ closeNavMenu }) => {\n  const [open, setOpen] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const dispatch = useDispatch();\n  const channels: Array<TChannel> = useSelector(\n    getAttributeFromChannels('channels')\n  );\n\n  const Alert = (props: AlertProps) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  };\n\n  const onClickHandler = (channelId: string): void => {\n    closeNavMenu();\n    dispatch(setChannelId(channelId));\n  };\n\n  return (\n    <div className=\"NavMenuChannels\">\n      {/* NAV */}\n      <div className=\"NavMenuChannels__nav\">\n        <p className=\"NavMenuChannels__title\">Channels</p>\n        <img\n          alt=\"plus-white-icon\"\n          className=\"NavMenuChannels__button\"\n          onClick={() => setVisible(true)}\n          src={PlusWhiteIcon}\n        />\n      </div>\n      {/* CHANNELS */}\n      <div className=\"NavMenuChannels__channels\">\n        {channels.map(({ channelId, name }) => (\n          <p\n            className=\"NavMenuChannels__channel-name\"\n            key={channelId}\n            onClick={() => onClickHandler(channelId)}\n          >\n            #{name}\n          </p>\n        ))}\n      </div>\n\n      {/* MODAL */}\n      <Modal\n        className=\"NavMenuChannels__modal\"\n        closeAfterTransition\n        open={visible}\n        onClose={() => setVisible(false)}\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={visible}>\n          <div className=\"NavMenuChannels__card\">\n            <NavMenuCreateChannelForm\n              closeModal={() => setVisible(false)}\n              openNotifiaction={() => setOpen(true)}\n            />\n          </div>\n        </Fade>\n      </Modal>\n\n      {/* NOTIFICATION */}\n      <Snackbar\n        open={open}\n        className=\"NavMenuChannels__snackbar\"\n        autoHideDuration={5000}\n        onClose={() => setOpen(false)}\n      >\n        <Alert onClose={() => setOpen(false)} severity=\"success\">\n          Channel has been added!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default NavMenuChannels;\n","export default __webpack_public_path__ + \"static/media/offline-icon.e258b94e.svg\";","export default __webpack_public_path__ + \"static/media/online-icon.f3194dda.svg\";","// others\nimport { TIME_TO_COMPARE } from '../constants';\n\nconst isOnlineUser = (\n  lastTimeFromSelectedProfile: number,\n  lastUpdateFromTimeSomeProfile: number,\n  online: boolean\n): boolean =>\n  online &&\n  lastTimeFromSelectedProfile - lastUpdateFromTimeSomeProfile < TIME_TO_COMPARE;\n\nexport default isOnlineUser;\n","export const EMAIL = 'eryk.sandecki@gmail.com';\nexport const UPDATE_DELAY_TIME = 60000;\nexport const TIME_TO_COMPARE = 90000;\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport OfflineIcon from '../../../assets/images/icons/offline-icon.svg';\nimport OnlineIcon from '../../../assets/images/icons/online-icon.svg';\nimport { TProfile } from '../../../store/profiles/types';\n\n// services\nimport isOnlineUser from '../../../services/isOnlineUser';\n\n// store\nimport {\n  getAttributeFromProfiles,\n  getAttributeFromSelectedProfile,\n} from '../../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-profiles-styles.scss';\n\nconst NavMenuProfiles: FunctionComponent = () => {\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n\n  //@ts-ignore\n  const lastUpdateTime: number = useSelector(\n    getAttributeFromSelectedProfile('lastUpdateTime', selectedProfileId)\n  );\n\n  const getIconPath = (\n    lastUpdateTimeProfile: number,\n    online: boolean\n  ): string => {\n    if (isOnlineUser(lastUpdateTime, lastUpdateTimeProfile, online)) {\n      return OnlineIcon;\n    }\n    return OfflineIcon;\n  };\n\n  return (\n    <div className=\"NavMenuProfiles\">\n      {/* HEADER */}\n      <div className=\"NavMenuProfiles__header\">\n        <p className=\"NavMenuProfiles__title\">Brothers-in-law</p>\n      </div>\n\n      {/* USERS */}\n      <div className=\"NavMenuProfiles__profiles\">\n        {profiles\n          .filter(({ profileId }) => profileId !== selectedProfileId)\n          .map(({ lastUpdateTime, name, online, profileId, src }) => (\n            <div className=\"NavMenuProfiles__profile\" key={profileId}>\n              <img\n                alt={profileId}\n                className=\"NavMenuProfiles__avatar\"\n                src={src}\n              />\n              <img\n                alt=\"status-icon\"\n                className=\"NavMenuProfiles__status\"\n                src={getIconPath(lastUpdateTime, online)}\n              />\n              <p className=\"NavMenuProfiles__name\" key={profileId}>\n                {name}\n              </p>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenuProfiles;\n","export default __webpack_public_path__ + \"static/media/close-white-icon.46536c1e.svg\";","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenuChannels from './NavMenuChannels/NavMenuChannels';\nimport NavMenuProfiles from './NavMenuProfiles/NavMenuProfiles';\n\n// others\nimport CloseWhiteIcon from '../../assets/images/icons/close-white-icon.svg';\n\n// store\nimport {\n  getAttributeFromProfiles,\n  getAttributesFromSelectedProfile,\n} from '../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const { name, src } = useSelector(\n    getAttributesFromSelectedProfile(selectedProfileId)\n  );\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      {/* BACKGROUND */}\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n\n      {/* CONTAINER */}\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* HEADER */}\n        <div className=\"NavMenu__header\">\n          <div className=\"NavMenu__profile-data\">\n            <img\n              alt=\"profile-avatar\"\n              className=\"NavMenu__profile-avatar\"\n              src={src}\n            />\n            <p className=\"NavMenu__profile-name\">{name}</p>\n          </div>\n          <img\n            alt=\"close-white-icon\"\n            className=\"NavMenu__button-close\"\n            onClick={onClickHandler}\n            src={CloseWhiteIcon}\n          />\n        </div>\n\n        {/* CONTENT */}\n        <div className=\"NavMenu__content\">\n          <NavMenuChannels closeNavMenu={onClickHandler} />\n          <NavMenuProfiles />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/close-icon.092c61d5.svg\";","export default __webpack_public_path__ + \"static/media/gear-icon.e5deb93c.svg\";","export default __webpack_public_path__ + \"static/media/modify-size-icon.7b8f31f6.svg\";","// @ts-nocheck\nimport { FunctionComponent, useContext, useState } from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// core\nimport { Context } from '../../../core/ContextProvider/ContextProvider';\n\n// others\nimport CloseIcon from '../../../assets/images/icons/close-icon.svg';\nimport GearIcon from '../../../assets/images/icons/gear-icon.svg';\nimport ModifySizeIcon from '../../../assets/images/icons/modify-size-icon.svg';\nimport { TContext } from '../../../core/ContextProvider/types';\n\n// styles\nimport './page-header-settings-menu-styles.scss';\n\nconst PageHeaderSettingsMenu: FunctionComponent<{}> = () => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { setMargin }: TContext = useContext(Context);\n  const onClickOpenHandler = (event: Event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onClickCloseHandler = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className=\"PageHeaderSettingsMenu\">\n      <img alt=\"gear-icon\" onClick={onClickOpenHandler} src={GearIcon} />\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClickCloseHandler}\n      >\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(1)}\n        >\n          Up\n          <img alt=\"gear-icon\" src={ModifySizeIcon} />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(-1)}\n        >\n          Down\n          <img\n            alt=\"reverted-gear-icon\"\n            className=\"PageHeaderSettingsMenu__icon-rotate\"\n            src={ModifySizeIcon}\n          />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={onClickCloseHandler}\n        >\n          Close\n          <img alt=\"close-icon\" src={CloseIcon} />\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\nexport default PageHeaderSettingsMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.85ddbb0d.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\nimport PageHeaderSettingsMenu from './PageHeaderSettingsMenu/PageHeaderSettingsMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\nimport { TChannel } from '../../store/channels/types';\nimport { TProfile } from '../../store/profiles/types';\n\n// services\nimport isOnlineUser from '../../services/isOnlineUser';\n\n// store\nimport {\n  getAttributeFromChannels,\n  getAttributesFromSelectedChannel,\n  getDefaultChannelId,\n} from '../../store/channels/selectors';\nimport {\n  getAttributeFromProfiles,\n  getAttributeFromSelectedProfile,\n} from '../../store/profiles/selectors';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n  const defaultChannelId = useSelector(getDefaultChannelId);\n  const selectedChannelId =\n    useSelector(getAttributeFromChannels('selectedChannelId')) ||\n    defaultChannelId;\n  const { name, shortcut }: TChannel = useSelector(\n    getAttributesFromSelectedChannel(selectedChannelId)\n  );\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n\n  //@ts-ignore\n  const lastUpdateTime: number = useSelector(\n    getAttributeFromSelectedProfile('lastUpdateTime', selectedProfileId)\n  );\n\n  const getNumberOfUsersOnline = (): number =>\n    profiles\n      .filter(({ profileId }) => profileId !== selectedProfileId)\n      .reduce(\n        (total, { lastUpdateTime: lastUpdateTimeProfile, online }) =>\n          isOnlineUser(lastUpdateTime, lastUpdateTimeProfile, online)\n            ? ++total\n            : total,\n        0\n      );\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__left-column\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">{shortcut}</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">#{name}</p>\n          <p className=\"PageHeader__users\">\n            {getNumberOfUsersOnline()} Brothers online\n          </p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <div className=\"PageHeader__right-column\">\n        <PageHeaderSettingsMenu />\n        <img\n          alt=\"hamburger-menu\"\n          className=\"PageHeader__hamburger-menu\"\n          onClick={() => setVisible(true)}\n          src={HamburgerMenu}\n        />\n      </div>\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/back.d5208217.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.9659aaae.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.acb60281.svg\";","// @ts-nocheck\n// others\n\nconst loadImage = (\n  event: Event,\n  setImageData: (file: string | ArrayBuffer | null) => void\n) => {\n  const reader = new FileReader();\n  const { files } = event.target;\n\n  reader.onload = (e) => {\n    setImageData({\n      file: files[0],\n      src: e.target.result,\n    });\n  };\n\n  reader.readAsDataURL(files[0]);\n};\n\nexport default loadImage;\n","// @ts-nocheck\nimport { FunctionComponent, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// others\nimport BackIcon from '../../assets/images/icons/back.svg';\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\nimport { TImageData } from '../../types';\nimport { TProfileFormData } from '../../store/profiles/types';\n\n// services\nimport loadImage from './services/loadImage';\n\n// store\nimport { isPendingSelector } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-form-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  name?: string;\n  imageData?: TImageData;\n  submitHandler: (formData: TProfileFormData) => void;\n  title: string;\n};\n\nconst ProfileForm: FunctionComponent<TProps> = ({\n  clickHandler,\n  name: initialName = '',\n  imageData: initialImageData = null,\n  submitHandler,\n  title,\n}) => {\n  const isPending = useSelector(isPendingSelector);\n  const inputRef = useRef(null);\n  const [imageData, setImageData] = useState(initialImageData);\n  const [name, setName] = useState(initialName);\n\n  const onSubmitHandler = (event: Event) => {\n    event.preventDefault();\n\n    if (imageData && name) {\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\n    }\n  };\n\n  return (\n    <div className=\"ProfileForm__form-wrapper\">\n      <h2 className=\"ProfileForm__title\">\n        <img\n          alt=\"back-icon\"\n          className=\"ProfileForm__icon\"\n          onClick={clickHandler}\n          src={BackIcon}\n        />\n        {title}\n      </h2>\n\n      {/* FORM */}\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\n        {/* AVATAR */}\n        <div\n          className={`ProfileForm__avatar ${\n            imageData ? 'ProfileForm__avatar--selected' : ''\n          }`}\n        >\n          {imageData ? (\n            <img\n              alt=\"avatar\"\n              className=\"ProfileForm__image\"\n              src={imageData.src}\n            />\n          ) : (\n            <img\n              alt=\"empty\"\n              className=\"ProfileForm__empty-picture\"\n              src={EmptyImage}\n            />\n          )}\n\n          {/* BUTTON */}\n          <img\n            alt=\"button-icon\"\n            className=\"ProfileForm__button-picture\"\n            onClick={() => inputRef.current.click()}\n            src={ButtonPicture}\n          />\n          <input\n            className=\"ProfileForm__input-file\"\n            onChange={(event: Event) => loadImage(event, setImageData)}\n            ref={inputRef}\n            type=\"file\"\n          />\n        </div>\n\n        {/* INPUT NAME */}\n        <TextField\n          className=\"ProfileForm__input-name\"\n          onChange={(e) => setName(e.target.value)}\n          label=\"Profile name:\"\n          value={name}\n        />\n\n        <Button\n          className=\"ProfileForm__submit-button\"\n          color=\"primary\"\n          disabled={isPending}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Create Profile\n          {isPending && (\n            <CircularProgress\n              className=\"ProfileForm__spinner\"\n              color=\"primary\"\n              size={20}\n            />\n          )}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","import { FunctionComponent } from 'react';\nimport { useDispatch } from 'react-redux';\n\n// components\nimport ProfileForm from '../ProfileForm/ProfileForm';\n\n// store\nimport { createProfile } from '../../store/profiles/actions';\nimport { TProfileFormData } from '../../store/profiles/types';\n\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (formData: TProfileFormData) =>\n    dispatch(createProfile(formData));\n\n  return (\n    //@ts-ignore\n    <ProfileForm\n      submitHandler={submitHandler}\n      title=\"Create Profile:\"\n      {...restProps}\n    />\n  );\n};\n\nexport default CreateProfileForm;\n","// @ts-nocheck\nimport { MutableRefObject, useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nconst useOutsideClickCard = (ref: MutableRefObject<HTMLDivElement>) => {\n  const [isFocus, setFocus] = useState(false);\n  const eventType = isMobile ? 'touchstart' : 'mousedown';\n\n  useEffect(() => {\n    const handleClickOutside = (event: Event): void => {\n      const target = event.target as Node;\n\n      if (ref.current) {\n        if (!isFocus && ref.current.contains(target)) {\n          setFocus(true);\n        } else if (isFocus && !ref.current.contains(target)) {\n          setFocus(false);\n        }\n      }\n    };\n\n    document.addEventListener(eventType, handleClickOutside);\n    \n    return () => {\n      document.removeEventListener(eventType, handleClickOutside);\n    };\n    // eslint-disable-next-line\n  }, [ref, isFocus]);\n\n  return isFocus;\n};\n\nexport default useOutsideClickCard;\n","// @ts-nocheck\nimport { useCallback, useRef, useState } from 'react';\n\nconst usePress = (\n  pressHandler,\n  clickHandler,\n  { shouldPreventDefault = true, delay = 1000 } = {}\n) => {\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const timeout = useRef();\n  const target = useRef();\n\n  const start = useCallback(\n    (event) => {\n      if (shouldPreventDefault && event.target) {\n        event.target.addEventListener('touchend', preventDefault, {\n          passive: false,\n        });\n        target.current = event.target;\n      }\n\n      timeout.current = setTimeout(() => {\n        pressHandler(event);\n        setLongPressTriggered(true);\n      }, delay);\n    },\n    [pressHandler, delay, shouldPreventDefault]\n  );\n\n  const clear = useCallback(\n    (_, shouldTriggerClick = true) => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n      }\n\n      if (shouldTriggerClick && !longPressTriggered) {\n        clickHandler();\n      }\n\n      if (shouldPreventDefault && target.current) {\n        target.current.removeEventListener('touchend', preventDefault);\n      }\n\n      setLongPressTriggered(false);\n    },\n    [shouldPreventDefault, clickHandler, longPressTriggered]\n  );\n\n  return {\n    onMouseDown: (e) => start(e),\n    onTouchStart: (e) => start(e),\n    onMouseUp: (e) => clear(e),\n    onMouseLeave: (e) => clear(e, false),\n    onTouchEnd: (e) => clear(e),\n    clearManual: () => clear(null, false),\n  };\n};\n\nconst isTouchEvent = (event) => {\n  return 'touches' in event;\n};\n\nconst preventDefault = (event) => {\n  if (!isTouchEvent(event)) return;\n\n  if (event.touches.length < 2 && event.preventDefault) {\n    event.preventDefault();\n  }\n};\n\nexport default usePress;\n","export default __webpack_public_path__ + \"static/media/edit-icon.a04997a1.svg\";","export default __webpack_public_path__ + \"static/media/plus.c453ef1e.svg\";","export default __webpack_public_path__ + \"static/media/trash-icon.66b5ea88.svg\";","import {\n  FunctionComponent,\n  MutableRefObject,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\n// hooks\nimport useOutsideClickCard from './useOutsideClickCard';\nimport usePress from './usePress';\n\n// others\nimport EditIcon from '../../assets/images/icons/edit-icon.svg';\nimport PlusIcon from '../../assets/images/icons/plus.svg';\nimport TrashIcon from '../../assets/images/icons/trash-icon.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n  name?: string;\n  src?: string;\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n  name,\n  src,\n}) => {\n  // @ts-ignore\n  const cardRef: MutableRefObject<HTMLDivElement> = useRef(null);\n  const isFocus = useOutsideClickCard(cardRef);\n  const [overlayVisible, setOverlayVisible] = useState(false);\n  const isOverlayVisible = mode === 'select' && overlayVisible && isFocus;\n\n  const onPressHandler = () => {\n    setOverlayVisible(true);\n  };\n\n  const onClickHandler = () => {\n    clickHandler();\n  };\n\n  const { clearManual, ...restPropsPress } = usePress(\n    onPressHandler,\n    onClickHandler\n  );\n\n  useEffect(() => {\n    if (!isFocus && overlayVisible) {\n      setOverlayVisible(false);\n      clearManual();\n    }\n    // eslint-disable-next-line\n  }, [isFocus, overlayVisible]);\n\n  return (\n    <section\n      className={`ProfilePicker ${\n        isOverlayVisible ? 'ProfilePicker--blur' : ''\n      }`}\n      ref={cardRef}\n    >\n      <div\n        className={`ProfilePicker__card ProfilePicker--${mode}__card ${\n          isOverlayVisible ? 'ProfilePicker__card--blur' : ''\n        }`}\n        {...restPropsPress}\n      >\n        {/* TITLE */}\n        <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\n          {name ? name : 'Create:'}\n        </p>\n\n        {/* CIRCLE */}\n        <div className={`ProfilePicker__button ProfilePicker--${mode}__button`}>\n          <img\n            alt={name ? `${name}-avatar` : 'icon'}\n            className={`ProfilePicker__image ProfilePicker--${mode}__image`}\n            src={src ? src : PlusIcon}\n          />\n        </div>\n      </div>\n\n      {/* OVERLAY */}\n      {isOverlayVisible && (\n        <div className=\"ProfilePicker__overlay\">\n          <div className=\"ProfilePicker__wrapper\">\n            <p className=\"ProfilePicker__help-text\">\n              Select one of the options:\n            </p>\n            <div className=\"ProfilePicker__options\">\n              <div className=\"ProfilePicker__option\">\n                <img alt=\"edit-icon\" src={EditIcon} />\n              </div>\n              <div className=\"ProfilePicker__option\">\n                <img alt=\"trash-icon\" src={TrashIcon} />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = `${REDUCER_KEY}/login`,\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\n  loginError = `${REDUCER_KEY}/loginError`,\n}\n","import { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { selectProfile } from '../../store/profiles/actions';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  const dispatch = useDispatch();\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a profile to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\n\n        {/* LIST */}\n        {/* @ts-ignore */}\n        {profiles.map(({ name, profileId, src }) => (\n          <ProfilePicker\n            clickHandler={() => dispatch(selectProfile(profileId))}\n            key={profileId}\n            mode=\"select\"\n            name={name}\n            src={src}\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        // LIST\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        // @ts-ignore\n        <CreateProfileForm clickHandler={onClickBackHandler} />\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","export default __webpack_public_path__ + \"static/media/gentleman.ff3326dc.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\ntype TProps = {\n  appDataLoaded: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\n  <div className=\"PageLoader\">\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\n    {/* LOGO */}\n    <img alt=\"gentleman-logo\" src={Gentleman} />\n\n    {/* SPINNER */}\n    <div className=\"PageLoader__spinner\">\n      {Array.from(Array(12)).map((_, index) => (\n        <div\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\n          key={index}\n        ></div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport { channelsLoadedSelector } from './channels/selectors';\nimport {\n  errorMessageSelector,\n  isPendingSelector as isPendingAuthSelector,\n} from './auth/selectors';\nimport { profilesLoadedSelector } from './profiles/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    profilesLoadedSelector,\n    channelsLoadedSelector,\n    (profilesData, channelsData) => profilesData && channelsData\n  );\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport Chat from '../Chat/Chat';\nimport OnlineHandler from '../OnlineHandler/OnlineHandler';\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { appDataLoadedSelector } from '../../store/selectors';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n\n  if (!appDataLoaded) {\n    return <PageLoader appDataLoaded={appDataLoaded} />;\n  }\n\n  if (!selectedProfileId) {\n    return <ProfilePicker />;\n  }\n\n  return (\n    <div className=\"Page\">\n      <OnlineHandler />\n      <PageHeader />\n      <Chat />\n    </div>\n  );\n};\n\nexport default Page;\n","import { useEffect, useMemo, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// components\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport Page from '../Page/Page';\n\n// core\nimport ContextProvider from '../../core/ContextProvider/ContextProvider';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    []\n  );\n\n  // useEffect(() => {\n  //   const password = prompt('Please enter a password:');\n  //   indexedDB.deleteDatabase('firebaseLocalStorageDb');\n  //   dispatch(loginAction(password as string));\n  //   // eslint-disable-next-line\n  // }, []);\n\n  // if (isPending) {\n  //   return null;\n  // }\n\n  // if (errorMessage) {\n  //   return <ErrorPage />;\n  // }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ContextProvider>\n        <Page />\n      </ContextProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// @ts-nocheck\n// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TChannel } from '../../store/channels/types';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchChannelsSuccess } from '../../store/channels/actions';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n    const channelsActions = (payload: Array<TChannel>): void => {\n      dispatch(fetchChannelsSuccess(payload));\n    };\n\n    if (!isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n        databaseHandler(firebase, channelsActions, DatabaseColumns.channels);\n      }, 1);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n};\n\nconst loginSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport {\n  TCreateChannelError,\n  TFetchChannelsSuccess,\n  TChannelsState,\n  TSetChannelId,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TChannelsState = {\n  channels: null,\n  error: '',\n  isPending: true,\n  selectedChannelId: '',\n};\n\nconst createChannel = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createChannelSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createChannelError = (\n  state: TAuthState,\n  { payload: error }: TCreateChannelError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchChannelsSuccess = (\n  state: TAuthState,\n  { payload: channels }: TFetchChannelsSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  channels,\n});\n\nconst fetchChannelsError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setChannelId = (\n  state: TAuthState,\n  { payload: selectedChannelId }: TSetChannelId\n): TAuthState => ({\n  ...state,\n  selectedChannelId,\n});\n\nconst channels = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ChannelsActionsType.createChannel:\n      return createChannel(state, action);\n    case ChannelsActionsType.createChannelSuccess:\n      return createChannelSuccess(state, action);\n    case ChannelsActionsType.createChannelsError:\n      return createChannelError(state, action);\n    case ChannelsActionsType.fetchChannelsSuccess:\n      return fetchChannelsSuccess(state, action);\n    case ChannelsActionsType.fetchChannelsError:\n      return fetchChannelsError(state, action);\n    case ChannelsActionsType.setChannelId:\n      return setChannelId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default channels;\n","// @ts-nocheck\n// others\nimport {\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TProfilesState,\n  TSelectProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TProfilesState = {\n  data: null,\n  error: '',\n  isPending: true,\n  selectedProfileId: '',\n};\n\nconst createProfile = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createProfileError = (\n  state: TAuthState,\n  { payload: error }: TCreateProfileError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setProfileId = (\n  state: TAuthState,\n  { payload: selectedProfileId }: TSelectProfile\n): TAuthState => ({\n  ...state,\n  selectedProfileId,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.createProfile:\n      return createProfile(state, action);\n    case ProfilesActionsType.createProfileSuccess:\n      return createProfileSuccess(state, action);\n    case ProfilesActionsType.createProfileError:\n      return createProfileError(state, action);\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    case ProfilesActionsType.selectProfile:\n      return setProfileId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport channels from './channels/reducer';\nimport profiles from './profiles/reducer';\n\nconst reducers = { auth, channels, profiles };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess());\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\n// others\nimport { TChannel } from '../../../store/channels/types';\nimport { TProfile } from '../../../store/profiles/types';\n\nconst generateId = (data: Array<TProfile | TChannel>, keyId: string) => {\n  const result: Array<string> = [];\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  do {\n    result.splice(0, result.length);\n    for (let i = 0; i < 9; i++) {\n      result.push(\n        characters.charAt(Math.floor(Math.random() * characters.length))\n      );\n    }\n  } while (data.find((data) => data[keyId] === result.join('')));\n\n  return result.join('');\n};\n\nexport default generateId;\n","// @ts-nocheck\nimport { delay, PutEffect, put, select } from 'redux-saga/effects';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\n\n// services\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { createChannelSuccess, createChannelError } from './actions';\nimport { getAttributeFromChannels } from './selectors';\n\nexport function* createChannel({ payload }): Generator<PutEffect<any>> {\n  const { name, shortcut } = payload;\n  const data = yield select(getAttributeFromChannels('channels'));\n  const channelId = generateId(data, 'channelId');\n\n  try {\n    yield delay(1000);\n    yield getRefDatabase([DatabaseColumns.channels]).set([\n      ...data,\n      { channelId, name, shortcut },\n    ]);\n    yield put(createChannelSuccess());\n  } catch (error) {\n    yield put(createChannelError(error));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createChannel } from './saga';\nimport { ChannelsActionsType } from './actionsType';\n\nexport function* watchChannels(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ChannelsActionsType.createChannel, createChannel),\n  ]);\n}\n","// @ts-nocheck\nimport firebase from 'firebase';\nimport { eventChannel } from 'redux-saga';\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\nimport { TFileUploadPayload } from './types';\n\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\n  const { action, file, path }: TFileUploadPayload = payload;\n\n  try {\n    const uploadTask = firebase.storage().ref(path).put(file);\n    const channel = eventChannel((emit) =>\n      uploadTask.on('state_changed', emit)\n    );\n    let src = '';\n\n    yield takeEvery(channel, () => {});\n    yield uploadTask;\n    yield uploadTask.snapshot.ref\n      .getDownloadURL()\n      .then((response) => (src = response));\n    yield put(action({ result: 'success', src }));\n  } catch (error) {\n    yield put(action({ error, result: 'error' }));\n  }\n}\n","// @ts-nocheck\nexport const REDUCER_KEY = 'common';\n\nexport enum CommonActionsType {\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { uploadImage } from './saga';\nimport { CommonActionsType } from './actionsType';\n\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\n  ]);\n}\n","// @ts-nocheck\n//others\nimport { TReturnablePayload } from '../../../store/common/types';\n\nconst afterUploadImageHandler = ({\n  error,\n  result,\n  src,\n}: TReturnablePayload) => {\n  if (result === 'error') {\n    throw error;\n  }\n  return src;\n};\n\nexport default afterUploadImageHandler;\n","// others\nimport { TFileUploadPayload, TUploadFile } from './types';\n\n// store\nimport { CommonActionsType } from './actionsType';\n\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\n  type: CommonActionsType.uploadFile,\n  payload,\n});\n","// @ts-nocheck\nimport { delay, PutEffect, put, select, take } from 'redux-saga/effects';\nimport { TProfileFormData } from './types';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { StoragePath } from '../../enums';\nimport { TProfile } from './types';\nimport { UPDATE_DELAY_TIME } from '../../constants';\n\n// services\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport {\n  createProfileSuccess,\n  createProfileError,\n  uploadImageFinished,\n  selectProfileError,\n  updateTimeProfileError,\n} from './actions';\nimport { uploadFile } from '../common/actions';\nimport { getAttributeFromProfiles } from './selectors';\n\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\n  const {\n    backToProfileList,\n    name,\n    imageData: { file },\n  }: TProfileFormData = payload;\n  const path = `${StoragePath.profiles}/${name}`;\n  const data = yield select(getAttributeFromProfiles('data'));\n  const profileId = generateId(data, 'profileId');\n\n  try {\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\n\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\n    const src = afterUploadImageHandler(payload);\n\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\n      ...data,\n      {\n        lastUpdateTime: new Date().getTime(),\n        name,\n        online: false,\n        profileId,\n        src,\n      },\n    ]);\n    yield put(createProfileSuccess());\n    yield backToProfileList();\n  } catch (error) {\n    yield put(createProfileError(error));\n  }\n}\n\nexport function* selectProfile({\n  payload: selectedProfileId,\n}): Generator<PutEffect<any>> {\n  const profiles: Array<TProfile> = yield select(\n    getAttributeFromProfiles('data')\n  );\n  const indexProfile = profiles.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'online',\n    ]).set(true);\n  } catch (error) {\n    yield put(selectProfileError(error));\n  }\n}\n\nexport function* updateTimeProfile({\n  payload: selectedProfileId,\n}): Generator<PutEffect<any>> {\n  const data: Array<TProfile> = yield select(getAttributeFromProfiles('data'));\n  const indexProfile = data.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'lastUpdateTime',\n    ]).set(new Date().getTime());\n    yield delay(UPDATE_DELAY_TIME);\n    yield updateTimeProfile({ payload: selectedProfileId });\n  } catch (error) {\n    yield put(updateTimeProfileError(error));\n  }\n}\n","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createProfile, selectProfile, updateTimeProfile } from './saga';\nimport { ProfilesActionsType } from './actionsType';\n\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\n    takeEvery(ProfilesActionsType.selectProfile, selectProfile),\n    takeEvery(ProfilesActionsType.updateTimeProfile, updateTimeProfile),\n  ]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\nimport { watchChannels } from './channels/watch';\nimport { watchCommonStore } from './common/watch';\nimport { watchProfiles } from './profiles/watch';\n\nconst watches = [watchAuth, watchChannels, watchCommonStore, watchProfiles];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './watchers';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}