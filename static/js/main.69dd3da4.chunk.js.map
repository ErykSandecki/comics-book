{"version":3,"sources":["store/profiles/actionsType.ts","assets/images/backgrounds/error.svg","components/ErrorPage/ErrorPage.tsx","assets/images/icons/close.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","components/ProfileForm/services/loadImage.ts","store/profiles/selectors.ts","components/ProfilePickerSection/enums.ts","components/ProfileForm/ProfileForm.tsx","components/CreateProfileForm/CreateProfileForm.tsx","store/profiles/actions.ts","assets/images/icons/plus.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","components/Firebase/enums.ts","store/selectors.ts","components/Page/Page.tsx","store/auth/actions.ts","components/App/App.tsx","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","enums.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/saga.ts","constants.ts","store/auth/watch.ts","store/sagas.ts","store/configureStore.ts","index.tsx"],"names":["ProfilesActionsType","ErrorPage","className","alt","src","Background","NavMenu","visible","setVisible","onClickHandler","onClick","e","stopPropagation","placeholder","CloseIcon","PageHeader","useState","HamburgerMenu","loadImage","event","setSrc","reader","FileReader","selectedFile","target","files","onload","result","readAsDataURL","Mode","profilesSelector","getFp","isPendingSelector","createSelector","profilesLoadedSelector","composeFp","isArrayFp","ProfileForm","clickHandler","name","initialName","initalSrc","submitHandler","title","isPending","useSelector","inputRef","useRef","setName","BackIcon","onSubmit","preventDefault","current","click","ButtonPicture","onChange","ref","type","TextField","value","label","Button","color","disabled","size","variant","CircularProgress","CreateProfileForm","restProps","dispatch","useDispatch","formData","payload","createProfile","ProfilePicker","mode","PlusIcon","AuthActionsType","ProfilePickerList","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","map","_","index","DatabaseColumns","authSelector","errorMessageSelector","profileIdSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","Page","profileId","loginActionError","loginError","App","theme","useMemo","createMuiTheme","palette","useEffect","password","prompt","indexedDB","deleteDatabase","login","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","LocalStorageKeys","databaseErrorHandler","error","console","getData","values","keys","Object","data","i","length","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","database","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","setTimeout","profiles","initialState","loginSuccess","state","seletedProfileId","fetchProfilesError","reducers","auth","action","createRootReducer","combineReducers","localStorage","getItem","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69dd3da4.chunk.js","sourcesContent":["export const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  createProfile = 'createProfile',\n  fetchProfilesSuccess = 'fetchProfilesSuccess',\n  fetchProfilesError = 'fetchProfilesError',\n}\n","export default __webpack_public_path__ + \"static/media/error.aee84ee0.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Background from '../../assets/images/backgrounds/error.svg';\n\n// styles\nimport './error-page-styles.scss';\n\nconst ErrorPage: FunctionComponent = () => (\n  <section className=\"ErrorPage\">\n    <img\n      alt=\"background-error\"\n      className=\"ErrorPage__background\"\n      src={Background}\n    />\n  </section>\n);\n\nexport default ErrorPage;\n","export default __webpack_public_path__ + \"static/media/close.91205169.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport CloseIcon from '../../assets/images/icons/close.svg';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"NavMenu__header\">\n          <input\n            placeholder=\"Search for a channel:\"\n            className=\"NavMenu__input-filter\"\n          />\n          <div className=\"NavMenu__button-close\">\n            <img alt=\"close-icon\" onClick={onClickHandler} src={CloseIcon} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.4f615ee5.svg\";","import { FunctionComponent, useState } from 'react';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__content\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">ME</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">Gentleman App - Meetings</p>\n          <p className=\"PageHeader__users\">2 Brothers-in-law online</p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <img\n        alt=\"hamburger-menu\"\n        className=\"PageHeader__hamburger-menu\"\n        onClick={() => setVisible(true)}\n        src={HamburgerMenu}\n      />\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/back.3f83d067.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.7e1048a6.svg\";","// @ts-nocheck\n// others\n\nconst loadImage = (\n  event: Event,\n  setSrc: (file: string | ArrayBuffer | null) => void\n) => {\n  const reader = new FileReader();\n  const selectedFile = event.target.files;\n\n  reader.onload = (e) => {\n    setSrc(e.target.result);\n  };\n\n  reader.readAsDataURL(selectedFile[0]);\n};\n\nexport default loadImage;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport composeFp from 'lodash/fp/compose';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  profilesSelector,\n  getFp('isPending')\n);\n\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\n","export enum Mode {\n  createProfile = 'createProfile',\n  listProfiles = 'listProfiles',\n}\n","import { FunctionComponent, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// others\nimport BackIcon from '../../assets/images/icons/back.svg';\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\nimport { TProfileFormData } from '../../store/profiles/types';\n\n// services\nimport loadImage from './services/loadImage';\n\n// store\nimport { isPendingSelector } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-form-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  name?: string;\n  src?: string;\n  submitHandler: (formData: TProfileFormData) => void;\n  title: string;\n};\n\nconst ProfileForm: FunctionComponent<TProps> = ({\n  clickHandler,\n  name: initialName = '',\n  src: initalSrc = '',\n  submitHandler,\n  title,\n}) => {\n  const isPending = useSelector(isPendingSelector);\n  const inputRef = useRef(null);\n  const [src, setSrc] = useState(initalSrc);\n  const [name, setName] = useState(initialName);\n\n  const onSubmitHandler = (event: Event) => {\n    event.preventDefault();\n\n    if (name && src) {\n      // @ts-ignore\n      submitHandler({ name, src });\n    }\n  };\n\n  return (\n    <div className=\"ProfileForm__form-wrapper\">\n      <h2 className=\"ProfileForm__title\">\n        <img\n          alt=\"back-icon\"\n          className=\"ProfileForm__icon\"\n          onClick={clickHandler}\n          src={BackIcon}\n        />\n        {title}\n      </h2>\n\n      {/* FORM */}\n      {/* @ts-ignore */}\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\n        {/* AVATAR */}\n        <div\n          className={`ProfileForm__avatar ${\n            src ? 'ProfileForm__avatar--selected' : ''\n          }`}\n        >\n          {src ? (\n            // @ts-ignore\n            <img alt=\"avatar\" className=\"ProfileForm__image\" src={src} />\n          ) : (\n            <p className=\"ProfileForm__empty-picture\">Please select picture:</p>\n          )}\n\n          {/* BUTTON */}\n          <img\n            alt=\"button-icon\"\n            className=\"ProfileForm__button-picture\"\n            // @ts-ignore\n            onClick={() => inputRef.current.click()}\n            src={ButtonPicture}\n          />\n          <input\n            className=\"ProfileForm__input-file\"\n            // @ts-ignore\n            onChange={(event: Event) => loadImage(event, setSrc)}\n            ref={inputRef}\n            type=\"file\"\n          />\n        </div>\n\n        {/* INPUT NAME */}\n        <TextField\n          className=\"ProfileForm__input-name\"\n          onChange={(e) => setName(e.target.value)}\n          label=\"Profile name:\"\n          value={name}\n        />\n\n        <Button\n          className=\"ProfileForm__submit-button\"\n          color=\"primary\"\n          disabled={isPending}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Create Profile\n          {isPending && (\n            <CircularProgress\n              className=\"ProfileForm__spinner\"\n              color=\"primary\"\n              size={20}\n            />\n          )}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","import { FunctionComponent } from 'react';\nimport { useDispatch } from 'react-redux';\n\n// components\nimport ProfileForm from '../ProfileForm/ProfileForm';\n\n// store\nimport { createProfile } from '../../store/profiles/actions';\nimport { TProfileFormData } from '../../store/profiles/types';\n\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (formData: TProfileFormData) =>\n    dispatch(createProfile(formData));\n\n  return (\n    //@ts-ignore\n    <ProfileForm\n      submitHandler={submitHandler}\n      title=\"Create Profile:\"\n      {...restProps}\n    />\n  );\n};\n\nexport default CreateProfileForm;\n","// others\nimport { TProfile } from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TCreateProfile, TFetchProfilesSuccess, TFetchProfilesError, TProfileFormData } from './types';\n\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\n  type: ProfilesActionsType.createProfile,\n  payload\n});\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n","export default __webpack_public_path__ + \"static/media/plus.553def23.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport PlusIcon from '../../assets/images/icons/plus.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n}) => {\n  return (\n    <section className={`ProfilePicker ProfilePicker--${mode}`}>\n      {/* TITLE */}\n      <p className=\"ProfilePicker__title\">Create:</p>\n\n      {/* CIRCLE */}\n      <div className=\"ProfilePicker__button\" onClick={clickHandler}>\n        <img alt=\"icon\" className=\"ProfilePicker__icon-plus\" src={PlusIcon} />\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","export const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = 'login',\n  loginSuccess = 'loginSuccess',\n  loginError = 'loginError',\n}\n","import { FunctionComponent } from 'react';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a profile to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        // LIST\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        // @ts-ignore\n        <CreateProfileForm clickHandler={onClickBackHandler} />\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","export default __webpack_public_path__ + \"static/media/gentleman.154e51ca.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\ntype TProps = {\n  appDataLoaded: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\n  <div className=\"PageLoader\">\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\n    {/* LOGO */}\n    <img alt=\"gentleman-logo\" src={Gentleman} />\n\n    {/* SPINNER */}\n    <div className=\"PageLoader__spinner\">\n      {Array.from(Array(12)).map((_, index) => (\n        <div\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\n          key={index}\n        ></div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n\nexport const profileIdSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('profileId')\n);\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n}\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport {\n  isPendingSelector as isPendingAuthSelector,\n  errorMessageSelector,\n} from './auth/selectors';\nimport { profilesLoadedSelector } from './profiles/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesLoadedSelector, (profilesData) => profilesData);\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { profileIdSelector } from '../../store/auth/selectors';\nimport { appDataLoadedSelector } from '../../store/selectors';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const profileId = useSelector(profileIdSelector);\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n\n  if (!appDataLoaded) {\n    return <PageLoader appDataLoaded={appDataLoaded} />;\n  }\n\n  if (!profileId) {\n    return <ProfilePicker />;\n  }\n\n  return (\n    <div className=\"Page\">\n      <PageHeader />\n    </div>\n  );\n};\n\nexport default Page;\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (payload: string): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n  payload,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","import { useEffect, useMemo, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// components\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport Page from '../Page/Page';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    []\n  );\n\n  useEffect(() => {\n    const password = prompt('Please enter a password:');\n    indexedDB.deleteDatabase('firebaseLocalStorageDb');\n    dispatch(loginAction(password as string));\n    // eslint-disable-next-line\n  }, []);\n\n  if (isPending) {\n    return null;\n  }\n\n  if (errorMessage) {\n    return <ErrorPage />;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Page />;\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","export enum LocalStorageKeys {\n  profileId = 'profileId',\n}\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n\n    if (isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n      }, 5000);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError, TLoginSuccess } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n  profileId: '',\n};\n\nconst loginSuccess = (\n  state: TAuthState,\n  { payload: profileId }: TLoginSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  profileId,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport { TFetchProfilesSuccess, TProfilesState } from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TProfilesState = {\n  data: null,\n  isPending: true,\n  seletedProfileId: '',\n};\n\nconst createProfile = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.createProfile:\n      return createProfile(state, action);\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport profiles from './profiles/reducer';\n\nconst reducers = { auth, profiles };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\nimport { LocalStorageKeys } from '../../enums';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n  const profileId = localStorage.getItem(LocalStorageKeys.profileId) || '';\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess(profileId));\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","export const EMAIL = 'eryk.sandecki@gmail.com';\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\n\nconst watches = [watchAuth];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}