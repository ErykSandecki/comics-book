{"version":3,"sources":["store/profiles/actionsType.ts","assets/images/backgrounds/error.svg","components/ErrorPage/ErrorPage.tsx","assets/images/icons/close.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","store/profiles/selectors.ts","components/ProfilePickerSection/enums.ts","components/ProfileForm/ProfileForm.tsx","store/profiles/actions.ts","components/CreateProfileForm/CreateProfileForm.tsx","assets/images/icons/plus.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","components/Firebase/enums.ts","store/selectors.ts","components/Page/Page.tsx","store/auth/actions.ts","components/App/App.tsx","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","enums.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/saga.ts","constants.ts","store/auth/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","components/Firebase/services/generateProfileId.ts","components/Firebase/services/getRefDatabase.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["ProfilesActionsType","ErrorPage","className","alt","src","Background","NavMenu","visible","setVisible","onClickHandler","onClick","e","stopPropagation","placeholder","CloseIcon","PageHeader","useState","HamburgerMenu","loadImage","event","setImageData","reader","FileReader","files","target","onload","file","result","readAsDataURL","REDUCER_KEY","Mode","profilesSelector","getFp","isPendingSelector","createSelector","profilesLoadedSelector","composeFp","isArrayFp","getAttributeFromProfiles","attribute","ProfileForm","clickHandler","name","initialName","imageData","initialImageData","submitHandler","title","isPending","useSelector","inputRef","useRef","setName","BackIcon","onSubmit","preventDefault","backToProfileList","EmptyImage","current","click","ButtonPicture","onChange","ref","type","TextField","value","label","Button","color","disabled","size","variant","CircularProgress","createProfileError","payload","uploadImageFinished","CreateProfileForm","restProps","dispatch","useDispatch","formData","createProfile","ProfilePicker","mode","PlusIcon","AuthActionsType","ProfilePickerList","profiles","map","profileId","setProfileId","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","_","index","DatabaseColumns","authSelector","errorMessageSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","Page","selectedProfileId","loginActionError","loginError","App","theme","useMemo","createMuiTheme","palette","useEffect","password","prompt","indexedDB","deleteDatabase","login","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","LocalStorageKey","StoragePath","databaseErrorHandler","error","console","getData","values","keys","Object","data","i","length","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","database","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","setTimeout","initialState","loginSuccess","state","seletedProfileId","createProfileSuccess","fetchProfilesError","reducers","auth","action","createRootReducer","combineReducers","localStorage","getItem","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","uploadImage","path","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","generateProfileId","characters","splice","charAt","Math","floor","random","find","join","getRefDatabase","refDataBase","child","select","take","set","online","watchProfiles","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4d903ff.chunk.js","sourcesContent":["// @ts-nocheck\nexport const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  createProfile = `${REDUCER_KEY}/createProfile`,\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  setProfileId = `${REDUCER_KEY}/setProfileId`,\n}\n","export default __webpack_public_path__ + \"static/media/error.aee84ee0.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Background from '../../assets/images/backgrounds/error.svg';\n\n// styles\nimport './error-page-styles.scss';\n\nconst ErrorPage: FunctionComponent = () => (\n  <section className=\"ErrorPage\">\n    <img\n      alt=\"background-error\"\n      className=\"ErrorPage__background\"\n      src={Background}\n    />\n  </section>\n);\n\nexport default ErrorPage;\n","export default __webpack_public_path__ + \"static/media/close.91205169.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport CloseIcon from '../../assets/images/icons/close.svg';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"NavMenu__header\">\n          <input\n            placeholder=\"Search for a channel:\"\n            className=\"NavMenu__input-filter\"\n          />\n          <div className=\"NavMenu__button-close\">\n            <img alt=\"close-icon\" onClick={onClickHandler} src={CloseIcon} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.4f615ee5.svg\";","import { FunctionComponent, useState } from 'react';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__content\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">ME</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">Gentleman App - Meetings</p>\n          <p className=\"PageHeader__users\">2 Brothers-in-law online</p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <img\n        alt=\"hamburger-menu\"\n        className=\"PageHeader__hamburger-menu\"\n        onClick={() => setVisible(true)}\n        src={HamburgerMenu}\n      />\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/back.3f83d067.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.7e1048a6.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.c3e5e19d.svg\";","// @ts-nocheck\n// others\n\nconst loadImage = (\n  event: Event,\n  setImageData: (file: string | ArrayBuffer | null) => void\n) => {\n  const reader = new FileReader();\n  const { files } = event.target;\n\n  reader.onload = (e) => {\n    setImageData({\n      file: files[0],\n      src: e.target.result,\n    });\n  };\n\n  reader.readAsDataURL(files[0]);\n};\n\nexport default loadImage;\n","import getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport composeFp from 'lodash/fp/compose';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TProfile, TProfilesState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(profilesSelector, getFp('isPending'));\n\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\n\nexport const getAttributeFromProfiles = (\n  attribute: string\n): Selector<TMainState, Array<TProfile>> =>\n  createSelector(profilesSelector, getFp(attribute));\n","export enum Mode {\n  createProfile = 'createProfile',\n  listProfiles = 'listProfiles',\n}\n","// @ts-nocheck\nimport { FunctionComponent, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// others\nimport BackIcon from '../../assets/images/icons/back.svg';\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\nimport { TImageData } from '../../types';\nimport { TProfileFormData } from '../../store/profiles/types';\n\n// services\nimport loadImage from './services/loadImage';\n\n// store\nimport { isPendingSelector } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-form-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  name?: string;\n  imageData?: TImageData;\n  submitHandler: (formData: TProfileFormData) => void;\n  title: string;\n};\n\nconst ProfileForm: FunctionComponent<TProps> = ({\n  clickHandler,\n  name: initialName = '',\n  imageData: initialImageData = null,\n  submitHandler,\n  title,\n}) => {\n  const isPending = useSelector(isPendingSelector);\n  const inputRef = useRef(null);\n  const [imageData, setImageData] = useState(initialImageData);\n  const [name, setName] = useState(initialName);\n\n  const onSubmitHandler = (event: Event) => {\n    event.preventDefault();\n\n    if (imageData && name) {\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\n    }\n  };\n\n  return (\n    <div className=\"ProfileForm__form-wrapper\">\n      <h2 className=\"ProfileForm__title\">\n        <img\n          alt=\"back-icon\"\n          className=\"ProfileForm__icon\"\n          onClick={clickHandler}\n          src={BackIcon}\n        />\n        {title}\n      </h2>\n\n      {/* FORM */}\n      {/* @ts-ignore */}\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\n        {/* AVATAR */}\n        <div\n          className={`ProfileForm__avatar ${\n            imageData ? 'ProfileForm__avatar--selected' : ''\n          }`}\n        >\n          {imageData ? (\n            // @ts-ignore\n            <img\n              alt=\"avatar\"\n              className=\"ProfileForm__image\"\n              src={imageData.src}\n            />\n          ) : (\n            <img\n              alt=\"empty\"\n              className=\"ProfileForm__empty-picture\"\n              src={EmptyImage}\n            />\n          )}\n\n          {/* BUTTON */}\n          <img\n            alt=\"button-icon\"\n            className=\"ProfileForm__button-picture\"\n            // @ts-ignore\n            onClick={() => inputRef.current.click()}\n            src={ButtonPicture}\n          />\n          <input\n            className=\"ProfileForm__input-file\"\n            // @ts-ignore\n            onChange={(event: Event) => loadImage(event, setImageData)}\n            ref={inputRef}\n            type=\"file\"\n          />\n        </div>\n\n        {/* INPUT NAME */}\n        <TextField\n          className=\"ProfileForm__input-name\"\n          onChange={(e) => setName(e.target.value)}\n          label=\"Profile name:\"\n          value={name}\n        />\n\n        <Button\n          className=\"ProfileForm__submit-button\"\n          color=\"primary\"\n          disabled={isPending}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Create Profile\n          {isPending && (\n            <CircularProgress\n              className=\"ProfileForm__spinner\"\n              color=\"primary\"\n              size={20}\n            />\n          )}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","// others\nimport { TReturnablePayload } from './../common/types';\nimport {\n  TCreateProfile,\n  TCreateProfileSuccess,\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TFetchProfilesError,\n  TProfile,\n  TProfileFormData,\n  TUploadImageFinished,\n  TSetProfileId,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\n\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\n  type: ProfilesActionsType.createProfile,\n  payload,\n});\n\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\n  type: ProfilesActionsType.createProfileSuccess,\n});\n\nexport const createProfileError = (payload: string): TCreateProfileError => ({\n  type: ProfilesActionsType.createProfileError,\n  payload,\n});\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n\nexport const uploadImageFinished = (\n  payload: TReturnablePayload\n): TUploadImageFinished => ({\n  type: ProfilesActionsType.uploadImageFinished,\n  payload,\n});\n\nexport const setProfileId = (payload: string): TSetProfileId => ({\n  type: ProfilesActionsType.setProfileId,\n  payload,\n});\n","import { FunctionComponent } from 'react';\nimport { useDispatch } from 'react-redux';\n\n// components\nimport ProfileForm from '../ProfileForm/ProfileForm';\n\n// store\nimport { createProfile } from '../../store/profiles/actions';\nimport { TProfileFormData } from '../../store/profiles/types';\n\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (formData: TProfileFormData) =>\n    dispatch(createProfile(formData));\n\n  return (\n    //@ts-ignore\n    <ProfileForm\n      submitHandler={submitHandler}\n      title=\"Create Profile:\"\n      {...restProps}\n    />\n  );\n};\n\nexport default CreateProfileForm;\n","export default __webpack_public_path__ + \"static/media/plus.553def23.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport PlusIcon from '../../assets/images/icons/plus.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n  name?: string;\n  src?: string;\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n  name,\n  src,\n}) => {\n  return (\n    <section className={`ProfilePicker ProfilePicker--${mode}`}>\n      {/* TITLE */}\n      <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\n        {name ? name : 'Create:'}\n      </p>\n\n      {/* CIRCLE */}\n      <div className=\"ProfilePicker__button\" onClick={clickHandler}>\n        <img\n          alt={name ? `${name}-avatar` : 'icon'}\n          className={`ProfilePicker__image ProfilePicker--${mode}__image`}\n          src={src ? src : PlusIcon}\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = `${REDUCER_KEY}/login`,\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\n  loginError = `${REDUCER_KEY}/loginError`,\n}\n","import { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { setProfileId } from '../../store/profiles/actions';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  const dispatch = useDispatch();\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a profile to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\n\n        {/* LIST */}\n        {/* @ts-ignore */}\n        {profiles.map(({ name, profileId, src }) => (\n          <ProfilePicker\n            clickHandler={() => dispatch(setProfileId(profileId))}\n            key={profileId}\n            mode=\"select\"\n            name={name}\n            src={src}\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        // LIST\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        // @ts-ignore\n        <CreateProfileForm clickHandler={onClickBackHandler} />\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","export default __webpack_public_path__ + \"static/media/gentleman.154e51ca.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\ntype TProps = {\n  appDataLoaded: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\n  <div className=\"PageLoader\">\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\n    {/* LOGO */}\n    <img alt=\"gentleman-logo\" src={Gentleman} />\n\n    {/* SPINNER */}\n    <div className=\"PageLoader__spinner\">\n      {Array.from(Array(12)).map((_, index) => (\n        <div\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\n          key={index}\n        ></div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n}\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport {\n  isPendingSelector as isPendingAuthSelector,\n  errorMessageSelector,\n} from './auth/selectors';\nimport { profilesLoadedSelector } from './profiles/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesLoadedSelector, (profilesData) => profilesData);\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { appDataLoadedSelector } from '../../store/selectors';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('seletedProfileId')\n  );\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n\n  if (!appDataLoaded) {\n    return <PageLoader appDataLoaded={appDataLoaded} />;\n  }\n\n  if (!selectedProfileId) {\n    return <ProfilePicker />;\n  }\n\n  return (\n    <div className=\"Page\">\n      <PageHeader />\n    </div>\n  );\n};\n\nexport default Page;\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (payload: string): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n  payload,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","import { useEffect, useMemo, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// components\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport Page from '../Page/Page';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    []\n  );\n\n  useEffect(() => {\n    const password = prompt('Please enter a password:');\n    indexedDB.deleteDatabase('firebaseLocalStorageDb');\n    dispatch(loginAction(password as string));\n    // eslint-disable-next-line\n  }, []);\n\n  if (isPending) {\n    return null;\n  }\n\n  if (errorMessage) {\n    return <ErrorPage />;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Page />;\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","export enum LocalStorageKey {\n  profileId = 'profileId',\n}\n\nexport enum StoragePath {\n  profiles = 'PROFILES',\n}\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n\n    if (isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n      }, 5000);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError, TLoginSuccess } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n  profileId: '',\n};\n\nconst loginSuccess = (\n  state: TAuthState,\n  { payload: profileId }: TLoginSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  profileId,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport {\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TProfilesState,\n  TSetProfileId,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TProfilesState = {\n  data: null,\n  error: '',\n  isPending: true,\n  seletedProfileId: '',\n};\n\nconst createProfile = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createProfileError = (\n  state: TAuthState,\n  { payload: error }: TCreateProfileError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setProfileId = (\n  state: TAuthState,\n  { payload: seletedProfileId }: TSetProfileId\n): TAuthState => ({\n  ...state,\n  seletedProfileId,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.createProfile:\n      return createProfile(state, action);\n    case ProfilesActionsType.createProfileSuccess:\n      return createProfileSuccess(state, action);\n    case ProfilesActionsType.createProfileError:\n      return createProfileError(state, action);\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    case ProfilesActionsType.setProfileId:\n      return setProfileId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport profiles from './profiles/reducer';\n\nconst reducers = { auth, profiles };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\nimport { LocalStorageKey } from '../../enums';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n  const profileId = localStorage.getItem(LocalStorageKey.profileId) || '';\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess(profileId));\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","export const EMAIL = 'eryk.sandecki@gmail.com';\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\nimport firebase from 'firebase';\nimport { eventChannel } from 'redux-saga';\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\nimport { TFileUploadPayload } from './types';\n\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\n  const { action, file, path }: TFileUploadPayload = payload;\n\n  try {\n    const uploadTask = firebase.storage().ref(path).put(file);\n    const channel = eventChannel((emit) =>\n      uploadTask.on('state_changed', emit)\n    );\n    let src = '';\n\n    yield takeEvery(channel, () => {});\n    yield uploadTask;\n    yield uploadTask.snapshot.ref\n      .getDownloadURL()\n      .then((response) => (src = response));\n    yield put(action({ result: 'success', src }));\n  } catch (error) {\n    yield put(action({ error, result: 'error' }));\n  }\n}\n","// @ts-nocheck\nexport const REDUCER_KEY = 'common';\n\nexport enum CommonActionsType {\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { uploadImage } from './saga';\nimport { CommonActionsType } from './actionsType';\n\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\n  ]);\n}\n","// @ts-nocheck\n//others\nimport { TReturnablePayload } from '../../../store/common/types';\n\nconst afterUploadImageHandler = ({\n  error,\n  result,\n  src,\n}: TReturnablePayload) => {\n  if (result === 'error') {\n    throw error;\n  }\n  return src;\n};\n\nexport default afterUploadImageHandler;\n","// others\nimport { TProfile } from './../../../store/profiles/types';\n\nconst generateProfileId = (data: Array<TProfile>) => {\n  const result: Array<string> = [];\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  do {\n    result.splice(0, result.length);\n    for (let i = 0; i < 9; i++) {\n      result.push(\n        characters.charAt(Math.floor(Math.random() * characters.length))\n      );\n    }\n  } while (data.find(({ profileId }) => profileId === result.join('')));\n\n  return result.join('');\n};\n\nexport default generateProfileId;\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// others\nimport { TFileUploadPayload, TUploadFile } from './types';\n\n// store\nimport { CommonActionsType } from './actionsType';\n\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\n  type: CommonActionsType.uploadFile,\n  payload,\n});\n","// @ts-nocheck\nimport { PutEffect, take, put, select } from 'redux-saga/effects';\nimport { TProfileFormData } from './types';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { StoragePath } from '../../enums';\n\n// services\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\nimport generateProfileId from '../../components/Firebase/services/generateProfileId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport {\n  createProfileSuccess,\n  createProfileError,\n  uploadImageFinished,\n} from './actions';\nimport { uploadFile } from '../common/actions';\nimport { getAttributeFromProfiles } from './selectors';\n\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\n  const {\n    backToProfileList,\n    name,\n    imageData: { file },\n  }: TProfileFormData = payload;\n  const path = `${StoragePath.profiles}/${name}`;\n  const data = yield select(getAttributeFromProfiles('data'));\n  const profileId = generateProfileId(data);\n\n  try {\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\n\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\n    const src = afterUploadImageHandler(payload);\n\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\n      ...data,\n      { name, online: false, profileId, src },\n    ]);\n    yield put(createProfileSuccess());\n    yield backToProfileList();\n  } catch (error) {\n    yield put(createProfileError(error));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createProfile } from './saga';\nimport { ProfilesActionsType } from './actionsType';\n\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\n  ]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\nimport { watchCommonStore } from './common/watch';\nimport { watchProfiles } from './profiles/watch';\n\nconst watches = [watchAuth, watchCommonStore, watchProfiles];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './watchers';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}