{"version":3,"sources":["store/auth/actionsType.ts","assets/images/icons/close.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","store/profiles/actionsType.ts","store/profiles/selectors.ts","components/Firebase/enums.ts","store/selectors.ts","components/Page/Page.tsx","components/App/App.tsx","components/Firebase/constants.ts","store/profiles/actions.ts","enums.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/actions.ts","store/auth/saga.ts","constants.ts","store/auth/watch.ts","store/sagas.ts","store/configureStore.ts","index.tsx"],"names":["AuthActionsType","NavMenu","visible","setVisible","onClickHandler","className","onClick","e","stopPropagation","placeholder","alt","src","CloseIcon","PageHeader","useState","HamburgerMenu","PageLoader","appDataLoaded","Gentleman","Array","from","map","_","index","ProfilesActionsType","authSelector","getFp","errorMessageSelector","createSelector","isPendingSelector","profileIdSelector","DatabaseColumns","profilesSelector","isAuthenticatedSelector","isPendingAuthSelector","isPending","errorMessage","appDataLoadedSelector","isPendingProfilesSelector","isPendingProfiles","Page","useSelector","App","useDispatch","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","LocalStorageKeys","databaseErrorHandler","error","console","getData","values","keys","Object","data","i","length","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","ref","database","on","Firebase","isAuthenticated","dispatch","useEffect","initializeApp","profilesActions","payload","type","fetchProfilesSuccess","setTimeout","profiles","initialState","profileId","loginSuccess","state","loginError","seletedProfileId","fetchProfilesError","reducers","auth","action","createRootReducer","combineReducers","loginActionError","login","password","localStorage","getItem","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.340aeb8a.chunk.js","sourcesContent":["export const REDUCER_KEY = 'auth';\r\n\r\nexport enum AuthActionsType {\r\n  login = 'login',\r\n  loginSuccess = 'loginSuccess',\r\n  loginError = 'loginError',\r\n}\r\n","export default __webpack_public_path__ + \"static/media/close.91205169.svg\";","import { FunctionComponent } from 'react';\r\n\r\n// others\r\nimport CloseIcon from '../../assets/images/icons/close.svg';\r\n\r\n// styles\r\nimport './nav-menu-styles.scss';\r\n\r\ntype TProps = {\r\n  visible: boolean;\r\n  setVisible: (flag: boolean) => void;\r\n};\r\n\r\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\r\n  const onClickHandler = (): void => setVisible(false);\r\n\r\n  return (\r\n    <div\r\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div\r\n        className={`NavMenu__background ${\r\n          visible && 'NavMenu__background--visible'\r\n        }`}\r\n      />\r\n      <div\r\n        className={`NavMenu__container ${\r\n          visible && 'NavMenu__container--visible'\r\n        }`}\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        <div className=\"NavMenu__header\">\r\n          <input\r\n            placeholder=\"Search for a channel:\"\r\n            className=\"NavMenu__input-filter\"\r\n          />\r\n          <div className=\"NavMenu__button-close\">\r\n            <img alt=\"close-icon\" onClick={onClickHandler} src={CloseIcon} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenu;\r\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.85ddbb0d.svg\";","import { FunctionComponent, useState } from 'react';\r\n\r\n// components\r\nimport NavMenu from '../NavMenu/NavMenu';\r\n\r\n// others\r\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\r\n\r\n// styles\r\nimport './page-header-styles.scss';\r\n\r\nconst PageHeader: FunctionComponent<{}> = () => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  return (\r\n    <header className=\"PageHeader\">\r\n      {/* LEFT COLUMN */}\r\n      <div className=\"PageHeader__content\">\r\n        {/* PICKER */}\r\n        <div className=\"PageHeader__channel-picker\">ME</div>\r\n\r\n        {/* DETAILS */}\r\n        <div>\r\n          <p className=\"PageHeader__title\">Gentleman App - Meetings</p>\r\n          <p className=\"PageHeader__users\">2 Brothers-in-law online</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* RIGHT COLUMN */}\r\n      <img\r\n        alt=\"hamburger-menu\"\r\n        className=\"PageHeader__hamburger-menu\"\r\n        onClick={() => setVisible(true)}\r\n        src={HamburgerMenu}\r\n      />\r\n\r\n      {/* Nav Left Menu */}\r\n      <NavMenu visible={visible} setVisible={setVisible} />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default PageHeader;\r\n","export default __webpack_public_path__ + \"static/media/gentleman.ff3326dc.svg\";","import { FunctionComponent } from 'react';\r\n\r\n// others\r\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\r\n\r\n// styles\r\nimport './page-loader-styles.scss';\r\n\r\ntype TProps = {\r\n  appDataLoaded: boolean;\r\n};\r\n\r\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\r\n  <div className=\"PageLoader\">\r\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\r\n    {/* LOGO */}\r\n    <img alt=\"gentleman-logo\" src={Gentleman} />\r\n\r\n    {/* SPINNER */}\r\n    <div className=\"PageLoader__spinner\">\r\n      {Array.from(Array(12)).map((_, index) => (\r\n        <div\r\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\r\n          key={index}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PageLoader;\r\n","// @ts-nocheck\r\nimport getFp from 'lodash/fp/get';\r\nimport { createSelector, Selector } from 'reselect';\r\n\r\n// store\r\nimport { REDUCER_KEY } from './actionsType';\r\nimport { TMainState } from '../../types';\r\nimport { TLocationState } from './types';\r\n\r\nexport const authSelector: Selector<TMainState, TLocationState> =\r\n  getFp(REDUCER_KEY);\r\n\r\nexport const errorMessageSelector: Selector<TMainState, boolean> =\r\n  createSelector(authSelector, getFp('error'));\r\n\r\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\r\n  authSelector,\r\n  getFp('isPending')\r\n);\r\n\r\nexport const profileIdSelector: Selector<TMainState, boolean> = createSelector(\r\n  authSelector,\r\n  getFp('profileId')\r\n);\r\n","export const REDUCER_KEY = 'profiles';\r\n\r\nexport enum ProfilesActionsType {\r\n  fetchProfilesSuccess = 'fetchProfilesSuccess',\r\n  fetchProfilesError = 'fetchProfilesError',\r\n}\r\n","// @ts-nocheck\r\nimport getFp from 'lodash/fp/get';\r\nimport { createSelector, Selector } from 'reselect';\r\n\r\n// store\r\nimport { REDUCER_KEY } from './actionsType';\r\nimport { TMainState } from '../../types';\r\nimport { TLocationState } from './types';\r\n\r\nexport const profilesSelector: Selector<TMainState, TLocationState> =\r\n  getFp(REDUCER_KEY);\r\n\r\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\r\n  profilesSelector,\r\n  getFp('isPending')\r\n);\r\n","export enum DatabaseColumns {\r\n  profiles = 'profiles',\r\n}\r\n","import { createSelector, Selector } from 'reselect';\r\n\r\n// others\r\nimport { TMainState } from '../types';\r\n\r\n// store\r\nimport {\r\n  isPendingSelector as isPendingAuthSelector,\r\n  errorMessageSelector,\r\n} from './auth/selectors';\r\nimport { isPendingSelector as isPendingProfilesSelector } from './profiles/selectors';\r\n\r\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\r\n  createSelector(\r\n    isPendingAuthSelector,\r\n    errorMessageSelector,\r\n    (isPending, errorMessage) => !isPending && !errorMessage\r\n  );\r\n\r\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\r\n  createSelector(\r\n    isPendingProfilesSelector,\r\n    (isPendingProfiles) => !isPendingProfiles\r\n  );\r\n","import { FunctionComponent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// components\r\nimport PageHeader from '../PageHeader/PageHeader';\r\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\r\nimport PageLoader from '../PageLoader/PageLoader';\r\n\r\n// store\r\nimport { profileIdSelector } from '../../store/auth/selectors';\r\nimport { appDataLoadedSelector } from '../../store/selectors';\r\n\r\n// styles\r\nimport './page-styles.scss';\r\n\r\nconst Page: FunctionComponent<{}> = () => {\r\n  const profileId = useSelector(profileIdSelector);\r\n  const appDataLoaded = useSelector(appDataLoadedSelector);\r\n\r\n  if (!appDataLoaded) {\r\n    return <PageLoader appDataLoaded={appDataLoaded} />;\r\n  }\r\n\r\n  // if (!profileId) {\r\n  //   return <ProfilePicker />;\r\n  // }\r\n\r\n  return (\r\n    <div className=\"Page\">\r\n      <PageHeader />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { useEffect, FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// components\r\nimport ErrorContainer from '../ErrorContainer/ErrorContainer';\r\nimport Page from '../Page/Page';\r\n\r\n// store\r\nimport {\r\n  errorMessageSelector,\r\n  isPendingSelector,\r\n} from '../../store/auth/selectors';\r\nimport { loginAction } from '../../store/auth/actions';\r\n\r\nconst App: FunctionComponent<{}> = () => {\r\n  const isPending = useSelector(isPendingSelector);\r\n  const dispatch = useDispatch();\r\n  const errorMessage = useSelector(errorMessageSelector);\r\n\r\n  // useEffect(() => {\r\n  //   const password = prompt('Please enter a password:');\r\n  //   indexedDB.deleteDatabase('firebaseLocalStorageDb');\r\n  //   dispatch(loginAction(password as string));\r\n  //   // eslint-disable-next-line\r\n  // }, []);\r\n\r\n  // if (isPending) {\r\n  //   return null;\r\n  // }\r\n\r\n  // if (errorMessage) {\r\n  //   return <ErrorContainer />;\r\n  // }\r\n\r\n  return <Page />;\r\n};\r\n\r\nexport default App;\r\n","export const config = {\r\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\r\n  authDomain: 'comics-book.firebaseapp.com',\r\n  projectId: 'comics-book',\r\n  storageBucket: 'comics-book.appspot.com',\r\n  messagingSenderId: '426496482303',\r\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\r\n};\r\n","// others\r\nimport { TProfile } from './types';\r\n\r\n// store\r\nimport { ProfilesActionsType } from './actionsType';\r\nimport { TFetchProfilesSuccess, TFetchProfilesError } from './types';\r\n\r\nexport const fetchProfilesSuccess = (\r\n  payload: Array<TProfile>\r\n): TFetchProfilesSuccess => ({\r\n  type: ProfilesActionsType.fetchProfilesSuccess,\r\n  payload,\r\n});\r\n\r\nexport const fetchProfilesError = (): TFetchProfilesError => ({\r\n  type: ProfilesActionsType.fetchProfilesError,\r\n});\r\n","export enum LocalStorageKeys {\r\n  profileId = 'profileId',\r\n}\r\n","const databaseErrorHandler = (error: string): void => {\r\n  // eslint-disable-next-line\r\n  console.error(error);\r\n};\r\n\r\nexport default databaseErrorHandler;\r\n","// @ts-nocheck\r\nconst getData = (values: any): void => {\r\n  const keys = Object.keys(values);\r\n  const data = [];\r\n\r\n  for (let i = 0; i < keys.length; i++) {\r\n    data.push(values[keys[i]]);\r\n  }\r\n  return data;\r\n};\r\n\r\nconst databaseSuccessHandler = (\r\n  response: any,\r\n  actions: (data: any) => void = null\r\n): void => {\r\n  const values = response.val();\r\n  actions(getData(values || {}));\r\n};\r\n\r\nexport default databaseSuccessHandler;\r\n","// others\r\nimport { DatabaseColumns } from '../enums';\r\n\r\n// services\r\nimport databaseErrorHandler from './databaseErrorHandler';\r\nimport databaseSuccessHandler from './databaseSuccessHandler';\r\n\r\nconst databaseHandler = (\r\n  firebase: any,\r\n  actions: (data: any) => void,\r\n  ref: DatabaseColumns\r\n) => {\r\n  firebase\r\n    .database()\r\n    .ref(ref)\r\n    .on(\r\n      'value',\r\n      (response: any) => databaseSuccessHandler(response, actions),\r\n      databaseErrorHandler\r\n    );\r\n};\r\n\r\nexport default databaseHandler;\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport firebase from 'firebase';\r\n\r\n// others\r\nimport { config } from './constants';\r\nimport { DatabaseColumns } from './enums';\r\nimport { TProfile } from '../../store/profiles/types';\r\n\r\n// store\r\nimport { isAuthenticatedSelector } from '../../store/selectors';\r\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\r\n\r\n// services\r\nimport databaseHandler from './services/databaseHandler';\r\n\r\nconst Firebase: FunctionComponent<{}> = () => {\r\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    firebase.initializeApp(config);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const profilesActions = (payload: Array<TProfile>): void => {\r\n      dispatch(fetchProfilesSuccess(payload));\r\n    };\r\n\r\n    if (!isAuthenticated) {\r\n      setTimeout(() => {\r\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\r\n      }, 1);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [isAuthenticated]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default Firebase;\r\n","// @ts-nocheck\r\n// others\r\nimport { TLoginError, TLoginSuccess } from './types';\r\n\r\n// store\r\nimport { AuthActionsType } from './actionsType';\r\nimport { TAnyAction } from '../../types';\r\nimport { TAuthState } from './types';\r\n\r\nconst initialState: TAuthState = {\r\n  error: '',\r\n  isPending: true,\r\n  profileId: '',\r\n};\r\n\r\nconst loginSuccess = (\r\n  state: TAuthState,\r\n  { payload: profileId }: TLoginSuccess\r\n): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n  profileId,\r\n});\r\n\r\nconst loginError = (\r\n  state: TAuthState,\r\n  { payload: error }: TLoginError\r\n): TAuthState => ({\r\n  ...state,\r\n  error,\r\n  isPending: false,\r\n});\r\n\r\nconst auth = (\r\n  state: TAuthState = initialState,\r\n  action: TAnyAction\r\n): TAuthState => {\r\n  switch (action.type) {\r\n    case AuthActionsType.loginSuccess:\r\n      return loginSuccess(state, action);\r\n    case AuthActionsType.loginError:\r\n      return loginError(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default auth;\r\n","// @ts-nocheck\r\n// others\r\nimport { TFetchProfilesSuccess } from './types';\r\n\r\n// store\r\nimport { ProfilesActionsType } from './actionsType';\r\nimport { TAnyAction } from '../../types';\r\nimport { TProfilesState } from './types';\r\n\r\nconst initialState: TProfilesState = {\r\n  data: [],\r\n  isPending: true,\r\n  seletedProfileId: '',\r\n};\r\n\r\nconst fetchProfilesSuccess = (\r\n  state: TAuthState,\r\n  { payload: data }: TFetchProfilesSuccess\r\n): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n  data,\r\n});\r\n\r\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n});\r\n\r\nconst profiles = (\r\n  state: TAuthState = initialState,\r\n  action: TAnyAction\r\n): TAuthState => {\r\n  switch (action.type) {\r\n    case ProfilesActionsType.fetchProfilesSuccess:\r\n      return fetchProfilesSuccess(state, action);\r\n    case ProfilesActionsType.fetchProfilesError:\r\n      return fetchProfilesError(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default profiles;\r\n","// @ts-nocheck\r\nimport { combineReducers } from 'redux';\r\n\r\n// store\r\nimport auth from './auth/reducer';\r\nimport profiles from './profiles/reducer';\r\n\r\nconst reducers = { auth, profiles };\r\n\r\nconst createRootReducer = () =>\r\n  combineReducers({\r\n    ...reducers,\r\n  });\r\n\r\nexport default createRootReducer;\r\n","// store\r\nimport { AuthActionsType } from './actionsType';\r\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\r\n\r\nexport const loginAction = (payload: string): TLogin => ({\r\n  type: AuthActionsType.login,\r\n  payload,\r\n});\r\n\r\nexport const loginActionSuccess = (payload: string): TLoginSuccess => ({\r\n  type: AuthActionsType.loginSuccess,\r\n  payload,\r\n});\r\n\r\nexport const loginActionError = (payload: string): TLoginError => ({\r\n  type: AuthActionsType.loginError,\r\n  payload,\r\n});\r\n","// @ts-nocheck\r\nimport { PutEffect, put } from 'redux-saga/effects';\r\nimport firebase from 'firebase';\r\n\r\n// others\r\nimport { EMAIL } from '../../constants';\r\nimport { LocalStorageKeys } from '../../enums';\r\n\r\n// store\r\nimport { loginActionError, loginActionSuccess } from './actions';\r\n\r\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\r\n  const password = data.payload;\r\n  const profileId = localStorage.getItem(LocalStorageKeys.profileId) || '';\r\n\r\n  try {\r\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\r\n    yield put(loginActionSuccess(profileId));\r\n  } catch (error) {\r\n    const { code } = error;\r\n    yield put(loginActionError(code));\r\n  }\r\n}\r\n","export const EMAIL = 'eryk.sandecki@gmail.com';\r\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\r\n\r\n// store\r\nimport { login } from './saga';\r\nimport { AuthActionsType } from './actionsType';\r\n\r\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\r\n  yield all([\r\n    // @ts-ignore\r\n    takeEvery(AuthActionsType.login, login),\r\n  ]);\r\n}\r\n","// @ts-nocheck\r\nimport { SagaMiddleware } from 'redux-saga';\r\n\r\n// store\r\nimport { watchAuth } from './auth/watch';\r\n\r\nconst watches = [watchAuth];\r\n\r\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\r\n  for (const watch of watches) sagaMiddleware.run(watch);\r\n};\r\n\r\nexport default sagaMiddlewareRuns;\r\n","// @ts-nocheck\r\nimport {\r\n  Action,\r\n  applyMiddleware,\r\n  CombinedState,\r\n  createStore,\r\n  Store,\r\n} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport thunk from 'redux-thunk';\r\n\r\n// store\r\nimport reducers from './reducers';\r\nimport sagaMiddlewareRuns from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst configureStore = (): Store<CombinedState<any>, Action> => {\r\n  const store = createStore(\r\n    reducers(),\r\n    {},\r\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\r\n  );\r\n  sagaMiddlewareRuns(sagaMiddleware);\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n// components\r\nimport App from './components/App/App';\r\nimport Firebase from './components/Firebase/Firebase';\r\n\r\n// store\r\nimport configureStore from './store/configureStore';\r\n\r\n// styles\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={configureStore()}>\r\n      <Firebase />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}