{"version":3,"sources":["store/auth/actionsType.ts","assets/images/backgrounds/error.svg","components/ErrorContainer/ErrorContainer.tsx","store/auth/selectors.ts","components/App/App.tsx","store/auth/actions.ts","components/Firebase/constants.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/reducers.ts","store/auth/saga.ts","constants.ts","store/auth/watch.ts","store/sagas.ts","store/configureStore.ts","index.tsx"],"names":["AuthActionsType","ErrorContainer","className","alt","src","Background","authSelector","getFp","errorMessageSelector","createSelector","isPendingSelector","App","isPending","useSelector","dispatch","useDispatch","errorMessage","useEffect","payload","password","prompt","type","login","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Firebase","firebase","initializeApp","initialState","error","loginSuccess","state","loginError","reducers","auth","action","createRootReducer","combineReducers","data","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAEYA,E,yCCFG,MAA0B,kC,iBCoB1BC,EAZ+B,WAC5C,OACE,qBAAKC,UAAU,QAAf,SACE,qBACEC,IAAI,mBACJD,UAAU,oBACVE,IAAKC,O,mCFZDL,K,cAAAA,E,4BAAAA,E,yBAAAA,M,KGOL,IAAMM,EACXC,IHVyB,QGYZC,EAAsDC,YACjEH,EACAC,IAAM,UAGGG,EAAmDD,YAC9DH,EACAC,IAAM,cCgBOI,EAtBoB,WACjC,IAAMC,EAAYC,YAAYH,GACxBI,EAAWC,cACXC,EAAeH,YAAYL,GAQjC,OANAS,qBAAU,WACR,ICfwBC,EDelBC,EAAWC,OAAO,4BACxBN,GChBwBI,EDgBHC,EChBgC,CACvDE,KAAMrB,EAAgBsB,MACtBJ,eDgBG,IAECN,EACK,KAGLI,EACK,cAAC,EAAD,IAGF,qBAAKd,UAAU,S,QEhCXqB,EAAS,CACpBC,OAAQ,0CACRC,WAAY,8BACZC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,6CCUMC,EATyB,WAMtC,OALAb,qBAAU,WACRc,IAASC,cAAcT,KAEtB,IAEI,M,2CCJHU,EAA2B,CAC/BC,MAAO,GACPtB,WAAW,GAGPuB,EAAe,SAACC,GAAD,mBAAC,eACjBA,GADgB,IAEnBxB,WAAW,KAGPyB,EAAa,SACjBD,EADiB,OAENF,EAFM,EAEfhB,QAFe,mBAAC,eAIfkB,GAJc,IAKjBF,QACAtB,WAAW,KCnBP0B,EAAW,CAAEC,KDsBN,WAGK,IAFhBH,EAEe,uDAFKH,EACpBO,EACe,uCACf,OAAQA,EAAOnB,MACb,KAAKrB,EAAgBmC,aACnB,OAAOA,EAAaC,GACtB,KAAKpC,EAAgBqC,WACnB,OAAOA,EAAWD,EAAOI,GAC3B,QACE,OAAOJ,KCzBEK,EALW,kBACxBC,0BAAgB,eACXJ,K,6CCAUhB,GAAV,SAAUA,EAAMqB,GAAhB,yEAMH,OAHIxB,EAAWwB,EAAKzB,QAHjB,kBAMGa,IAASQ,OAAOK,2BChBL,0BDgBuCzB,GANrD,OAOH,OAPG,SAOG0B,YLR8C,CACtDxB,KAAMrB,EAAgBmC,eKAjB,8BAUH,OAVG,yBASKW,EATL,KASKA,KATL,UAUGD,aLPuB3B,EKOF4B,ELPoC,CACjEzB,KAAMrB,EAAgBqC,WACtBnB,aKLK,kCLGyB,IAACA,IKH1B,gB,eEJU6B,GAAV,SAAUA,IAAV,iEAGL,OAHK,SAGCC,YAAI,CAERC,YAAUjD,EAAgBsB,MAAOA,KAL9B,uCCAP,IAAM4B,EAAU,CAACH,GAMFI,EAJY,SAACC,GAA0C,IAAD,gBAC/CF,GAD+C,IACnE,gCAAWG,EAAX,QAA6BD,EAAeE,IAAID,IADmB,gCCQ/DD,EAAiBG,cAaRC,EAXQ,WACrB,IAAMC,EAAQC,sBACZpB,IACA,GACAqB,8BAAoBC,kBAAe,WAAf,EAAmB,CAACC,KAApB,QAA4BT,OAIlD,OAFAD,EAAmBC,GAEZK,G,OCZTK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUP,MAAOD,IAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SAGJS,SAASC,eAAe,W","file":"static/js/main.9b138bfe.chunk.js","sourcesContent":["export const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = 'login',\n  loginSuccess = 'loginSuccess',\n  loginError = 'loginError',\n}\n","export default __webpack_public_path__ + \"static/media/error.aee84ee0.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Background from '../../assets/images/backgrounds/error.svg';\n\n// styles\nimport './error-container.scss';\n\nconst ErrorContainer: FunctionComponent<{}> = () => {\n  return (\n    <div className=\"Error\">\n      <img\n        alt=\"background-error\"\n        className=\"Error__background\"\n        src={Background}\n      />\n    </div>\n  );\n};\n\nexport default ErrorContainer;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\n  export const errorMessageSelector: Selector<TMainState, boolean> = createSelector(\n    authSelector,\n    getFp('error')\n  );\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n","import { useEffect, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ErrorContainer from '../ErrorContainer/ErrorContainer';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  useEffect(() => {\n    const password = prompt('Please enter a password:');\n    dispatch(loginAction(password as string));\n    // eslint-disable-next-line\n  }, []);\n\n  if (isPending) {\n    return null;\n  }\n\n  if (errorMessage) {\n    return <ErrorContainer />;\n  }\n\n  return <div className=\"App\"></div>;\n};\n\nexport default App;\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n};\n\nconst loginSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\n\nconst reducers = { auth };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: {\n  payload: string;\n}): Generator<PutEffect<any>> {\n  const password = data.payload;\n  \n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess());\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code))\n  }\n}\n","export const EMAIL = 'eryk.sandecki@gmail.com'","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<\n  AllEffect<ForkEffect<any>>\n> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\n\nconst watches = [watchAuth];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}