{"version":3,"sources":["components/ProfilePickerSection/enums.ts","assets/images/backgrounds/error.svg","components/ErrorContainer/ErrorContainer.tsx","assets/images/icons/close.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/plus.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","store/profiles/actionsType.ts","store/profiles/selectors.ts","components/Firebase/enums.ts","store/selectors.ts","components/Page/Page.tsx","store/auth/actions.ts","components/App/App.tsx","components/Firebase/constants.ts","store/profiles/actions.ts","enums.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/saga.ts","constants.ts","store/auth/watch.ts","store/sagas.ts","store/configureStore.ts","index.tsx"],"names":["Mode","ErrorContainer","className","alt","src","Background","NavMenu","visible","setVisible","onClickHandler","onClick","e","stopPropagation","placeholder","CloseIcon","PageHeader","useState","HamburgerMenu","ProfilePicker","clickHandler","mode","PlusIcon","AuthActionsType","ProfilePickerList","addProfile","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","map","_","index","ProfilesActionsType","authSelector","getFp","errorMessageSelector","createSelector","isPendingSelector","profileIdSelector","DatabaseColumns","profilesSelector","isAuthenticatedSelector","isPendingAuthSelector","isPending","errorMessage","appDataLoadedSelector","isPendingProfilesSelector","isPendingProfiles","Page","profileId","useSelector","loginActionError","payload","type","loginError","App","dispatch","useDispatch","useEffect","password","prompt","indexedDB","deleteDatabase","login","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","LocalStorageKeys","databaseErrorHandler","error","console","getData","values","keys","Object","data","i","length","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","ref","database","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","setTimeout","profiles","initialState","loginSuccess","state","seletedProfileId","fetchProfilesError","reducers","auth","action","createRootReducer","combineReducers","localStorage","getItem","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAAYA,E,yCCAG,MAA0B,kC,gBCoB1BC,EAZ+B,WAC5C,OACE,yBAASC,UAAU,QAAnB,SACE,qBACEC,IAAI,mBACJD,UAAU,oBACVE,IAAKC,O,QCdE,MAA0B,kCC8C1BC,G,OAjC4B,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC/CC,EAAiB,kBAAYD,GAAW,IAE9C,OACE,sBACEN,UAAS,kBAAaK,GAAW,oBACjCG,QAASD,EAFX,UAIE,qBACEP,UAAS,8BACPK,GAAW,kCAGf,qBACEL,UAAS,6BACPK,GAAW,+BAEbG,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAJpB,SAME,sBAAKV,UAAU,kBAAf,UACE,uBACEW,YAAY,wBACZX,UAAU,0BAEZ,qBAAKA,UAAU,wBAAf,SACE,qBAAKC,IAAI,aAAaO,QAASD,EAAgBL,IAAKU,gBCtCjD,MAA0B,2CC0C1BC,G,OA/B2B,WACxC,MAA8BC,oBAAS,GAAvC,mBAAOT,EAAP,KAAgBC,EAAhB,KAEA,OACE,yBAAQN,UAAU,aAAlB,UAEE,sBAAKA,UAAU,sBAAf,UAEE,qBAAKA,UAAU,6BAAf,gBAGA,gCACE,mBAAGA,UAAU,oBAAb,sCACA,mBAAGA,UAAU,oBAAb,4CAKJ,qBACEC,IAAI,iBACJD,UAAU,6BACVQ,QAAS,kBAAMF,GAAW,IAC1BJ,IAAKa,IAIP,cAAC,EAAD,CAASV,QAASA,EAASC,WAAYA,SCrC9B,MAA0B,iCCiC1BU,G,OApBkC,SAAC,GAG3C,IAFLC,EAEI,EAFJA,aAEI,IADJC,YACI,MADG,MACH,EACJ,OACE,0BACElB,UAAS,uCAAkCkB,GAC3CV,QAASS,EAFX,UAKE,mBAAGjB,UAAU,uBAAb,iBAGA,qBAAKA,UAAU,wBAAf,SACE,qBAAKC,IAAI,OAAOD,UAAU,2BAA2BE,IAAKiB,Y,SR3BtDrB,K,yBAAAA,E,8BAAAA,M,gBSEAsB,EC8BGC,EAjBsC,SAAC,GAAsB,IAApBJ,EAAmB,EAAnBA,aACtD,OACE,0BAASjB,UAAU,oBAAnB,UAEE,oBAAIA,UAAU,2BAAd,4BACA,mBAAGA,UAAU,iCAAb,6EAKA,qBAAKA,UAAU,6BAAf,SACE,cAAC,EAAD,CAAeiB,aAAc,kBAAMA,EAAanB,EAAKwB,qBCD9CC,G,OAdqC,WAClD,MAAwBT,mBAAShB,EAAK0B,cAAtC,mBAAON,EAAP,KAAaO,EAAb,KAEA,OACE,yBAASzB,UAAU,uBAAnB,SACGkB,IAASpB,EAAK0B,aACb,cAAC,EAAD,CAAmBP,aAAc,SAACC,GAAD,OAAgBO,EAAQP,MAEzD,6CCnBO,MAA0B,sCC8B1BQ,G,OAlB+B,SAAC,GAAD,EAAGC,cAAH,OAC5C,sBAAK3B,UAAU,aAAf,UACE,oBAAIA,UAAU,oBAAd,+BAEA,qBAAKC,IAAI,iBAAiBC,IAAK0B,IAG/B,qBAAK5B,UAAU,sBAAf,SACG6B,MAAMC,KAAKD,MAAM,KAAKE,KAAI,SAACC,EAAGC,GAAJ,OACzB,qBACEjC,UAAS,iDAA4CiC,EAAQ,IACxDA,a,mCJrBHb,K,cAAAA,E,4BAAAA,E,yBAAAA,M,KKOL,ICPKc,EDOCC,EACXC,ILVyB,QKYdC,EACXC,YAAeH,EAAcC,IAAM,UAExBG,EAAmDD,YAC9DH,EACAC,IAAM,cAGKI,EAAmDF,YAC9DH,EACAC,IAAM,e,SCpBIF,K,4CAAAA,E,yCAAAA,M,KCOL,ICTKO,EDSCC,EACXN,IDVyB,YCYdG,EAAmDD,YAC9DI,EACAN,IAAM,cEFKO,EACXL,YACEM,EACAP,GACA,SAACQ,EAAWC,GAAZ,OAA8BD,IAAcC,KAGnCC,EACXT,YACEU,GACA,SAACC,GAAD,OAAwBA,KCYbC,G,OAnBqB,WAClC,IAAMC,EAAYC,YAAYZ,GACxBb,EAAgByB,YAAYL,GAElC,OAAKpB,EAIAwB,EAKH,qBAAKnD,UAAU,OAAf,SACE,cAAC,EAAD,MALK,cAAC,EAAD,IAJA,cAAC,EAAD,CAAY2B,cAAeA,MCNzB0B,EAAmB,SAACC,GAAD,MAAmC,CACjEC,KAAMnC,EAAgBoC,WACtBF,YCqBaG,EAvBoB,WACjC,IAAMZ,EAAYO,YAAYb,GACxBmB,EAAWC,cACXb,EAAeM,YAAYf,GASjC,OAPAuB,qBAAU,WACR,IDhBwBN,ECgBlBO,EAAWC,OAAO,4BACxBC,UAAUC,eAAe,0BACzBN,GDlBwBJ,ECkBHO,EDlBgC,CACvDN,KAAMnC,EAAgB6C,MACtBX,eCkBG,IAECT,EACK,KAGLC,EACK,cAAC,EAAD,IAGF,cAAC,EAAD,K,QClCIoB,EAAS,CACpBC,OAAQ,0CACRC,WAAY,8BACZC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,8C,SLNG/B,K,qBAAAA,M,KMOL,ICPKgC,ECKGC,EALc,SAACC,GAE5BC,QAAQD,MAAMA,ICDVE,EAAU,SAACC,GAIf,IAHA,IAAMC,EAAOC,OAAOD,KAAKD,GACnBG,EAAO,GAEJC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC/BD,EAAKG,KAAKN,EAAOC,EAAKG,KAExB,OAAOD,GAWMI,EARgB,SAC7BC,GAEU,IADVC,EACS,uDADsB,KAEzBT,EAASQ,EAASE,MACxBD,EAAQV,EAAQC,GAAU,MCMbW,EAfS,SACtBC,EACAH,EACAI,GAEAD,EACGE,WACAD,IAAIA,GACJE,GACC,SACA,SAACP,GAAD,OAAmBD,EAAuBC,EAAUC,KACpDb,ICwBSoB,EAzByB,WACtC,IAAMC,EAAkB3C,YAAYT,GAC9Be,EAAWC,cAoBjB,OAlBAC,qBAAU,WACR8B,IAASM,cAAc9B,KAEtB,IAEHN,qBAAU,WACR,IAAMqC,EAAkB,SAAC3C,GACvBI,ELrB8B,SAClCJ,GADkC,MAEP,CAC3BC,KAAMrB,EAAoBgE,qBAC1B5C,WKiBa4C,CAAqB5C,KAG5ByC,GACFI,YAAW,WACTV,EAAgBC,IAAUO,EAAiBxD,EAAgB2D,YAC1D,OAGJ,CAACL,IAEG,M,2CC9BHM,EAA2B,CAC/B1B,MAAO,GACP9B,WAAW,EACXM,UAAW,IAGPmD,GAAe,SACnBC,EADmB,OAERpD,EAFQ,EAEjBG,QAFiB,mBAAC,eAIjBiD,GAJgB,IAKnB1D,WAAW,EACXM,eAGIK,GAAa,SACjB+C,EADiB,OAEN5B,EAFM,EAEfrB,QAFe,mBAAC,eAIfiD,GAJc,IAKjB5B,QACA9B,WAAW,KCrBPwD,GAA+B,CACnCpB,KAAM,GACNpC,WAAW,EACX2D,iBAAkB,IAGdN,GAAuB,SAC3BK,EAD2B,OAEhBtB,EAFgB,EAEzB3B,QAFyB,mBAAC,eAIzBiD,GAJwB,IAK3B1D,WAAW,EACXoC,UAGIwB,GAAqB,SAACF,GAAD,mBAAC,eACvBA,GADsB,IAEzB1D,WAAW,KCnBP6D,GAAW,CAAEC,KF0BN,WAGK,IAFhBJ,EAEe,uDAFKF,EACpBO,EACe,uCACf,OAAQA,EAAOrD,MACb,KAAKnC,EAAgBkF,aACnB,OAAOA,GAAaC,EAAOK,GAC7B,KAAKxF,EAAgBoC,WACnB,OAAOA,GAAW+C,EAAOK,GAC3B,QACE,OAAOL,IEpCYH,SDsBR,WAGC,IAFhBG,EAEe,uDAFKF,GACpBO,EACe,uCACf,OAAQA,EAAOrD,MACb,KAAKrB,EAAoBgE,qBACvB,OAAOA,GAAqBK,EAAOK,GACrC,KAAK1E,EAAoBuE,mBACvB,OAAOA,GAAmBF,GAC5B,QACE,OAAOA,KCzBEM,GALW,kBACxBC,0BAAgB,eACXJ,M,iDPXKjC,K,uBAAAA,M,sBQWKR,IAAV,SAAUA,GAAMgB,GAAhB,4EAKH,OAJIpB,EAAWoB,EAAK3B,QAChBH,EAAY4D,aAAaC,QAAQvC,EAAiBtB,YAAc,GAFjE,kBAKGuC,IAASiB,OAAOM,2BChBL,0BDgBuCpD,GALrD,OAMH,OANG,SAMGqD,cZRyB5D,EYQFH,EZRsC,CACrEI,KAAMnC,EAAgBkF,aACtBhD,aYAK,8BASH,OATG,yBAQK6D,EARL,KAQKA,KARL,UASGD,aAAI7D,EAAiB8D,IATxB,kCZF2B,IAAC7D,IYE5B,iB,iBELU8D,IAAV,SAAUA,KAAV,kEACL,OADK,SACCC,aAAI,CAERC,aAAUlG,EAAgB6C,MAAOA,MAH9B,wCCAP,IAAMsD,GAAU,CAACH,IAMFI,GAJY,SAACC,GAA0C,IAAD,iBAC/CF,IAD+C,IACnE,gCAAWG,EAAX,QAA6BD,EAAeE,IAAID,IADmB,gCCQ/DD,GAAiBG,cAaRC,GAXQ,WACrB,IAAMC,EAAQC,sBACZrB,KACA,GACAsB,8BAAoBC,kBAAe,WAAf,EAAmB,CAACC,KAApB,QAA4BT,QAIlD,OAFAD,GAAmBC,IAEZK,G,OCZTK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUP,MAAOD,KAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SAGJS,SAASC,eAAe,W","file":"static/js/main.c27b6574.chunk.js","sourcesContent":["export enum Mode {\n  addProfile = 'add-profile',\n  listProfiles = 'list-profiles',\n}\n","export default __webpack_public_path__ + \"static/media/error.aee84ee0.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Background from '../../assets/images/backgrounds/error.svg';\n\n// styles\nimport './error-container-styles.scss';\n\nconst ErrorContainer: FunctionComponent<{}> = () => {\n  return (\n    <section className=\"Error\">\n      <img\n        alt=\"background-error\"\n        className=\"Error__background\"\n        src={Background}\n      />\n    </section>\n  );\n};\n\nexport default ErrorContainer;\n","export default __webpack_public_path__ + \"static/media/close.91205169.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport CloseIcon from '../../assets/images/icons/close.svg';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"NavMenu__header\">\n          <input\n            placeholder=\"Search for a channel:\"\n            className=\"NavMenu__input-filter\"\n          />\n          <div className=\"NavMenu__button-close\">\n            <img alt=\"close-icon\" onClick={onClickHandler} src={CloseIcon} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.4f615ee5.svg\";","import { FunctionComponent, useState } from 'react';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__content\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">ME</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">Gentleman App - Meetings</p>\n          <p className=\"PageHeader__users\">2 Brothers-in-law online</p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <img\n        alt=\"hamburger-menu\"\n        className=\"PageHeader__hamburger-menu\"\n        onClick={() => setVisible(true)}\n        src={HamburgerMenu}\n      />\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/plus.2d6f4c38.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport PlusIcon from '../../assets/images/icons/plus.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n}) => {\n  return (\n    <section\n      className={`ProfilePicker ProfilePicker--${mode}`}\n      onClick={clickHandler}\n    >\n      {/* TITLE */}\n      <p className=\"ProfilePicker__title\">Add</p>\n\n      {/* CIRCLE */}\n      <div className=\"ProfilePicker__button\">\n        <img alt=\"icon\" className=\"ProfilePicker__icon-plus\" src={PlusIcon} />\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","export const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = 'login',\n  loginSuccess = 'loginSuccess',\n  loginError = 'loginError',\n}\n","import { FunctionComponent } from 'react';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a user:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a user to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.addProfile)} />\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent<{}> = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        <div>Create</div>\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","export default __webpack_public_path__ + \"static/media/gentleman.154e51ca.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\ntype TProps = {\n  appDataLoaded: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\n  <div className=\"PageLoader\">\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\n    {/* LOGO */}\n    <img alt=\"gentleman-logo\" src={Gentleman} />\n\n    {/* SPINNER */}\n    <div className=\"PageLoader__spinner\">\n      {Array.from(Array(12)).map((_, index) => (\n        <div\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\n          key={index}\n        ></div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n\nexport const profileIdSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('profileId')\n);\n","export const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  fetchProfilesSuccess = 'fetchProfilesSuccess',\n  fetchProfilesError = 'fetchProfilesError',\n}\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  profilesSelector,\n  getFp('isPending')\n);\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n}\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport {\n  isPendingSelector as isPendingAuthSelector,\n  errorMessageSelector,\n} from './auth/selectors';\nimport { isPendingSelector as isPendingProfilesSelector } from './profiles/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingProfilesSelector,\n    (isPendingProfiles) => !isPendingProfiles\n  );\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { profileIdSelector } from '../../store/auth/selectors';\nimport { appDataLoadedSelector } from '../../store/selectors';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const profileId = useSelector(profileIdSelector);\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n\n  if (!appDataLoaded) {\n    return <PageLoader appDataLoaded={appDataLoaded} />;\n  }\n\n  if (!profileId) {\n    return <ProfilePicker />;\n  }\n\n  return (\n    <div className=\"Page\">\n      <PageHeader />\n    </div>\n  );\n};\n\nexport default Page;\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (payload: string): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n  payload,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","import { useEffect, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ErrorContainer from '../ErrorContainer/ErrorContainer';\nimport Page from '../Page/Page';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  useEffect(() => {\n    const password = prompt('Please enter a password:');\n    indexedDB.deleteDatabase('firebaseLocalStorageDb');\n    dispatch(loginAction(password as string));\n    // eslint-disable-next-line\n  }, []);\n\n  if (isPending) {\n    return null;\n  }\n\n  if (errorMessage) {\n    return <ErrorContainer />;\n  }\n\n  return <Page />;\n};\n\nexport default App;\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","// others\nimport { TProfile } from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TFetchProfilesSuccess, TFetchProfilesError } from './types';\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n","export enum LocalStorageKeys {\n  profileId = 'profileId',\n}\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n\n    if (isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n      }, 2000);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError, TLoginSuccess } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n  profileId: '',\n};\n\nconst loginSuccess = (\n  state: TAuthState,\n  { payload: profileId }: TLoginSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  profileId,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport { TFetchProfilesSuccess } from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TProfilesState } from './types';\n\nconst initialState: TProfilesState = {\n  data: [],\n  isPending: true,\n  seletedProfileId: '',\n};\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport profiles from './profiles/reducer';\n\nconst reducers = { auth, profiles };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\nimport { LocalStorageKeys } from '../../enums';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n  const profileId = localStorage.getItem(LocalStorageKeys.profileId) || '';\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess(profileId));\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","export const EMAIL = 'eryk.sandecki@gmail.com';\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\n\nconst watches = [watchAuth];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}