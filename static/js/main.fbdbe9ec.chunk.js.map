{"version":3,"sources":["enums.ts","assets/images/icons/send-icon.svg","components/Chat/ChatInput/ChatInput.tsx","components/Chat/ChatMessages/ChatMessages.tsx","core/ContextProvider/ContextProvider.tsx","components/Firebase/enums.ts","components/Chat/Chat.tsx","store/channels/actionsType.ts","components/Firebase/services/getRefDatabase.ts","components/OnlineHandler/useOnDisconnectHandlers.ts","components/OnlineHandler/OnlineHandler.tsx","store/channels/actions.ts","store/profiles/actionsType.ts","store/channels/selectors.ts","components/NavMenu/NavMenuCreateChannelForm/NavMenuCreateChannelForm.tsx","assets/images/icons/plus-white-icon.svg","components/NavMenu/NavMenuChannels/NavMenuChannels.tsx","assets/images/icons/offline-icon.svg","assets/images/icons/online-icon.svg","store/profiles/selectors.ts","components/ProfilePickerSection/enums.ts","components/NavMenu/NavMenuProfiles/NavMenuProfiles.tsx","assets/images/icons/close-white-icon.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/close-icon.svg","assets/images/icons/gear-icon.svg","assets/images/icons/modify-size-icon.svg","components/PageHeader/PageHeaderSettingsMenu/PageHeaderSettingsMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","components/ProfileForm/ProfileForm.tsx","store/profiles/actions.ts","components/CreateProfileForm/CreateProfileForm.tsx","components/ProfilePicker/usePress.ts","assets/images/icons/plus.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","store/selectors.ts","components/Page/Page.tsx","components/App/App.tsx","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/channels/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/saga.ts","constants.ts","store/auth/actions.ts","store/auth/watch.ts","components/Firebase/services/generateId.ts","store/channels/saga.ts","store/channels/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["LocalStorageKey","StoragePath","ChatInput","forwardRef","ref","inputHandler","useState","visibilityPlaceholder","setVisibilityPlaceholder","className","contentEditable","onBlur","event","target","innerText","trim","length","onFocus","onInput","suppressContentEditableWarning","alt","src","SendIcon","ChatMessages","_","DatabaseColumns","Context","createContext","margin","setMargin","ContextProvider","children","parseInt","localStorage","getItem","marginOffset","Provider","value","result","setItem","Chat","messagesRef","useRef","inputRef","useContext","style","height","current","clientHeight","ChannelsActionsType","getRefDatabase","path","refDataBase","firebase","database","i","child","useOnDisconnectHandlers","disconnectProfile","indexProfile","profiles","onDisconnect","set","OnlineHandler","useEffect","REDUCER_KEY","ProfilesActionsType","createChannelError","payload","type","createChannelsError","channelsSelector","getFp","isPendingSelector","createSelector","channelsLoadedSelector","composeFp","isArrayFp","getDefaultChannelId","headFp","getAttributeFromChannels","attribute","NavMenuCreateChannelForm","closeModal","openNotifiaction","name","setName","shortcut","setShortcut","isSubmitted","setIsSubmitted","isPending","useSelector","dispatch","useDispatch","onSubmit","preventDefault","toUpperCase","createChannel","TextField","onChange","e","label","inputProps","maxLength","Button","color","disabled","size","variant","CircularProgress","NavMenuChannels","closeNavMenu","open","setOpen","visible","setVisible","channels","Alert","props","elevation","onClickHandler","channelId","setChannelId","onClick","PlusWhiteIcon","map","Modal","closeAfterTransition","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Snackbar","autoHideDuration","severity","Mode","profilesSelector","profilesLoadedSelector","getAttributeFromProfiles","getAttributesFromSelectedProfile","selectedProfileId","findFp","profileId","NavMenuProfiles","seletedProfileId","filter","online","OnlineIcon","OfflineIcon","NavMenu","stopPropagation","CloseWhiteIcon","PageHeaderSettingsMenu","anchorEl","setAnchorEl","onClickCloseHandler","currentTarget","GearIcon","Menu","id","keepMounted","Boolean","MenuItem","ModifySizeIcon","CloseIcon","PageHeader","defaultChannelId","selectedChannelId","getAttributesFromSelectedChannel","HamburgerMenu","loadImage","setImageData","reader","FileReader","files","onload","file","readAsDataURL","ProfileForm","clickHandler","initialName","imageData","initialImageData","submitHandler","title","BackIcon","backToProfileList","EmptyImage","click","ButtonPicture","createProfileError","uploadImageFinished","CreateProfileForm","restProps","formData","createProfile","isTouchEvent","touches","usePress","pressHandler","shouldPreventDefault","delay","longPressTriggered","setLongPressTriggered","start","useCallback","addEventListener","passive","setTimeout","clear","shouldTriggerClick","clearTimeout","removeEventListener","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","ProfilePicker","mode","overlayVisible","setOverlayVisible","isOverlayVisible","press","PlusIcon","AuthActionsType","ProfilePickerList","selectProfile","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","index","authSelector","errorMessageSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","channelsData","Page","App","theme","useMemo","createMuiTheme","palette","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","data","push","databaseSuccessHandler","response","actions","val","databaseHandler","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","channelsActions","fetchChannelsSuccess","initialState","loginSuccess","state","loginError","createChannelSuccess","fetchChannelsError","createProfileSuccess","fetchProfilesError","setProfileId","reducers","auth","action","createRootReducer","combineReducers","login","password","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","generateId","keyId","characters","splice","charAt","Math","floor","random","find","join","select","watchChannels","uploadImage","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","setStatusProfile","take","findIndex","selectProfileError","setStatusProfileError","watchProfiles","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbdbe9ec.chunk.js","sourcesContent":["export enum LocalStorageKey {\n  indexProfile = 'indexProfile',\n  marginOffset = 'MARGIN_OFFSET',\n}\n\nexport enum StoragePath {\n  profiles = 'PROFILES',\n}\n","export default __webpack_public_path__ + \"static/media/send-icon.d7969ca4.svg\";","// @ts-nocheck\nimport {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n  useState,\n} from 'react';\n\n// others\nimport SendIcon from '../../../assets/images/icons/send-icon.svg';\n\n// styles\nimport './chat-input-styles.scss';\n\ntype TProps = {\n  inputHandler: (event: Event) => void;\n};\n\nconst ChatInput: ForwardRefExoticComponent<\n  TProps & RefAttributes<HTMLDivElement>\n> = forwardRef<HTMLDivElement, TProps>(({ inputHandler }, ref) => {\n  const [visibilityPlaceholder, setVisibilityPlaceholder] = useState(true);\n\n  const onBlurHandler = (event: Event): void => {\n    const { target } = event;\n\n    if (target.innerText.trim().length === 0) {\n      setVisibilityPlaceholder(true);\n    }\n  };\n\n  return (\n    <div className=\"ChatInput\" ref={ref}>\n      <p\n        className=\"ChatInput__text-field\"\n        contentEditable={true}\n        onBlur={onBlurHandler}\n        onFocus={() => setVisibilityPlaceholder(false)}\n        onInput={inputHandler}\n        suppressContentEditableWarning\n      />\n      {visibilityPlaceholder && (\n        <span className=\"ChatInput__placeholder\">Message #Meetings:</span>\n      )}\n      <img alt=\"send-icon\" className=\"ChatInput__send-icon\" src={SendIcon} />\n    </div>\n  );\n});\n\nexport default ChatInput;\n","import { forwardRef, ForwardRefExoticComponent, RefAttributes } from 'react';\n\n// styles\nimport './chat-messages-styles.scss';\n\nconst ChatMessages: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>> =\n  forwardRef<HTMLDivElement, {}>((_, ref) => {\n    return <div className=\"ChatMessages\" ref={ref}></div>;\n  });\n\nexport default ChatMessages;\n","// @ts-nocheck\nimport { createContext, FunctionComponent, ReactNode, useState } from 'react';\n\n// other\nimport { LocalStorageKey } from '../../enums';\n\ntype TProps = {\n  children: ReactNode;\n};\n\nexport const Context: React.Context<any> = createContext({\n  margin: 0,\n  setMargin: () => {},\n});\n\nconst getMarginFromLocalStorage = (): number =>\n  parseInt(localStorage.getItem(LocalStorageKey.marginOffset) || 0);\n\nconst ContextProvider: FunctionComponent<TProps> = ({ children }) => {\n  const [margin, setMargin] = useState(getMarginFromLocalStorage());\n\n  const setMarginHandler = (value: number): void => {\n    const result = margin + value;\n\n    if (margin > 0 || value !== -1) {\n      setMargin(result);\n      localStorage.setItem(LocalStorageKey.marginOffset, result);\n    }\n  };\n\n  return (\n    <Context.Provider value={{ margin, setMargin: setMarginHandler }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n  channels = 'channels',\n}\n","// @ts-nocheck\nimport { FunctionComponent, useContext, useRef } from 'react';\n\n// components\nimport ChatInput from './ChatInput/ChatInput';\nimport ChatMessages from './ChatMessages/ChatMessages';\n\n// core\nimport { Context } from '../../core/ContextProvider/ContextProvider';\n\n// others\nimport { TContext } from '../../core/ContextProvider/types';\n\n// styles\nimport './chat-styles.scss';\n\nconst Chat: FunctionComponent<{}> = () => {\n  const messagesRef = useRef(null);\n  const inputRef = useRef(null);\n  const { margin }: TContext = useContext(Context);\n\n  const onInputHandler = (): void => {\n    const height = inputRef.current.clientHeight;\n    messagesRef.current.style.height = `calc(100% - ${height}px)`;\n  };\n\n  return (\n    <section\n      className=\"Chat\"\n      style={{ height: `calc(100vh - ${80 + margin}px)` }}\n    >\n      <ChatMessages ref={messagesRef} />\n      <ChatInput inputHandler={onInputHandler} ref={inputRef} />\n    </section>\n  );\n};\n\nexport default Chat;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'channels';\n\nexport enum ChannelsActionsType {\n  createChannel = `${REDUCER_KEY}/createChannel`,\n  createChannelSuccess = `${REDUCER_KEY}/createChannelSuccess`,\n  createChannelsError = `${REDUCER_KEY}/createChannelsError`,\n  fetchChannelsSuccess = `${REDUCER_KEY}/fetchChannelsSuccess`,\n  fetchChannelsError = `${REDUCER_KEY}/fetchChannelsError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  setChannelId = `${REDUCER_KEY}/setChannelId`,\n}\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\n// others\nimport { DatabaseColumns } from '../Firebase/enums';\nimport { LocalStorageKey } from '../../enums';\n\n// services\nimport getRefDatabase from '../Firebase/services/getRefDatabase';\n\nconst useOnDisconnectHandlers = () => {\n  const disconnectProfile = () => {\n    const indexProfile =\n    localStorage.getItem(LocalStorageKey.indexProfile) || -1;\n    return getRefDatabase([DatabaseColumns.profiles, indexProfile, 'online'])\n      .onDisconnect()\n      .set(false);\n  };\n\n  return {\n    disconnectProfile,\n  };\n};\n\nexport default useOnDisconnectHandlers;\n","// @ts-nocheck\r\nimport { FunctionComponent, useEffect } from 'react';\r\n\r\n// hooks\r\nimport useOnDisconnectHandlers from './useOnDisconnectHandlers';\r\n\r\nconst OnlineHandler: FunctionComponent = () => {\r\n  const { disconnectProfile } = useOnDisconnectHandlers();\r\n\r\n  useEffect(() => {\r\n    disconnectProfile();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default OnlineHandler;\r\n","// others\nimport {\n  TChannel,\n  TCreateChannel,\n  TCreateChannelSuccess,\n  TCreateChannelError,\n  TFetchChannelsSuccess,\n  TFetchChannelsError,\n  TSetChannelId,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\n\nexport const createChannel = (\n  payload: Omit<TChannel, 'chanelId' | 'messages'>\n): TCreateChannel => ({\n  type: ChannelsActionsType.createChannel,\n  payload,\n});\n\nexport const createChannelSuccess = (): TCreateChannelSuccess => ({\n  type: ChannelsActionsType.createChannelSuccess,\n});\n\nexport const createChannelError = (payload: string): TCreateChannelError => ({\n  type: ChannelsActionsType.createChannelsError,\n  payload,\n});\n\nexport const fetchChannelsSuccess = (\n  payload: Array<TChannel>\n): TFetchChannelsSuccess => ({\n  type: ChannelsActionsType.fetchChannelsSuccess,\n  payload,\n});\n\nexport const fetchChannelsError = (): TFetchChannelsError => ({\n  type: ChannelsActionsType.fetchChannelsError,\n});\n\nexport const setChannelId = (payload: string): TSetChannelId => ({\n  type: ChannelsActionsType.setChannelId,\n  payload,\n});\n","// @ts-nocheck\nexport const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  createProfile = `${REDUCER_KEY}/createProfile`,\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  selectProfile = `${REDUCER_KEY}/selectProfile`,\n  selectProfileError = `${REDUCER_KEY}/selectProfileError`,\n  setStatusProfile = `${REDUCER_KEY}/setStatusProfile`,\n  setStatusProfileError = `${REDUCER_KEY}/setStatusProfileError`,\n}\n","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport headFp from 'lodash/head';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TChannel, TChannelsState } from './types';\n\nexport const channelsSelector: Selector<TMainState, TChannelsState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(channelsSelector, getFp('isPending'));\n\nexport const channelsLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(channelsSelector, composeFp(isArrayFp, getFp('channels')));\n\nexport const getDefaultChannelId: Selector<TMainState, TChannel> =\n  createSelector(\n    channelsSelector,\n    composeFp(getFp('channelId'), headFp, getFp('channels'))\n  );\n\nexport const getAttributeFromChannels = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(channelsSelector, getFp(attribute));\n\nexport const getAttributesFromSelectedChannel = (\n  selectedChannelId: string\n): Selector<TMainState, TChannel> =>\n  // @ts-ignore\n  createSelector(\n    channelsSelector,\n    composeFp(\n      findFp(({ channelId }) => channelId === selectedChannelId),\n      getFp('channels')\n    )\n  );\n","// @ts-nocheck\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// store\nimport { createChannel } from '../../../store/channels/actions';\nimport { isPendingSelector } from '../../../store/channels/selectors';\n\n// styles\nimport './nav-menu-create-channel-form-styles.scss';\n\ntype TProps = {\n  closeModal: () => void;\n  openNotifiaction: () => void;\n};\n\nconst NavMenuCreateChannelForm: FunctionComponent<TProps> = ({\n  closeModal,\n  openNotifiaction,\n}) => {\n  const [name, setName] = useState('');\n  const [shortcut, setShortcut] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n\n  const onSubmitHandler = (event: Event): void => {\n    event.preventDefault();\n\n    if (name && shortcut) {\n      dispatch(createChannel({ name, shortcut: shortcut.toUpperCase() }));\n      setIsSubmitted(true);\n    }\n  };\n\n  useEffect(() => {\n    if (!isPending && isSubmitted) {\n      closeModal();\n      openNotifiaction();\n    }\n    // eslint-disable-next-line\n  }, [isPending, isSubmitted]);\n\n  return (\n    <form className=\"NavMenuCreateChannelForm\" onSubmit={onSubmitHandler}>\n      <h2>Create channel:</h2>\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setName(e.target.value)}\n        label=\"Channel name:\"\n        value={name}\n      />\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setShortcut(e.target.value)}\n        label=\"Shortcut channel name eg. (ME):\"\n        inputProps={{ maxLength: 2 }}\n        value={shortcut}\n      />\n      <Button\n        className=\"ProfileForm__submit-button\"\n        color=\"primary\"\n        disabled={isPending}\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n      >\n        Create Channel\n        {isPending && (\n          <CircularProgress\n            className=\"ProfileForm__spinner\"\n            color=\"primary\"\n            size={20}\n          />\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default NavMenuCreateChannelForm;\n","export default __webpack_public_path__ + \"static/media/plus-white-icon.f41cd2c2.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n// components\nimport NavMenuCreateChannelForm from '../NavMenuCreateChannelForm/NavMenuCreateChannelForm';\n\n// others\nimport PlusWhiteIcon from '../../../assets/images/icons/plus-white-icon.svg';\nimport { TChannel } from '../../../store/channels/types';\n\n// store\nimport { getAttributeFromChannels } from '../../../store/channels/selectors';\nimport { setChannelId } from '../../../store/channels/actions';\n\n// styles\nimport './nav-menu-channels-styles.scss';\n\ntype TProps = {\n  closeNavMenu: () => void;\n};\n\nconst NavMenuChannels: FunctionComponent<TProps> = ({ closeNavMenu }) => {\n  const [open, setOpen] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const dispatch = useDispatch();\n  const channels: Array<TChannel> = useSelector(\n    getAttributeFromChannels('channels')\n  );\n\n  const Alert = (props: AlertProps) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  };\n\n  const onClickHandler = (channelId: string): void => {\n    closeNavMenu();\n    dispatch(setChannelId(channelId));\n  };\n\n  return (\n    <div className=\"NavMenuChannels\">\n      {/* NAV */}\n      <div className=\"NavMenuChannels__nav\">\n        <p className=\"NavMenuChannels__title\">Channels</p>\n        <img\n          alt=\"plus-white-icon\"\n          className=\"NavMenuChannels__button\"\n          onClick={() => setVisible(true)}\n          src={PlusWhiteIcon}\n        />\n      </div>\n      {/* CHANNELS */}\n      <div className=\"NavMenuChannels__channels\">\n        {channels.map(({ channelId, name }) => (\n          <p\n            className=\"NavMenuChannels__channel-name\"\n            key={channelId}\n            onClick={() => onClickHandler(channelId)}\n          >\n            #{name}\n          </p>\n        ))}\n      </div>\n\n      {/* MODAL */}\n      <Modal\n        className=\"NavMenuChannels__modal\"\n        closeAfterTransition\n        open={visible}\n        onClose={() => setVisible(false)}\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={visible}>\n          <div className=\"NavMenuChannels__card\">\n            <NavMenuCreateChannelForm\n              closeModal={() => setVisible(false)}\n              openNotifiaction={() => setOpen(true)}\n            />\n          </div>\n        </Fade>\n      </Modal>\n\n      {/* NOTIFICATION */}\n      <Snackbar\n        open={open}\n        className=\"NavMenuChannels__snackbar\"\n        autoHideDuration={5000}\n        onClose={() => setOpen(false)}\n      >\n        <Alert onClose={() => setOpen(false)} severity=\"success\">\n          Channel has been added!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default NavMenuChannels;\n","export default __webpack_public_path__ + \"static/media/offline-icon.e258b94e.svg\";","export default __webpack_public_path__ + \"static/media/online-icon.f3194dda.svg\";","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TProfile, TProfilesState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(profilesSelector, getFp('isPending'));\n\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\n\nexport const getAttributeFromProfiles = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(profilesSelector, getFp(attribute));\n\nexport const getAttributesFromSelectedProfile = (\n  selectedProfileId: string\n): Selector<TMainState, TProfile> =>\n  // @ts-ignore\n  createSelector(\n    profilesSelector,\n    composeFp(\n      findFp(({ profileId }) => profileId === selectedProfileId),\n      getFp('data')\n    )\n  );\n\nexport const getAttributeFromSelectedProfile = (\n  attribute: string,\n  selectedProfileId: string\n): Selector<TMainState, TProfile> =>\n  // @ts-ignore\n  createSelector(\n    getAttributesFromSelectedProfile(selectedProfileId),\n    getFp(attribute)\n  );\n","export enum Mode {\n  createProfile = 'createProfile',\n  listProfiles = 'listProfiles',\n}\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport OfflineIcon from '../../../assets/images/icons/offline-icon.svg';\nimport OnlineIcon from '../../../assets/images/icons/online-icon.svg';\nimport { TProfile } from '../../../store/profiles/types';\n\n// store\nimport { getAttributeFromProfiles } from '../../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-profiles-styles.scss';\n\nconst NavMenuProfiles: FunctionComponent = () => {\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const seletedProfileId = useSelector(\n    getAttributeFromProfiles('seletedProfileId')\n  );\n\n  return (\n    <div className=\"NavMenuProfiles\">\n      {/* HEADER */}\n      <div className=\"NavMenuProfiles__header\">\n        <p className=\"NavMenuProfiles__title\">Brothers-in-law</p>\n      </div>\n\n      {/* USERS */}\n      <div className=\"NavMenuProfiles__profiles\">\n        {profiles\n          .filter(({ profileId }) => profileId !== seletedProfileId)\n          .map(({ name, online, profileId, src }) => (\n            <div className=\"NavMenuProfiles__profile\" key={profileId}>\n              <img\n                alt={profileId}\n                className=\"NavMenuProfiles__avatar\"\n                src={src}\n              />\n              <img\n                alt=\"status-icon\"\n                className=\"NavMenuProfiles__status\"\n                src={online ? OnlineIcon : OfflineIcon}\n              />\n              <p className=\"NavMenuProfiles__name\" key={profileId}>\n                {name}\n              </p>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenuProfiles;\n","export default __webpack_public_path__ + \"static/media/close-white-icon.c6df9cb2.svg\";","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenuChannels from './NavMenuChannels/NavMenuChannels';\nimport NavMenuProfiles from './NavMenuProfiles/NavMenuProfiles';\n\n// others\nimport CloseWhiteIcon from '../../assets/images/icons/close-white-icon.svg';\n\n// store\nimport {\n  getAttributeFromProfiles,\n  getAttributesFromSelectedProfile,\n} from '../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('seletedProfileId')\n  );\n  const { name, src } = useSelector(\n    getAttributesFromSelectedProfile(selectedProfileId)\n  );\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      {/* BACKGROUND */}\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n\n      {/* CONTAINER */}\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* HEADER */}\n        <div className=\"NavMenu__header\">\n          <div className=\"NavMenu__profile-data\">\n            <img\n              alt=\"profile-avatar\"\n              className=\"NavMenu__profile-avatar\"\n              src={src}\n            />\n            <p className=\"NavMenu__profile-name\">{name}</p>\n          </div>\n          <img\n            alt=\"close-white-icon\"\n            className=\"NavMenu__button-close\"\n            onClick={onClickHandler}\n            src={CloseWhiteIcon}\n          />\n        </div>\n\n        {/* CONTENT */}\n        <div className=\"NavMenu__content\">\n          <NavMenuChannels closeNavMenu={onClickHandler} />\n          <NavMenuProfiles />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/close-icon.092c61d5.svg\";","export default __webpack_public_path__ + \"static/media/gear-icon.e5deb93c.svg\";","export default __webpack_public_path__ + \"static/media/modify-size-icon.7b8f31f6.svg\";","// @ts-nocheck\nimport { FunctionComponent, useContext, useState } from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// core\nimport { Context } from '../../../core/ContextProvider/ContextProvider';\n\n// others\nimport CloseIcon from '../../../assets/images/icons/close-icon.svg';\nimport GearIcon from '../../../assets/images/icons/gear-icon.svg';\nimport ModifySizeIcon from '../../../assets/images/icons/modify-size-icon.svg';\nimport { TContext } from '../../../core/ContextProvider/types';\n\n// styles\nimport './page-header-settings-menu-styles.scss';\n\nconst PageHeaderSettingsMenu: FunctionComponent<{}> = () => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { setMargin }: TContext = useContext(Context);\n  const onClickOpenHandler = (event: Event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onClickCloseHandler = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className=\"PageHeaderSettingsMenu\">\n      <img alt=\"gear-icon\" onClick={onClickOpenHandler} src={GearIcon} />\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClickCloseHandler}\n      >\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(1)}\n        >\n          Up\n          <img alt=\"gear-icon\" src={ModifySizeIcon} />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(-1)}\n        >\n          Down\n          <img\n            alt=\"reverted-gear-icon\"\n            className=\"PageHeaderSettingsMenu__icon-rotate\"\n            src={ModifySizeIcon}\n          />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={onClickCloseHandler}\n        >\n          Close\n          <img alt=\"close-icon\" src={CloseIcon} />\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\nexport default PageHeaderSettingsMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.85ddbb0d.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\nimport PageHeaderSettingsMenu from './PageHeaderSettingsMenu/PageHeaderSettingsMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\nimport { TChannel } from '../../store/channels/types';\n\n// store\nimport {\n  getAttributeFromChannels,\n  getAttributesFromSelectedChannel,\n  getDefaultChannelId,\n} from '../../store/channels/selectors';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n  const defaultChannelId = useSelector(getDefaultChannelId);\n  const selectedChannelId =\n    useSelector(getAttributeFromChannels('selectedChannelId')) ||\n    defaultChannelId;\n  const { name, shortcut }: TChannel = useSelector(\n    getAttributesFromSelectedChannel(selectedChannelId)\n  );\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__left-column\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">{shortcut}</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">#{name}</p>\n          <p className=\"PageHeader__users\">2 Brothers online</p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <div className=\"PageHeader__right-column\">\n        <PageHeaderSettingsMenu />\n        <img\n          alt=\"hamburger-menu\"\n          className=\"PageHeader__hamburger-menu\"\n          onClick={() => setVisible(true)}\n          src={HamburgerMenu}\n        />\n      </div>\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/back.d5208217.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.9659aaae.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.acb60281.svg\";","// @ts-nocheck\n// others\n\nconst loadImage = (\n  event: Event,\n  setImageData: (file: string | ArrayBuffer | null) => void\n) => {\n  const reader = new FileReader();\n  const { files } = event.target;\n\n  reader.onload = (e) => {\n    setImageData({\n      file: files[0],\n      src: e.target.result,\n    });\n  };\n\n  reader.readAsDataURL(files[0]);\n};\n\nexport default loadImage;\n","// @ts-nocheck\nimport { FunctionComponent, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// others\nimport BackIcon from '../../assets/images/icons/back.svg';\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\nimport { TImageData } from '../../types';\nimport { TProfileFormData } from '../../store/profiles/types';\n\n// services\nimport loadImage from './services/loadImage';\n\n// store\nimport { isPendingSelector } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-form-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  name?: string;\n  imageData?: TImageData;\n  submitHandler: (formData: TProfileFormData) => void;\n  title: string;\n};\n\nconst ProfileForm: FunctionComponent<TProps> = ({\n  clickHandler,\n  name: initialName = '',\n  imageData: initialImageData = null,\n  submitHandler,\n  title,\n}) => {\n  const isPending = useSelector(isPendingSelector);\n  const inputRef = useRef(null);\n  const [imageData, setImageData] = useState(initialImageData);\n  const [name, setName] = useState(initialName);\n\n  const onSubmitHandler = (event: Event) => {\n    event.preventDefault();\n\n    if (imageData && name) {\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\n    }\n  };\n\n  return (\n    <div className=\"ProfileForm__form-wrapper\">\n      <h2 className=\"ProfileForm__title\">\n        <img\n          alt=\"back-icon\"\n          className=\"ProfileForm__icon\"\n          onClick={clickHandler}\n          src={BackIcon}\n        />\n        {title}\n      </h2>\n\n      {/* FORM */}\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\n        {/* AVATAR */}\n        <div\n          className={`ProfileForm__avatar ${\n            imageData ? 'ProfileForm__avatar--selected' : ''\n          }`}\n        >\n          {imageData ? (\n            <img\n              alt=\"avatar\"\n              className=\"ProfileForm__image\"\n              src={imageData.src}\n            />\n          ) : (\n            <img\n              alt=\"empty\"\n              className=\"ProfileForm__empty-picture\"\n              src={EmptyImage}\n            />\n          )}\n\n          {/* BUTTON */}\n          <img\n            alt=\"button-icon\"\n            className=\"ProfileForm__button-picture\"\n            onClick={() => inputRef.current.click()}\n            src={ButtonPicture}\n          />\n          <input\n            className=\"ProfileForm__input-file\"\n            onChange={(event: Event) => loadImage(event, setImageData)}\n            ref={inputRef}\n            type=\"file\"\n          />\n        </div>\n\n        {/* INPUT NAME */}\n        <TextField\n          className=\"ProfileForm__input-name\"\n          onChange={(e) => setName(e.target.value)}\n          label=\"Profile name:\"\n          value={name}\n        />\n\n        <Button\n          className=\"ProfileForm__submit-button\"\n          color=\"primary\"\n          disabled={isPending}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Create Profile\n          {isPending && (\n            <CircularProgress\n              className=\"ProfileForm__spinner\"\n              color=\"primary\"\n              size={20}\n            />\n          )}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","import { TSetStatusProfileError } from './types';\n// others\nimport { TReturnablePayload } from './../common/types';\nimport {\n  TCreateProfile,\n  TCreateProfileSuccess,\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TFetchProfilesError,\n  TProfile,\n  TProfileFormData,\n  TUploadImageFinished,\n  TSelectProfile,\n  TSelectProfileError,\n  TSetStatusProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\n\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\n  type: ProfilesActionsType.createProfile,\n  payload,\n});\n\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\n  type: ProfilesActionsType.createProfileSuccess,\n});\n\nexport const createProfileError = (payload: string): TCreateProfileError => ({\n  type: ProfilesActionsType.createProfileError,\n  payload,\n});\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n\nexport const uploadImageFinished = (\n  payload: TReturnablePayload\n): TUploadImageFinished => ({\n  type: ProfilesActionsType.uploadImageFinished,\n  payload,\n});\n\nexport const selectProfile = (payload: string): TSelectProfile => ({\n  type: ProfilesActionsType.selectProfile,\n  payload,\n});\n\nexport const selectProfileError = (payload: string): TSelectProfileError => ({\n  type: ProfilesActionsType.selectProfileError,\n  payload,\n});\n\nexport const setStatusProfile = (payload: boolean): TSetStatusProfile => ({\n  type: ProfilesActionsType.setStatusProfile,\n  payload,\n});\n\nexport const setStatusProfileError = (\n  payload: string\n): TSetStatusProfileError => ({\n  type: ProfilesActionsType.setStatusProfileError,\n  payload,\n});\n","import { FunctionComponent } from 'react';\nimport { useDispatch } from 'react-redux';\n\n// components\nimport ProfileForm from '../ProfileForm/ProfileForm';\n\n// store\nimport { createProfile } from '../../store/profiles/actions';\nimport { TProfileFormData } from '../../store/profiles/types';\n\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (formData: TProfileFormData) =>\n    dispatch(createProfile(formData));\n\n  return (\n    //@ts-ignore\n    <ProfileForm\n      submitHandler={submitHandler}\n      title=\"Create Profile:\"\n      {...restProps}\n    />\n  );\n};\n\nexport default CreateProfileForm;\n","// @ts-nocheck\nimport { useCallback, useRef, useState } from 'react';\n\nconst usePress = (\n  pressHandler,\n  clickHandler,\n  { shouldPreventDefault = true, delay = 1000 } = {}\n) => {\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const timeout = useRef();\n  const target = useRef();\n\n  const start = useCallback(\n    (event) => {\n      if (shouldPreventDefault && event.target) {\n        event.target.addEventListener('touchend', preventDefault, {\n          passive: false,\n        });\n        target.current = event.target;\n      }\n      timeout.current = setTimeout(() => {\n        pressHandler(event);\n        setLongPressTriggered(true);\n      }, delay);\n    },\n    [pressHandler, delay, shouldPreventDefault]\n  );\n\n  const clear = useCallback(\n    (_, shouldTriggerClick = true) => {\n      timeout.current && clearTimeout(timeout.current);\n      shouldTriggerClick && !longPressTriggered && clickHandler();\n      setLongPressTriggered(false);\n      if (shouldPreventDefault && target.current) {\n        target.current.removeEventListener('touchend', preventDefault);\n      }\n    },\n    [shouldPreventDefault, clickHandler, longPressTriggered]\n  );\n\n  return {\n    onMouseDown: (e) => start(e),\n    onTouchStart: (e) => start(e),\n    onMouseUp: (e) => clear(e),\n    onMouseLeave: (e) => clear(e, false),\n    onTouchEnd: (e) => clear(e),\n  };\n};\n\nconst isTouchEvent = (event) => {\n  return 'touches' in event;\n};\n\nconst preventDefault = (event) => {\n  if (!isTouchEvent(event)) return;\n\n  if (event.touches.length < 2 && event.preventDefault) {\n    event.preventDefault();\n  }\n};\n\nexport default usePress;\n","export default __webpack_public_path__ + \"static/media/plus.c453ef1e.svg\";","import { FunctionComponent, useState } from 'react';\n\n// hooks\nimport usePress from './usePress';\n\n// others\nimport PlusIcon from '../../assets/images/icons/plus.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n  name?: string;\n  src?: string;\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n  name,\n  src,\n}) => {\n  const [overlayVisible, setOverlayVisible] = useState(false);\n  const isOverlayVisible = mode === 'select' && overlayVisible;\n  const onPressHandler = () => {\n    setOverlayVisible(true);\n  };\n\n  const onClickHandler = () => {\n    clickHandler();\n  };\n\n  const press = usePress(onPressHandler, onClickHandler);\n\n  return (\n    <section\n      className={`ProfilePicker ${\n        isOverlayVisible ? 'ProfilePicker--blur' : ''\n      }`}\n    >\n      <div\n        className={`ProfilePicker__card ProfilePicker--${mode}__card ${\n          isOverlayVisible ? 'ProfilePicker__card--blur' : ''\n        }`}\n        {...press}\n      >\n        {/* TITLE */}\n        <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\n          {name ? name : 'Create:'}\n        </p>\n\n        {/* CIRCLE */}\n        <div className={`ProfilePicker__button ProfilePicker--${mode}__button`}>\n          <img\n            alt={name ? `${name}-avatar` : 'icon'}\n            className={`ProfilePicker__image ProfilePicker--${mode}__image`}\n            src={src ? src : PlusIcon}\n          />\n        </div>\n      </div>\n\n      {/* OVERLAY */}\n      {isOverlayVisible && <div className=\"ProfilePicker__overlay\"></div>}\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = `${REDUCER_KEY}/login`,\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\n  loginError = `${REDUCER_KEY}/loginError`,\n}\n","import { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { selectProfile } from '../../store/profiles/actions';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  const dispatch = useDispatch();\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a profile to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\n\n        {/* LIST */}\n        {/* @ts-ignore */}\n        {profiles.map(({ name, profileId, src }) => (\n          <ProfilePicker\n            clickHandler={() => dispatch(selectProfile(profileId))}\n            key={profileId}\n            mode=\"select\"\n            name={name}\n            src={src}\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        // LIST\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        // @ts-ignore\n        <CreateProfileForm clickHandler={onClickBackHandler} />\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","export default __webpack_public_path__ + \"static/media/gentleman.ff3326dc.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\ntype TProps = {\n  appDataLoaded: boolean;\n};\n\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\n  <div className=\"PageLoader\">\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\n    {/* LOGO */}\n    <img alt=\"gentleman-logo\" src={Gentleman} />\n\n    {/* SPINNER */}\n    <div className=\"PageLoader__spinner\">\n      {Array.from(Array(12)).map((_, index) => (\n        <div\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\n          key={index}\n        ></div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport { channelsLoadedSelector } from './channels/selectors';\nimport {\n  errorMessageSelector,\n  isPendingSelector as isPendingAuthSelector,\n} from './auth/selectors';\nimport { profilesLoadedSelector } from './profiles/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    profilesLoadedSelector,\n    channelsLoadedSelector,\n    (profilesData, channelsData) => profilesData && channelsData\n  );\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport Chat from '../Chat/Chat';\nimport OnlineHandler from '../OnlineHandler/OnlineHandler';\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { appDataLoadedSelector } from '../../store/selectors';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('seletedProfileId')\n  );\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n\n  if (!appDataLoaded) {\n    return <PageLoader appDataLoaded={appDataLoaded} />;\n  }\n\n  if (!selectedProfileId) {\n    return <ProfilePicker />;\n  }\n\n  return (\n    <div className=\"Page\">\n      <OnlineHandler />\n      <PageHeader />\n      <Chat />\n    </div>\n  );\n};\n\nexport default Page;\n","import { useEffect, useMemo, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// components\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport Page from '../Page/Page';\n\n// core\nimport ContextProvider from '../../core/ContextProvider/ContextProvider';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    []\n  );\n\n  // useEffect(() => {\n  //   const password = prompt('Please enter a password:');\n  //   indexedDB.deleteDatabase('firebaseLocalStorageDb');\n  //   dispatch(loginAction(password as string));\n  //   // eslint-disable-next-line\n  // }, []);\n\n  // if (isPending) {\n  //   return null;\n  // }\n\n  // if (errorMessage) {\n  //   return <ErrorPage />;\n  // }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ContextProvider>\n        <Page />\n      </ContextProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// @ts-nocheck\n// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns,\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TChannel } from '../../store/channels/types';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchChannelsSuccess } from '../../store/channels/actions';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n    const channelsActions = (payload: Array<TChannel>): void => {\n      dispatch(fetchChannelsSuccess(payload));\n    };\n\n    if (!isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n        databaseHandler(firebase, channelsActions, DatabaseColumns.channels);\n      }, 1);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n};\n\nconst loginSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport {\n  TCreateChannelError,\n  TFetchChannelsSuccess,\n  TChannelsState,\n  TSetChannelId,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TChannelsState = {\n  channels: null,\n  error: '',\n  isPending: true,\n  selectedChannelId: '',\n};\n\nconst createChannel = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createChannelSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createChannelError = (\n  state: TAuthState,\n  { payload: error }: TCreateChannelError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchChannelsSuccess = (\n  state: TAuthState,\n  { payload: channels }: TFetchChannelsSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  channels,\n});\n\nconst fetchChannelsError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setChannelId = (\n  state: TAuthState,\n  { payload: selectedChannelId }: TSetChannelId\n): TAuthState => ({\n  ...state,\n  selectedChannelId,\n});\n\nconst channels = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ChannelsActionsType.createChannel:\n      return createChannel(state, action);\n    case ChannelsActionsType.createChannelSuccess:\n      return createChannelSuccess(state, action);\n    case ChannelsActionsType.createChannelsError:\n      return createChannelError(state, action);\n    case ChannelsActionsType.fetchChannelsSuccess:\n      return fetchChannelsSuccess(state, action);\n    case ChannelsActionsType.fetchChannelsError:\n      return fetchChannelsError(state, action);\n    case ChannelsActionsType.setChannelId:\n      return setChannelId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default channels;\n","// @ts-nocheck\n// others\nimport {\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TProfilesState,\n  TSelectProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TProfilesState = {\n  data: null,\n  error: '',\n  isPending: true,\n  selectedProfileId: '',\n};\n\nconst createProfile = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createProfileError = (\n  state: TAuthState,\n  { payload: error }: TCreateProfileError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setProfileId = (\n  state: TAuthState,\n  { payload: seletedProfileId }: TSelectProfile\n): TAuthState => ({\n  ...state,\n  seletedProfileId,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.createProfile:\n      return createProfile(state, action);\n    case ProfilesActionsType.createProfileSuccess:\n      return createProfileSuccess(state, action);\n    case ProfilesActionsType.createProfileError:\n      return createProfileError(state, action);\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    case ProfilesActionsType.selectProfile:\n      return setProfileId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport channels from './channels/reducer';\nimport profiles from './profiles/reducer';\n\nconst reducers = { auth, channels, profiles };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess());\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","export const EMAIL = 'eryk.sandecki@gmail.com';\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\n// others\nimport { TChannel } from '../../../store/channels/types';\nimport { TProfile } from '../../../store/profiles/types';\n\nconst generateId = (data: Array<TProfile | TChannel>, keyId: string) => {\n  const result: Array<string> = [];\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  do {\n    result.splice(0, result.length);\n    for (let i = 0; i < 9; i++) {\n      result.push(\n        characters.charAt(Math.floor(Math.random() * characters.length))\n      );\n    }\n  } while (data.find((data) => data[keyId] === result.join('')));\n\n  return result.join('');\n};\n\nexport default generateId;\n","// @ts-nocheck\nimport { delay, PutEffect, put, select } from 'redux-saga/effects';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\n\n// services\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { createChannelSuccess, createChannelError } from './actions';\nimport { getAttributeFromChannels } from './selectors';\n\nexport function* createChannel({ payload }): Generator<PutEffect<any>> {\n  const { name, shortcut } = payload;\n  const data = yield select(getAttributeFromChannels('channels'));\n  const channelId = generateId(data, 'channelId');\n\n  try {\n    yield delay(1000);\n    yield getRefDatabase([DatabaseColumns.channels]).set([\n      ...data,\n      { channelId, name, shortcut },\n    ]);\n    yield put(createChannelSuccess());\n  } catch (error) {\n    yield put(createChannelError(error));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createChannel } from './saga';\nimport { ChannelsActionsType } from './actionsType';\n\nexport function* watchChannels(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ChannelsActionsType.createChannel, createChannel),\n  ]);\n}\n","// @ts-nocheck\nimport firebase from 'firebase';\nimport { eventChannel } from 'redux-saga';\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\nimport { TFileUploadPayload } from './types';\n\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\n  const { action, file, path }: TFileUploadPayload = payload;\n\n  try {\n    const uploadTask = firebase.storage().ref(path).put(file);\n    const channel = eventChannel((emit) =>\n      uploadTask.on('state_changed', emit)\n    );\n    let src = '';\n\n    yield takeEvery(channel, () => {});\n    yield uploadTask;\n    yield uploadTask.snapshot.ref\n      .getDownloadURL()\n      .then((response) => (src = response));\n    yield put(action({ result: 'success', src }));\n  } catch (error) {\n    yield put(action({ error, result: 'error' }));\n  }\n}\n","// @ts-nocheck\nexport const REDUCER_KEY = 'common';\n\nexport enum CommonActionsType {\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { uploadImage } from './saga';\nimport { CommonActionsType } from './actionsType';\n\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\n  ]);\n}\n","// @ts-nocheck\n//others\nimport { TReturnablePayload } from '../../../store/common/types';\n\nconst afterUploadImageHandler = ({\n  error,\n  result,\n  src,\n}: TReturnablePayload) => {\n  if (result === 'error') {\n    throw error;\n  }\n  return src;\n};\n\nexport default afterUploadImageHandler;\n","// others\nimport { TFileUploadPayload, TUploadFile } from './types';\n\n// store\nimport { CommonActionsType } from './actionsType';\n\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\n  type: CommonActionsType.uploadFile,\n  payload,\n});\n","// @ts-nocheck\nimport { PutEffect, take, put, select } from 'redux-saga/effects';\nimport { TProfileFormData } from './types';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { LocalStorageKey } from './../../enums';\nimport { StoragePath } from '../../enums';\nimport { TProfile } from './types';\n\n// services\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport {\n  createProfileSuccess,\n  createProfileError,\n  uploadImageFinished,\n  selectProfileError,\n  setStatusProfileError,\n} from './actions';\nimport { uploadFile } from '../common/actions';\nimport { getAttributeFromProfiles } from './selectors';\n\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\n  const {\n    backToProfileList,\n    name,\n    imageData: { file },\n  }: TProfileFormData = payload;\n  const path = `${StoragePath.profiles}/${name}`;\n  const data = yield select(getAttributeFromProfiles('data'));\n  const profileId = generateId(data, 'profileId');\n\n  try {\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\n\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\n    const src = afterUploadImageHandler(payload);\n\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\n      ...data,\n      { name, online: false, profileId, src },\n    ]);\n    yield put(createProfileSuccess());\n    yield backToProfileList();\n  } catch (error) {\n    yield put(createProfileError(error));\n  }\n}\n\nexport function* selectProfile({\n  payload: selectedProfileId,\n}): Generator<PutEffect<any>> {\n  const profiles: Array<TProfile> = yield select(\n    getAttributeFromProfiles('data')\n  );\n  const indexProfile = profiles.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  try {\n    yield localStorage.setItem(LocalStorageKey.indexProfile, indexProfile);\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'online',\n    ]).set(true);\n  } catch (error) {\n    yield put(selectProfileError(error));\n  }\n}\n\nexport function* setStatusProfile({\n  payload: online,\n}): Generator<PutEffect<any>> {\n  const selectedProfileId = yield select(\n    getAttributeFromProfiles('seletedProfileId')\n  );\n  const data: Array<TProfile> = yield select(getAttributeFromProfiles('data'));\n  const indexProfile = data.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  if (indexProfile === -1) {\n    return;\n  }\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'online',\n    ]).set(online);\n  } catch (error) {\n    yield put(setStatusProfileError(error));\n  }\n}\n","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createProfile, selectProfile, setStatusProfile } from './saga';\nimport { ProfilesActionsType } from './actionsType';\n\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\n    takeEvery(ProfilesActionsType.selectProfile, selectProfile),\n    takeEvery(ProfilesActionsType.setStatusProfile, setStatusProfile),\n  ]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\nimport { watchChannels } from './channels/watch';\nimport { watchCommonStore } from './common/watch';\nimport { watchProfiles } from './profiles/watch';\n\nconst watches = [watchAuth, watchChannels, watchCommonStore, watchProfiles];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './watchers';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}