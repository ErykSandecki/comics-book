{"version":3,"sources":["store/channels/actionsType.ts","assets/images/backgrounds/error.svg","components/ErrorPage/ErrorPage.tsx","store/channels/selectors.ts","store/typings/actionsType.ts","store/typings/actions.ts","store/profiles/actionsType.ts","components/Chat/ChatInput/useTyping.ts","assets/images/icons/send-icon.svg","assets/images/icons/send-disabled-icon.svg","components/Chat/ChatInput/services.ts","store/channels/actions.ts","store/profiles/selectors.ts","enums.ts","components/Chat/ChatInput/ChatInput.tsx","assets/images/backgrounds/empty-messages.svg","components/Chat/ChatMessages/constants.ts","components/Chat/ChatMessages/services.ts","components/Chat/ChatMessages/ChatMessages.tsx","core/ContextProvider/ContextProvider.tsx","components/Firebase/enums.ts","components/Chat/Chat.tsx","assets/images/icons/update-icon.svg","components/ModalNewUpdates/constants.ts","components/ModalNewUpdates/ModalNewUpdates.tsx","components/ProfilePickerSection/enums.ts","components/Firebase/services/getRefDatabase.ts","components/OnlineHandler/useSubscribesOnDisconnectHandlers.ts","store/profiles/actions.ts","components/OnlineHandler/OnlineHandler.tsx","components/NavMenu/NavMenuCreateChannelForm/NavMenuCreateChannelForm.tsx","assets/images/icons/plus-white-icon.svg","components/NavMenu/NavMenuChannels/NavMenuChannels.tsx","assets/images/icons/offline-icon.svg","assets/images/icons/online-icon.svg","services/isOnlineUser.ts","constants.ts","components/NavMenu/NavMenuProfiles/NavMenuProfiles.tsx","assets/images/icons/close-white-icon.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/close-icon.svg","assets/images/icons/gear-icon.svg","assets/images/icons/modify-size-icon.svg","components/PageHeader/PageHeaderSettingsMenu/PageHeaderSettingsMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","components/ProfileForm/ProfileForm.tsx","components/CreateProfileForm/CreateProfileForm.tsx","components/ProfilePicker/useOutsideClickCard.ts","components/ProfilePicker/usePress.ts","assets/images/icons/edit-icon.svg","assets/images/icons/plus.svg","assets/images/icons/trash-icon.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","components/Spinner/Spinner.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","store/typings/selectors.ts","store/selectors.ts","components/Page/Page.tsx","components/App/App.tsx","store/auth/actions.ts","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/channels/reducer.ts","store/profiles/reducer.ts","store/typings/reducer.ts","store/reducers.ts","store/auth/saga.ts","store/auth/watch.ts","components/Firebase/services/generateId.ts","store/channels/saga.ts","store/channels/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/typings/saga.ts","store/typings/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["ChannelsActionsType","ErrorPage","className","alt","src","Background","REDUCER_KEY","TypingsActionsType","channelsSelector","getFp","isPendingSelector","createSelector","channelsLoadedSelector","composeFp","isArrayFp","getAttributeFromChannels","headFp","attribute","getAttributesFromSelectedChannel","channels","selectedChannelId","findFp","channelId","getAttributeFromSelectedChannel","ProfilesActionsType","setStatusTyping","payload","type","setStatusTypingError","useTyping","profileId","profileName","useState","isTyping","setIsTyping","dispatch","useDispatch","useSelector","turnOffTyping","useCallback","debounce","mode","useEffect","getPreparedContent","content","replaceAll","getTypingsWithRemovedItem","typings","selectedProfileId","filter","createChannelError","createChannelsError","sendMessageError","setChannelId","LocalStorageKey","StoragePath","profilesSelector","profilesLoadedSelector","getAttributeFromProfiles","getAttributesFromSelectedProfile","data","getAttributeFromSelectedProfile","ChatInput","forwardRef","ref","updateHeightMessages","channelName","inputRef","useRef","setContent","visibilityPlaceholder","setVisibilityPlaceholder","name","avatarSrc","inputText","current","innerText","trim","turnOnTyping","resetAfterSubmit","contentEditable","onBlur","onFocus","onInput","event","target","innerHTML","suppressContentEditableWarning","onClick","time","Date","getTime","sendMessage","SendIcon","SendDisabledIcon","DAYS_MEANINGS","shouldBeWithZero","value","getFormatedDate","date","getFullYear","getMonth","getDate","dateFromMessage","currentDate","diffDays","Math","round","abs","length","ChatMessages","_","automaticScroll","setAutomaticScroll","messages","scrollTo","top","scrollHeight","behavior","onScroll","maxScrollTop","clientHeight","scrollTop","EmptyMessages","map","index","dangerouslySetInnerHTML","__html","DatabaseColumns","Context","createContext","margin","setMargin","ContextProvider","children","parseInt","localStorage","getItem","marginOffset","Provider","result","setItem","Chat","chatInputRef","messagesRef","useContext","style","height","calculatedHeight","maxHeight","UPDATE_DETAILS","CURRENT_VERSION","ModalNewUpdates","visible","setVisible","savedVersion","version","onClickHandler","setTimeout","Modal","closeAfterTransition","open","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","UpdateIcon","description","Button","variant","Mode","getRefDatabase","path","refDataBase","firebase","database","i","child","useSubscribesDisconnectHandlers","indexProfile","subscribeTypings","onDisconnect","set","subscribeProfile","profiles","createProfileError","uploadImageFinished","OnlineHandler","findIndex","updateTimeProfile","NavMenuCreateChannelForm","closeModal","openNotifiaction","setName","shortcut","setShortcut","isSubmitted","setIsSubmitted","isPending","onSubmit","preventDefault","toUpperCase","createChannel","TextField","onChange","e","label","inputProps","maxLength","color","disabled","size","CircularProgress","NavMenuChannels","closeNavMenu","setOpen","Alert","props","elevation","PlusWhiteIcon","Snackbar","autoHideDuration","severity","isOnlineUser","lastTimeFromSelectedProfile","lastUpdateFromTimeSomeProfile","online","NavMenuProfiles","lastUpdateTime","getIconPath","lastUpdateTimeProfile","OnlineIcon","OfflineIcon","NavMenu","stopPropagation","CloseWhiteIcon","PageHeaderSettingsMenu","anchorEl","setAnchorEl","onClickCloseHandler","currentTarget","GearIcon","Menu","id","keepMounted","Boolean","MenuItem","ModifySizeIcon","CloseIcon","PageHeader","reduce","total","HamburgerMenu","loadImage","setImageData","reader","FileReader","files","onload","file","readAsDataURL","ProfileForm","clickHandler","initialName","imageData","initialImageData","submitHandler","title","BackIcon","backToProfileList","EmptyImage","click","ButtonPicture","CreateProfileForm","restProps","formData","createProfile","useOutsideClickCard","isFocus","setFocus","eventType","isMobile","handleClickOutside","contains","document","addEventListener","removeEventListener","isTouchEvent","touches","usePress","pressHandler","shouldPreventDefault","delay","longPressTriggered","setLongPressTriggered","start","passive","clear","shouldTriggerClick","clearTimeout","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","clearManual","ProfilePicker","cardRef","overlayVisible","setOverlayVisible","isOverlayVisible","restPropsPress","PlusIcon","EditIcon","TrashIcon","AuthActionsType","ProfilePickerList","selectProfile","ProfilePickerSection","listProfiles","setMode","Spinner","PageLoader","visibleContent","setVisibleContent","Gentleman","authSelector","errorMessageSelector","typingsSelector","typingsLoadedSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","channelsData","typingsData","Page","appDataLoaded","get","App","theme","useMemo","createMuiTheme","palette","password","prompt","indexedDB","deleteDatabase","login","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","push","databaseSuccessHandler","response","actions","val","databaseHandler","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","channelsActions","fetchChannelsSuccess","typingsActions","fetchTypingsSuccess","initialState","loginSuccess","state","loginError","createChannelSuccess","fetchChannelsError","createProfileSuccess","fetchProfilesError","setProfileId","fetchTypingsError","reducers","auth","action","createRootReducer","combineReducers","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","generateId","keyId","characters","splice","charAt","floor","random","find","join","select","indexOfChannel","sendMessageSuccess","watchChannels","uploadImage","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","take","selectProfileError","updateTimeProfileError","watchProfiles","watchTypings","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5f98f967.chunk.js","sourcesContent":["// @ts-nocheck\nexport const REDUCER_KEY = 'channels';\n\nexport enum ChannelsActionsType {\n  createChannel = `${REDUCER_KEY}/createChannel`,\n  createChannelSuccess = `${REDUCER_KEY}/createChannelSuccess`,\n  createChannelsError = `${REDUCER_KEY}/createChannelsError`,\n  fetchChannelsSuccess = `${REDUCER_KEY}/fetchChannelsSuccess`,\n  fetchChannelsError = `${REDUCER_KEY}/fetchChannelsError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  sendMessage = `${REDUCER_KEY}/sendMessage`,\n  sendMessageSuccess = `${REDUCER_KEY}/sendMessageSuccess`,\n  sendMessageError = `${REDUCER_KEY}/sendMessageError`,\n  setChannelId = `${REDUCER_KEY}/setChannelId`,\n  setStatusTyping = `${REDUCER_KEY}/setStatusTyping`,\n  setStatusTypingError = `${REDUCER_KEY}/setStatusTypingError`,\n}\n","export default __webpack_public_path__ + \"static/media/error.aee84ee0.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Background from '../../assets/images/backgrounds/error.svg';\n\n// styles\nimport './error-page-styles.scss';\n\nconst ErrorPage: FunctionComponent = () => (\n  <section className=\"ErrorPage\">\n    <img\n      alt=\"background-error\"\n      className=\"ErrorPage__background\"\n      src={Background}\n    />\n  </section>\n);\n\nexport default ErrorPage;\n","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport headFp from 'lodash/head';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TChannel, TChannelsState } from './types';\n\nexport const channelsSelector: Selector<TMainState, TChannelsState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(channelsSelector, getFp('isPending'));\n\nexport const channelsLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(channelsSelector, composeFp(isArrayFp, getFp('channels')));\n\nexport const getDefaultChannelId: Selector<TMainState, TChannel> =\n  createSelector(\n    channelsSelector,\n    composeFp(getFp('channelId'), headFp, getFp('channels'))\n  );\n\nexport const getAttributeFromChannels = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(channelsSelector, getFp(attribute));\n\n// @ts-ignore\nexport const getAttributesFromSelectedChannel: Selector<TMainState, TChannel> =\n  createSelector(channelsSelector, ({ channels, selectedChannelId }) =>\n    findFp(({ channelId }) => channelId === selectedChannelId, channels)\n  );\n\nexport const getAttributeFromSelectedChannel = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(getAttributesFromSelectedChannel, getFp(attribute));\n","// @ts-nocheck\nexport const REDUCER_KEY = 'typings';\n\nexport enum TypingsActionsType {\n  fetchTypingsSuccess = `${REDUCER_KEY}/fetchTypingsSuccess`,\n  fetchTypingsError = `${REDUCER_KEY}/fetchTypingsError`,\n  setStatusTyping = `${REDUCER_KEY}/setStatusTyping`,\n  setStatusTypingError = `${REDUCER_KEY}/setStatusTypingError`,\n}\n","// others\nimport {\n  TFetchTypingsSuccess,\n  TFetchTypingsError,\n  TSetStatusTyping,\n  TSetStatusTypingError,\n  TTyping,\n} from './types';\n\n// store\nimport { TypingsActionsType } from './actionsType';\n\nexport const fetchTypingsSuccess = (\n  payload: Array<TTyping>\n): TFetchTypingsSuccess => ({\n  type: TypingsActionsType.fetchTypingsSuccess,\n  payload,\n});\n\nexport const fetchTypingsError = (): TFetchTypingsError => ({\n  type: TypingsActionsType.fetchTypingsError,\n});\n\nexport const setStatusTyping = (\n  payload: TTyping & { mode: 'add' | 'remove' }\n): TSetStatusTyping => ({\n  type: TypingsActionsType.setStatusTyping,\n  payload,\n});\n\nexport const setStatusTypingError = (\n  payload: string\n): TSetStatusTypingError => ({\n  type: TypingsActionsType.setStatusTyping,\n  payload,\n});\n","// @ts-nocheck\nexport const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  createProfile = `${REDUCER_KEY}/createProfile`,\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  selectProfile = `${REDUCER_KEY}/selectProfile`,\n  selectProfileError = `${REDUCER_KEY}/selectProfileError`,\n  updateTimeProfile = `${REDUCER_KEY}/updateTimeProfile`,\n  updateTimeProfileError = `${REDUCER_KEY}/updateTimeProfileError`,\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport debounce from 'lodash/debounce';\n\n// store\nimport { getAttributeFromChannels } from '../../../store/channels/selectors';\nimport { setStatusTyping } from '../../../store/typings/actions';\n\nconst useTyping = (profileId: string, profileName: string) => {\n  const [isTyping, setIsTyping] = useState(false);\n  const dispatch = useDispatch();\n  const channelId = useSelector(getAttributeFromChannels('selectedChannelId'));\n  const payload = {\n    profileId,\n    profileName,\n    channelId,\n  };\n\n  // eslint-disable-next-line\n  const turnOffTyping = useCallback(\n    debounce(() => {\n      setIsTyping(false);\n      dispatch(setStatusTyping({ ...payload, mode: 'remove' }));\n    }, 1000),\n    []\n  );\n\n  const turnOnTyping = () => {\n    if (!isTyping) {\n      setIsTyping(true);\n      dispatch(\n        setStatusTyping({\n          ...payload,\n          mode: 'add',\n        })\n      );\n    }\n    turnOffTyping();\n  };\n\n  useEffect(() => {\n    dispatch(setStatusTyping({ ...payload, mode: 'remove' }));\n    // eslint-disable-next-line\n  }, []);\n\n  return turnOnTyping;\n};\n\nexport default useTyping;\n","export default __webpack_public_path__ + \"static/media/send-icon.2dc21fc0.svg\";","export default __webpack_public_path__ + \"static/media/send-disabled-icon.53fba88d.svg\";","import { TTyping } from '../../../store/channels/types';\n\nexport const getPreparedContent = (content: string) =>\n  content.replaceAll(\n    '<div><br></div>',\n    `<div class=\"ChatMessages__break-line\"><br></div>`\n  );\n\nexport const getTypingsWithRemovedItem = (\n  typings: Array<TTyping>,\n  selectedProfileId: string\n) => typings.filter(({ profileId }) => profileId !== selectedProfileId);\n","// others\nimport {\n  TChannel,\n  TCreateChannel,\n  TCreateChannelError,\n  TCreateChannelSuccess,\n  TFetchChannelsError,\n  TFetchChannelsSuccess,\n  TMessage,\n  TSendMessage,\n  TSendMessageError,\n  TSendMessageSuccess,\n  TSetChannelId,\n  TSetStatusTyping,\n  TSetStatusTypingError,\n  TTyping,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\n\nexport const createChannel = (\n  payload: Omit<TChannel, 'chanelId' | 'messages'>\n): TCreateChannel => ({\n  type: ChannelsActionsType.createChannel,\n  payload,\n});\n\nexport const createChannelSuccess = (): TCreateChannelSuccess => ({\n  type: ChannelsActionsType.createChannelSuccess,\n});\n\nexport const createChannelError = (payload: string): TCreateChannelError => ({\n  type: ChannelsActionsType.createChannelsError,\n  payload,\n});\n\nexport const fetchChannelsSuccess = (\n  payload: Array<TChannel>\n): TFetchChannelsSuccess => ({\n  type: ChannelsActionsType.fetchChannelsSuccess,\n  payload,\n});\n\nexport const fetchChannelsError = (): TFetchChannelsError => ({\n  type: ChannelsActionsType.fetchChannelsError,\n});\n\nexport const sendMessage = (payload: TMessage): TSendMessage => ({\n  type: ChannelsActionsType.sendMessage,\n  payload,\n});\n\nexport const sendMessageSuccess = (): TSendMessageSuccess => ({\n  type: ChannelsActionsType.sendMessageSuccess,\n});\n\nexport const sendMessageError = (payload: string): TSendMessageError => ({\n  type: ChannelsActionsType.sendMessageError,\n  payload,\n});\n\nexport const setChannelId = (payload: string): TSetChannelId => ({\n  type: ChannelsActionsType.setChannelId,\n  payload,\n});\n\nexport const setStatusTyping = (\n  payload: TTyping & { mode: 'add' | 'remove' }\n): TSetStatusTyping => ({\n  type: ChannelsActionsType.setStatusTyping,\n  payload,\n});\n\nexport const setStatusTypingError = (\n  payload: string\n): TSetStatusTypingError => ({\n  type: ChannelsActionsType.setStatusTyping,\n  payload,\n});\n","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TProfile, TProfilesState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(profilesSelector, getFp('isPending'));\n\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\n\nexport const getAttributeFromProfiles = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(profilesSelector, getFp(attribute));\n\n// @ts-ignore\nexport const getAttributesFromSelectedProfile: Selector<TMainState, TProfile> =\n  createSelector(profilesSelector, ({ data, selectedProfileId }) =>\n    findFp(({ profileId }) => profileId === selectedProfileId, data)\n  );\n\nexport const getAttributeFromSelectedProfile = (\n  attribute: string\n): Selector<TMainState, TProfile> =>\n  createSelector(getAttributesFromSelectedProfile, getFp(attribute));\n","export enum LocalStorageKey {\n  marginOffset = 'MARGIN_OFFSET',\n  version = 'VERSION',\n}\n\nexport enum StoragePath {\n  profiles = 'PROFILES',\n}\n","// @ts-nocheck\nimport {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n  useRef,\n  useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// hooks\nimport useTyping from './useTyping';\n\n// others\nimport SendIcon from '../../../assets/images/icons/send-icon.svg';\nimport SendDisabledIcon from '../../../assets/images/icons/send-disabled-icon.svg';\nimport { TProfile } from '../../../store/profiles/types';\n\n// services\nimport { getPreparedContent } from './services';\n\n// store\nimport { sendMessage } from '../../../store/channels/actions';\nimport { getAttributesFromSelectedProfile } from '../../../store/profiles/selectors';\n\n// styles\nimport './chat-input-styles.scss';\n\ntype TProps = {\n  channelName: string;\n  updateHeightMessages: () => void;\n};\n\nconst ChatInput: ForwardRefExoticComponent<\n  TProps & RefAttributes<HTMLDivElement>\n> = forwardRef<HTMLDivElement, TProps>(\n  ({ updateHeightMessages, channelName }, ref) => {\n    const dispatch = useDispatch();\n    const inputRef = useRef(null);\n    const [content, setContent] = useState('');\n    const [visibilityPlaceholder, setVisibilityPlaceholder] = useState(true);\n    const {\n      name: profileName,\n      src: avatarSrc,\n      profileId,\n    }: TProfile = useSelector(getAttributesFromSelectedProfile);\n    const inputText = inputRef.current?.innerText.trim() || '';\n    const turnOnTyping = useTyping(profileId, profileName);\n\n    const onBlurHandler = (): void => {\n      if (!inputText) {\n        setVisibilityPlaceholder(true);\n      }\n    };\n\n    const onInputHandler = (event: Event): void => {\n      const { target } = event;\n\n      turnOnTyping();\n      setContent(target.innerHTML);\n      updateHeightMessages();\n    };\n    // eslint-disable-next-line\n\n    const onSubmitHandler = () => {\n      if (content) {\n        dispatch(\n          sendMessage({\n            avatarSrc,\n            content: getPreparedContent(content),\n            profileName,\n            profileId,\n            time: new Date().getTime(),\n          })\n        );\n        resetAfterSubmit();\n      }\n    };\n\n    const resetAfterSubmit = () => {\n      inputRef.current.innerText = '';\n\n      updateHeightMessages();\n      setContent('');\n      setVisibilityPlaceholder(true);\n    };\n\n    return (\n      <div className=\"ChatInput\" ref={ref}>\n        <p\n          className=\"ChatInput__text-field\"\n          contentEditable={true}\n          onBlur={onBlurHandler}\n          onFocus={() => setVisibilityPlaceholder(false)}\n          onInput={onInputHandler}\n          ref={inputRef}\n          suppressContentEditableWarning\n        />\n        {visibilityPlaceholder && (\n          <span className=\"ChatInput__placeholder\">\n            Message #{channelName}:\n          </span>\n        )}\n        <img\n          alt=\"send-icon\"\n          className=\"ChatInput__send-icon\"\n          onClick={onSubmitHandler}\n          src={inputText ? SendIcon : SendDisabledIcon}\n        />\n      </div>\n    );\n  }\n);\n\nexport default ChatInput;\n","export default __webpack_public_path__ + \"static/media/empty-messages.285e086d.svg\";","export const DAYS_MEANINGS = ['Today', 'Yesterday'];\n","// @ts-nocheck\n// others\nimport { DAYS_MEANINGS } from './constants';\n\nconst oneDay = 24 * 60 * 60 * 1000;\n\nconst shouldBeWithZero = (value: number): string =>\n  value < 10 ? `0${value}` : value;\n\nconst getFormatedDate = (date: Date): string =>\n  `${date.getFullYear()}-${shouldBeWithZero(\n    date.getMonth() + 1\n  )}-${shouldBeWithZero(date.getDate())}`;\n\nexport const getDate = (time: number): string => {\n  const dateFromMessage = new Date(getFormatedDate(new Date(time)));\n  const currentDate = new Date(getFormatedDate(new Date()));\n  const diffDays = Math.round(\n    Math.abs((currentDate - dateFromMessage) / oneDay)\n  );\n\n  return diffDays < DAYS_MEANINGS.length\n    ? DAYS_MEANINGS[diffDays]\n    : getFormatedDate(new Date(time));\n};\n","// @ts-nocheck\nimport {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n  useEffect,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport EmptyMessages from '../../../assets/images/backgrounds/empty-messages.svg';\nimport { TMessage } from '../../../store/channels/types';\n\n// services\nimport { getDate } from './services';\n\n// store\nimport {\n  getAttributeFromChannels,\n  getAttributeFromSelectedChannel,\n} from '../../../store/channels/selectors';\n\n// styles\nimport './chat-messages-styles.scss';\n\nconst ChatMessages: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>> =\n  forwardRef<HTMLDivElement, {}>((_, ref) => {\n    const [automaticScroll, setAutomaticScroll] = useState(true);\n    const selectedChannelId = useSelector(\n      getAttributeFromChannels('selectedChannelId')\n    );\n    // eslint-disable-next-line\n    const messages: Array<TMessage> =\n      useSelector(getAttributeFromSelectedChannel('messages')) || [];\n\n    const onScrollHandler = () => {\n      const { current } = ref;\n      const maxScrollTop = current.scrollHeight - current.clientHeight;\n\n      if (current.scrollTop === maxScrollTop) {\n        setAutomaticScroll(true);\n      } else {\n        setAutomaticScroll(false);\n      }\n    };\n\n    useEffect(() => {\n      const { current } = ref;\n      if (automaticScroll) {\n        current.scrollTo({ top: current.scrollHeight, behavior: 'smooth' });\n      }\n      // eslint-disable-next-line\n    }, [messages, ref]);\n\n    useEffect(() => {\n      const { current } = ref;\n      current.scrollTo({ top: current.scrollHeight, behavior: 'smooth' });\n      setAutomaticScroll(true);\n      // eslint-disable-next-line\n    }, [selectedChannelId]);\n\n    return (\n      <section className=\"ChatMessages\" onScroll={onScrollHandler} ref={ref}>\n        {messages.length === 0 ? (\n          <div className=\"ChatMessages__empty\">\n            <img alt=\"empty-messages\" src={EmptyMessages} />\n            <p className=\"ChatMessages__suggestion\">\n              No messages! You can start a conversation on this channel.\n            </p>\n          </div>\n        ) : (\n          messages.map(({ avatarSrc, content, profileName, time }, index) => (\n            <div className=\"ChatMessages__wrapper\" key={index}>\n              <img\n                alt=\"avatar\"\n                className=\"ChatMessages__avatar\"\n                src={avatarSrc}\n              />\n              <div className=\"ChatMessages__content\">\n                <p className=\"ChatMessages__profile-name\">\n                  <b>{profileName}</b> {getDate(time)}\n                </p>\n                <p\n                  className=\"ChatMessages__content\"\n                  dangerouslySetInnerHTML={{ __html: content }}\n                />\n              </div>\n            </div>\n          ))\n        )}\n      </section>\n    );\n  });\n\nexport default ChatMessages;\n","// @ts-nocheck\nimport { createContext, FunctionComponent, ReactNode, useState } from 'react';\n\n// other\nimport { LocalStorageKey } from '../../enums';\n\ntype TProps = {\n  children: ReactNode;\n};\n\nexport const Context: React.Context<any> = createContext({\n  margin: 0,\n  setMargin: () => {},\n});\n\nconst getMarginFromLocalStorage = (): number =>\n  parseInt(localStorage.getItem(LocalStorageKey.marginOffset) || 0);\n\nconst ContextProvider: FunctionComponent<TProps> = ({ children }) => {\n  const [margin, setMargin] = useState(getMarginFromLocalStorage());\n\n  const setMarginHandler = (value: number): void => {\n    const result = margin + value;\n\n    if (margin > 0 || value !== -1) {\n      setMargin(result);\n      localStorage.setItem(LocalStorageKey.marginOffset, result);\n    }\n  };\n\n  return (\n    <Context.Provider value={{ margin, setMargin: setMarginHandler }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n  channels = 'channels',\n  typings = 'typings',\n}\n","// @ts-nocheck\nimport { FunctionComponent, useContext, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport ChatInput from './ChatInput/ChatInput';\nimport ChatMessages from './ChatMessages/ChatMessages';\n\n// core\nimport { Context } from '../../core/ContextProvider/ContextProvider';\n\n// others\nimport { TContext } from '../../core/ContextProvider/types';\n\n// store\nimport { getAttributeFromSelectedChannel } from '../../store/channels/selectors';\n\n// styles\nimport './chat-styles.scss';\n\nconst Chat: FunctionComponent<{}> = () => {\n  const chatInputRef = useRef(null);\n  const messagesRef = useRef(null);\n  const name = useSelector(getAttributeFromSelectedChannel('name'));\n  const { margin }: TContext = useContext(Context);\n\n  const updateHeightMessages = (): void => {\n    const height = chatInputRef.current.clientHeight;\n    const calculatedHeight = `calc(100% - ${height}px)`;\n\n    messagesRef.current.style.height = calculatedHeight;\n    messagesRef.current.style.maxHeight = calculatedHeight;\n  };\n\n  return (\n    <section\n      className=\"Chat\"\n      style={{ height: `calc(100vh - ${80 + margin}px)` }}\n    >\n      <ChatMessages ref={messagesRef} />\n      <ChatInput\n        channelName={name}\n        ref={chatInputRef}\n        updateHeightMessages={updateHeightMessages}\n      />\n    </section>\n  );\n};\n\nexport default Chat;\n","export default __webpack_public_path__ + \"static/media/update-icon.82e7731f.svg\";","export const UPDATE_DETAILS = [\n  'Application access by password',\n  'Ability to create profiles',\n  'Ability to create channels',\n  'Status of active brothers-in-law',\n  'Application adapted to all devices',\n  'Ability to write on the channel',\n  'Status on the number of active brothers-in-law',\n  'Ability to send messages',\n  'Determination of date of last message',\n];\nexport const CURRENT_VERSION = '1.0.0';\n","import { FunctionComponent, useEffect, useState } from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Button from '@material-ui/core/Button';\nimport Fade from '@material-ui/core/Fade';\nimport Modal from '@material-ui/core/Modal';\n\n// others\nimport UpdateIcon from '../../assets/images/icons/update-icon.svg';\nimport { UPDATE_DETAILS, CURRENT_VERSION } from './constants';\nimport { LocalStorageKey } from '../../enums';\n\n// styles\nimport './modal-new-updates-styles.scss';\n\nconst ModalNewUpdates: FunctionComponent = () => {\n  const [visible, setVisible] = useState(false);\n  const savedVersion = localStorage.getItem(LocalStorageKey.version) || '';\n\n  const onClickHandler = (): void => {\n    localStorage.setItem(LocalStorageKey.version, CURRENT_VERSION);\n    setVisible(false);\n  };\n\n  useEffect(() => {\n    if (savedVersion !== CURRENT_VERSION) {\n      setTimeout(() => {\n        setVisible(true);\n      }, 1000);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Modal\n      className=\"ModalNewUpdates\"\n      closeAfterTransition\n      open={visible}\n      onClose={onClickHandler}\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={visible}>\n        <div className=\"ModalNewUpdates__container\">\n          <div className=\"ModalNewUpdates__wrapper\">\n            {/* ICON */}\n            <div className=\"ModalNewUpdates__icon\">\n              <img alt=\"update-icon\" src={UpdateIcon} />\n            </div>\n\n            {/* DETAILS */}\n            <div className=\"ModalNewUpdates__content\">\n              <h4 className=\"ModalNewUpdates__title\">\n                New Update: {CURRENT_VERSION}\n              </h4>\n              <ul className=\"ModalNewUpdates__details\">\n                {UPDATE_DETAILS.map((description) => (\n                  <li className=\"ModalNewUpdates__item\" key={description}>\n                    <p className=\"ModalNewUpdates__description\">\n                      {description}.\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          <Button\n            className=\"ModalNewUpdates__submit\"\n            onClick={onClickHandler}\n            variant=\"outlined\"\n          >\n            Understand\n          </Button>\n        </div>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default ModalNewUpdates;\n","export enum Mode {\n  createProfile = 'createProfile',\n  listProfiles = 'listProfiles',\n}\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\nimport { useSelector } from 'react-redux';\n\n// others\nimport { DatabaseColumns } from '../Firebase/enums';\n\n// services\nimport getRefDatabase from '../Firebase/services/getRefDatabase';\nimport { getTypingsWithRemovedItem } from '../Chat/ChatInput/services';\n\n// store\nimport { getAttributeFromSelectedChannel } from '../../store/channels/selectors';\n\nconst useSubscribesDisconnectHandlers = (\n  indexProfile: number,\n  selectedProfileId: string\n) => {\n  const typings = useSelector(getAttributeFromSelectedChannel('typings')) || [];\n\n  const subscribeProfile = () =>\n    getRefDatabase([DatabaseColumns.profiles, indexProfile, 'online'])\n      .onDisconnect()\n      .set(false);\n\n  const subscribeTypings = () =>\n    getRefDatabase([DatabaseColumns.typings])\n      .onDisconnect()\n      .set(getTypingsWithRemovedItem(typings, selectedProfileId));\n\n  return {\n    subscribeTypings,\n    subscribeProfile,\n  };\n};\n\nexport default useSubscribesDisconnectHandlers;\n","import { TUpdateTimeProfileError } from './types';\n// others\nimport { TReturnablePayload } from './../common/types';\nimport {\n  TCreateProfile,\n  TCreateProfileSuccess,\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TFetchProfilesError,\n  TProfile,\n  TProfileFormData,\n  TUploadImageFinished,\n  TSelectProfile,\n  TSelectProfileError,\n  TUpdateTimeProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\n\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\n  type: ProfilesActionsType.createProfile,\n  payload,\n});\n\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\n  type: ProfilesActionsType.createProfileSuccess,\n});\n\nexport const createProfileError = (payload: string): TCreateProfileError => ({\n  type: ProfilesActionsType.createProfileError,\n  payload,\n});\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n\nexport const uploadImageFinished = (\n  payload: TReturnablePayload\n): TUploadImageFinished => ({\n  type: ProfilesActionsType.uploadImageFinished,\n  payload,\n});\n\nexport const selectProfile = (payload: string): TSelectProfile => ({\n  type: ProfilesActionsType.selectProfile,\n  payload,\n});\n\nexport const selectProfileError = (payload: string): TSelectProfileError => ({\n  type: ProfilesActionsType.selectProfileError,\n  payload,\n});\n\nexport const updateTimeProfile = (payload: string): TUpdateTimeProfile => ({\n  type: ProfilesActionsType.updateTimeProfile,\n  payload,\n});\n\nexport const updateTimeProfileError = (\n  payload: string\n): TUpdateTimeProfileError => ({\n  type: ProfilesActionsType.updateTimeProfileError,\n  payload,\n});\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// hooks\nimport useSubscribesDisconnectHandlers from './useSubscribesOnDisconnectHandlers';\n\n// others\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { updateTimeProfile } from '../../store/profiles/actions';\n\nconst OnlineHandler: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const indexProfile = profiles.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  const { subscribeTypings, subscribeProfile } =\n    useSubscribesDisconnectHandlers(indexProfile, selectedProfileId);\n\n  useEffect(() => {\n    subscribeProfile();\n    subscribeTypings();\n    dispatch(updateTimeProfile(selectedProfileId));\n    // eslint-disable-next-line\n  }, []);\n\n  return null;\n};\n\nexport default OnlineHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// store\nimport { createChannel } from '../../../store/channels/actions';\nimport { isPendingSelector } from '../../../store/channels/selectors';\n\n// styles\nimport './nav-menu-create-channel-form-styles.scss';\n\ntype TProps = {\n  closeModal: () => void;\n  openNotifiaction: () => void;\n};\n\nconst NavMenuCreateChannelForm: FunctionComponent<TProps> = ({\n  closeModal,\n  openNotifiaction,\n}) => {\n  const [name, setName] = useState('');\n  const [shortcut, setShortcut] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n\n  const onSubmitHandler = (event: Event): void => {\n    event.preventDefault();\n\n    if (name && shortcut) {\n      dispatch(createChannel({ name, shortcut: shortcut.toUpperCase() }));\n      setIsSubmitted(true);\n    }\n  };\n\n  useEffect(() => {\n    if (!isPending && isSubmitted) {\n      closeModal();\n      openNotifiaction();\n    }\n    // eslint-disable-next-line\n  }, [isPending, isSubmitted]);\n\n  return (\n    <form className=\"NavMenuCreateChannelForm\" onSubmit={onSubmitHandler}>\n      <h2>Create channel:</h2>\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setName(e.target.value)}\n        label=\"Channel name:\"\n        value={name}\n      />\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setShortcut(e.target.value)}\n        label=\"Shortcut channel name eg. (ME):\"\n        inputProps={{ maxLength: 2 }}\n        value={shortcut}\n      />\n      <Button\n        className=\"ProfileForm__submit-button\"\n        color=\"primary\"\n        disabled={isPending}\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n      >\n        Create Channel\n        {isPending && (\n          <CircularProgress\n            className=\"ProfileForm__spinner\"\n            color=\"primary\"\n            size={20}\n          />\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default NavMenuCreateChannelForm;\n","export default __webpack_public_path__ + \"static/media/plus-white-icon.f41cd2c2.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n// components\nimport NavMenuCreateChannelForm from '../NavMenuCreateChannelForm/NavMenuCreateChannelForm';\n\n// others\nimport PlusWhiteIcon from '../../../assets/images/icons/plus-white-icon.svg';\nimport { TChannel } from '../../../store/channels/types';\n\n// store\nimport { getAttributeFromChannels } from '../../../store/channels/selectors';\nimport { setChannelId } from '../../../store/channels/actions';\n\n// styles\nimport './nav-menu-channels-styles.scss';\n\ntype TProps = {\n  closeNavMenu: () => void;\n};\n\nconst NavMenuChannels: FunctionComponent<TProps> = ({ closeNavMenu }) => {\n  const [open, setOpen] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const dispatch = useDispatch();\n  const channels: Array<TChannel> = useSelector(\n    getAttributeFromChannels('channels')\n  );\n\n  const Alert = (props: AlertProps) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  };\n\n  const onClickHandler = (channelId: string): void => {\n    closeNavMenu();\n    dispatch(setChannelId(channelId));\n  };\n\n  return (\n    <div className=\"NavMenuChannels\">\n      {/* NAV */}\n      <div className=\"NavMenuChannels__nav\">\n        <p className=\"NavMenuChannels__title\">Channels</p>\n        <img\n          alt=\"plus-white-icon\"\n          className=\"NavMenuChannels__button\"\n          onClick={() => setVisible(true)}\n          src={PlusWhiteIcon}\n        />\n      </div>\n      {/* CHANNELS */}\n      <div className=\"NavMenuChannels__channels\">\n        {channels.map(({ channelId, name }) => (\n          <p\n            className=\"NavMenuChannels__channel-name\"\n            key={channelId}\n            onClick={() => onClickHandler(channelId)}\n          >\n            #{name}\n          </p>\n        ))}\n      </div>\n\n      {/* MODAL */}\n      <Modal\n        className=\"NavMenuChannels__modal\"\n        closeAfterTransition\n        open={visible}\n        onClose={() => setVisible(false)}\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={visible}>\n          <div className=\"NavMenuChannels__card\">\n            <NavMenuCreateChannelForm\n              closeModal={() => setVisible(false)}\n              openNotifiaction={() => setOpen(true)}\n            />\n          </div>\n        </Fade>\n      </Modal>\n\n      {/* NOTIFICATION */}\n      <Snackbar\n        open={open}\n        className=\"NavMenuChannels__snackbar\"\n        autoHideDuration={5000}\n        onClose={() => setOpen(false)}\n      >\n        <Alert onClose={() => setOpen(false)} severity=\"success\">\n          Channel has been added!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default NavMenuChannels;\n","export default __webpack_public_path__ + \"static/media/offline-icon.328c273c.svg\";","export default __webpack_public_path__ + \"static/media/online-icon.cd9ad327.svg\";","// others\nimport { TIME_TO_COMPARE } from '../constants';\n\nconst isOnlineUser = (\n  lastTimeFromSelectedProfile: number,\n  lastUpdateFromTimeSomeProfile: number,\n  online: boolean\n): boolean =>\n  online &&\n  lastTimeFromSelectedProfile - lastUpdateFromTimeSomeProfile < TIME_TO_COMPARE;\n\nexport default isOnlineUser;\n","export const EMAIL = 'eryk.sandecki@gmail.com';\nexport const UPDATE_DELAY_TIME = 60000;\nexport const TIME_TO_COMPARE = 90000;\n","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport OfflineIcon from '../../../assets/images/icons/offline-icon.svg';\nimport OnlineIcon from '../../../assets/images/icons/online-icon.svg';\nimport { TProfile } from '../../../store/profiles/types';\n\n// services\nimport isOnlineUser from '../../../services/isOnlineUser';\n\n// store\nimport {\n  getAttributeFromProfiles,\n  getAttributeFromSelectedProfile,\n} from '../../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-profiles-styles.scss';\n\nconst NavMenuProfiles: FunctionComponent = () => {\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n\n  //@ts-ignore\n  const lastUpdateTime: number = useSelector(\n    getAttributeFromSelectedProfile('lastUpdateTime')\n  );\n\n  const getIconPath = (\n    lastUpdateTimeProfile: number,\n    online: boolean\n  ): string => {\n    if (isOnlineUser(lastUpdateTime, lastUpdateTimeProfile, online)) {\n      return OnlineIcon;\n    }\n    return OfflineIcon;\n  };\n\n  return (\n    <div className=\"NavMenuProfiles\">\n      {/* HEADER */}\n      <div className=\"NavMenuProfiles__header\">\n        <p className=\"NavMenuProfiles__title\">Brothers-in-law</p>\n      </div>\n\n      {/* USERS */}\n      <div className=\"NavMenuProfiles__profiles\">\n        {profiles\n          .filter(({ profileId }) => profileId !== selectedProfileId)\n          .map(({ lastUpdateTime, name, online, profileId, src }) => (\n            <div className=\"NavMenuProfiles__profile\" key={profileId}>\n              <img\n                alt={profileId}\n                className=\"NavMenuProfiles__avatar\"\n                src={src}\n              />\n              <img\n                alt=\"status-icon\"\n                className=\"NavMenuProfiles__status\"\n                src={getIconPath(lastUpdateTime, online)}\n              />\n              <p className=\"NavMenuProfiles__name\" key={profileId}>\n                {name}\n              </p>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenuProfiles;\n","export default __webpack_public_path__ + \"static/media/close-white-icon.c6df9cb2.svg\";","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenuChannels from './NavMenuChannels/NavMenuChannels';\nimport NavMenuProfiles from './NavMenuProfiles/NavMenuProfiles';\n\n// others\nimport CloseWhiteIcon from '../../assets/images/icons/close-white-icon.svg';\n\n// store\nimport { getAttributesFromSelectedProfile } from '../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n  const { name, src } = useSelector(getAttributesFromSelectedProfile);\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      {/* BACKGROUND */}\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n\n      {/* CONTAINER */}\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* HEADER */}\n        <div className=\"NavMenu__header\">\n          <div className=\"NavMenu__profile-data\">\n            <img\n              alt=\"profile-avatar\"\n              className=\"NavMenu__profile-avatar\"\n              src={src}\n            />\n            <p className=\"NavMenu__profile-name\">{name}</p>\n          </div>\n          <img\n            alt=\"close-white-icon\"\n            className=\"NavMenu__button-close\"\n            onClick={onClickHandler}\n            src={CloseWhiteIcon}\n          />\n        </div>\n\n        {/* CONTENT */}\n        <div className=\"NavMenu__content\">\n          <NavMenuChannels closeNavMenu={onClickHandler} />\n          <NavMenuProfiles />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/close-icon.51d90ac8.svg\";","export default __webpack_public_path__ + \"static/media/gear-icon.7598d1ce.svg\";","export default __webpack_public_path__ + \"static/media/modify-size-icon.54599b76.svg\";","// @ts-nocheck\nimport { FunctionComponent, useContext, useState } from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// core\nimport { Context } from '../../../core/ContextProvider/ContextProvider';\n\n// others\nimport CloseIcon from '../../../assets/images/icons/close-icon.svg';\nimport GearIcon from '../../../assets/images/icons/gear-icon.svg';\nimport ModifySizeIcon from '../../../assets/images/icons/modify-size-icon.svg';\nimport { TContext } from '../../../core/ContextProvider/types';\n\n// styles\nimport './page-header-settings-menu-styles.scss';\n\nconst PageHeaderSettingsMenu: FunctionComponent<{}> = () => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { setMargin }: TContext = useContext(Context);\n  const onClickOpenHandler = (event: Event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onClickCloseHandler = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className=\"PageHeaderSettingsMenu\">\n      <img alt=\"gear-icon\" onClick={onClickOpenHandler} src={GearIcon} />\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClickCloseHandler}\n      >\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(1)}\n        >\n          Up\n          <img alt=\"gear-icon\" src={ModifySizeIcon} />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(-1)}\n        >\n          Down\n          <img\n            alt=\"reverted-gear-icon\"\n            className=\"PageHeaderSettingsMenu__icon-rotate\"\n            src={ModifySizeIcon}\n          />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={onClickCloseHandler}\n        >\n          Close\n          <img alt=\"close-icon\" src={CloseIcon} />\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\nexport default PageHeaderSettingsMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.4f615ee5.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\nimport PageHeaderSettingsMenu from './PageHeaderSettingsMenu/PageHeaderSettingsMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\nimport { TChannel } from '../../store/channels/types';\nimport { TProfile } from '../../store/profiles/types';\n\n// services\nimport isOnlineUser from '../../services/isOnlineUser';\n\n// store\nimport { getAttributesFromSelectedChannel } from '../../store/channels/selectors';\nimport {\n  getAttributeFromProfiles,\n  getAttributeFromSelectedProfile,\n} from '../../store/profiles/selectors';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n  const { name, shortcut }: TChannel = useSelector(\n    getAttributesFromSelectedChannel\n  );\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n\n  //@ts-ignore\n  const lastUpdateTime: number = useSelector(\n    getAttributeFromSelectedProfile('lastUpdateTime')\n  );\n\n  const getNumberOfUsersOnline = (): number =>\n    profiles\n      .filter(({ profileId }) => profileId !== selectedProfileId)\n      .reduce(\n        (total, { lastUpdateTime: lastUpdateTimeProfile, online }) =>\n          isOnlineUser(lastUpdateTime, lastUpdateTimeProfile, online)\n            ? ++total\n            : total,\n        0\n      );\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__left-column\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">{shortcut}</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">#{name}</p>\n          <p className=\"PageHeader__users\">\n            {getNumberOfUsersOnline()} Brothers online\n          </p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <div className=\"PageHeader__right-column\">\n        <PageHeaderSettingsMenu />\n        <img\n          alt=\"hamburger-menu\"\n          className=\"PageHeader__hamburger-menu\"\n          onClick={() => setVisible(true)}\n          src={HamburgerMenu}\n        />\n      </div>\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/back.3f83d067.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.7e1048a6.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.16de0a9b.svg\";","// @ts-nocheck\n// others\n\nconst loadImage = (\n  event: Event,\n  setImageData: (file: string | ArrayBuffer | null) => void\n) => {\n  const reader = new FileReader();\n  const { files } = event.target;\n\n  reader.onload = (e) => {\n    setImageData({\n      file: files[0],\n      src: e.target.result,\n    });\n  };\n\n  reader.readAsDataURL(files[0]);\n};\n\nexport default loadImage;\n","// @ts-nocheck\nimport { FunctionComponent, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// others\nimport BackIcon from '../../assets/images/icons/back.svg';\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\nimport { TImageData } from '../../types';\nimport { TProfileFormData } from '../../store/profiles/types';\n\n// services\nimport loadImage from './services/loadImage';\n\n// store\nimport { isPendingSelector } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-form-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  name?: string;\n  imageData?: TImageData;\n  submitHandler: (formData: TProfileFormData) => void;\n  title: string;\n};\n\nconst ProfileForm: FunctionComponent<TProps> = ({\n  clickHandler,\n  name: initialName = '',\n  imageData: initialImageData = null,\n  submitHandler,\n  title,\n}) => {\n  const isPending = useSelector(isPendingSelector);\n  const inputRef = useRef(null);\n  const [imageData, setImageData] = useState(initialImageData);\n  const [name, setName] = useState(initialName);\n\n  const onSubmitHandler = (event: Event) => {\n    event.preventDefault();\n\n    if (imageData && name) {\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\n    }\n  };\n\n  return (\n    <div className=\"ProfileForm__form-wrapper\">\n      <h2 className=\"ProfileForm__title\">\n        <img\n          alt=\"back-icon\"\n          className=\"ProfileForm__icon\"\n          onClick={clickHandler}\n          src={BackIcon}\n        />\n        {title}\n      </h2>\n\n      {/* FORM */}\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\n        {/* AVATAR */}\n        <div\n          className={`ProfileForm__avatar ${\n            imageData ? 'ProfileForm__avatar--selected' : ''\n          }`}\n        >\n          {imageData ? (\n            <img\n              alt=\"avatar\"\n              className=\"ProfileForm__image\"\n              src={imageData.src}\n            />\n          ) : (\n            <img\n              alt=\"empty\"\n              className=\"ProfileForm__empty-picture\"\n              src={EmptyImage}\n            />\n          )}\n\n          {/* BUTTON */}\n          <img\n            alt=\"button-icon\"\n            className=\"ProfileForm__button-picture\"\n            onClick={() => inputRef.current.click()}\n            src={ButtonPicture}\n          />\n          <input\n            className=\"ProfileForm__input-file\"\n            onChange={(event: Event) => loadImage(event, setImageData)}\n            ref={inputRef}\n            type=\"file\"\n          />\n        </div>\n\n        {/* INPUT NAME */}\n        <TextField\n          className=\"ProfileForm__input-name\"\n          onChange={(e) => setName(e.target.value)}\n          label=\"Profile name:\"\n          value={name}\n        />\n\n        <Button\n          className=\"ProfileForm__submit-button\"\n          color=\"primary\"\n          disabled={isPending}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Create Profile\n          {isPending && (\n            <CircularProgress\n              className=\"ProfileForm__spinner\"\n              color=\"primary\"\n              size={20}\n            />\n          )}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","import { FunctionComponent } from 'react';\nimport { useDispatch } from 'react-redux';\n\n// components\nimport ProfileForm from '../ProfileForm/ProfileForm';\n\n// store\nimport { createProfile } from '../../store/profiles/actions';\nimport { TProfileFormData } from '../../store/profiles/types';\n\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (formData: TProfileFormData) =>\n    dispatch(createProfile(formData));\n\n  return (\n    //@ts-ignore\n    <ProfileForm\n      submitHandler={submitHandler}\n      title=\"Create Profile:\"\n      {...restProps}\n    />\n  );\n};\n\nexport default CreateProfileForm;\n","// @ts-nocheck\nimport { MutableRefObject, useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nconst useOutsideClickCard = (ref: MutableRefObject<HTMLDivElement>) => {\n  const [isFocus, setFocus] = useState(false);\n  const eventType = isMobile ? 'touchstart' : 'mousedown';\n\n  const handleClickOutside = (event: Event): void => {\n    const target = event.target as Node;\n\n    if (ref.current) {\n      if (!isFocus && ref.current.contains(target)) {\n        setFocus(true);\n      } else if (isFocus && !ref.current.contains(target)) {\n        setFocus(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(eventType, handleClickOutside);\n\n    return () => {\n      document.removeEventListener(eventType, handleClickOutside);\n    };\n    // eslint-disable-next-line\n  }, [ref, isFocus]);\n\n  return isFocus;\n};\n\nexport default useOutsideClickCard;\n","// @ts-nocheck\nimport { useCallback, useRef, useState } from 'react';\n\nconst usePress = (\n  pressHandler,\n  clickHandler,\n  { shouldPreventDefault = true, delay = 1000 } = {}\n) => {\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const timeout = useRef();\n  const target = useRef();\n\n  const start = useCallback(\n    (event) => {\n      if (shouldPreventDefault && event.target) {\n        event.target.addEventListener('touchend', preventDefault, {\n          passive: false,\n        });\n        target.current = event.target;\n      }\n\n      timeout.current = setTimeout(() => {\n        pressHandler(event);\n        setLongPressTriggered(true);\n      }, delay);\n    },\n    [pressHandler, delay, shouldPreventDefault]\n  );\n\n  const clear = useCallback(\n    (_, shouldTriggerClick = true) => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n      }\n\n      if (shouldTriggerClick && !longPressTriggered) {\n        clickHandler();\n      }\n\n      if (shouldPreventDefault && target.current) {\n        target.current.removeEventListener('touchend', preventDefault);\n      }\n\n      setLongPressTriggered(false);\n    },\n    [shouldPreventDefault, clickHandler, longPressTriggered]\n  );\n\n  return {\n    onMouseDown: (e) => start(e),\n    onTouchStart: (e) => start(e),\n    onMouseUp: (e) => clear(e),\n    onMouseLeave: (e) => clear(e, false),\n    onTouchEnd: (e) => clear(e),\n    clearManual: () => clear(null, false),\n  };\n};\n\nconst isTouchEvent = (event) => {\n  return 'touches' in event;\n};\n\nconst preventDefault = (event) => {\n  if (!isTouchEvent(event)) return;\n\n  if (event.touches.length < 2 && event.preventDefault) {\n    event.preventDefault();\n  }\n};\n\nexport default usePress;\n","export default __webpack_public_path__ + \"static/media/edit-icon.a04997a1.svg\";","export default __webpack_public_path__ + \"static/media/plus.553def23.svg\";","export default __webpack_public_path__ + \"static/media/trash-icon.66b5ea88.svg\";","import {\n  FunctionComponent,\n  MutableRefObject,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\n// hooks\nimport useOutsideClickCard from './useOutsideClickCard';\nimport usePress from './usePress';\n\n// others\nimport EditIcon from '../../assets/images/icons/edit-icon.svg';\nimport PlusIcon from '../../assets/images/icons/plus.svg';\nimport TrashIcon from '../../assets/images/icons/trash-icon.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n  name?: string;\n  src?: string;\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n  name,\n  src,\n}) => {\n  // @ts-ignore\n  const cardRef: MutableRefObject<HTMLDivElement> = useRef(null);\n  const isFocus = useOutsideClickCard(cardRef);\n  const [overlayVisible, setOverlayVisible] = useState(false);\n  const isOverlayVisible = mode === 'select' && overlayVisible && isFocus;\n\n  const onPressHandler = () => {\n    setOverlayVisible(true);\n  };\n\n  const onClickHandler = () => {\n    clickHandler();\n  };\n\n  const { clearManual, ...restPropsPress } = usePress(\n    onPressHandler,\n    onClickHandler\n  );\n\n  useEffect(() => {\n    if (!isFocus && overlayVisible) {\n      setOverlayVisible(false);\n      clearManual();\n    }\n    // eslint-disable-next-line\n  }, [isFocus, overlayVisible]);\n\n  return (\n    <section\n      className={`ProfilePicker ${\n        isOverlayVisible ? 'ProfilePicker--blur' : ''\n      }`}\n      ref={cardRef}\n    >\n      <div\n        className={`ProfilePicker__card ProfilePicker--${mode}__card ${\n          isOverlayVisible ? 'ProfilePicker__card--blur' : ''\n        }`}\n        {...restPropsPress}\n      >\n        {/* TITLE */}\n        <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\n          {name ? name : 'Create:'}\n        </p>\n\n        {/* CIRCLE */}\n        <div className={`ProfilePicker__button ProfilePicker--${mode}__button`}>\n          <img\n            alt={name ? `${name}-avatar` : 'icon'}\n            className={`ProfilePicker__image ProfilePicker--${mode}__image`}\n            src={src ? src : PlusIcon}\n          />\n        </div>\n      </div>\n\n      {/* OVERLAY */}\n      {isOverlayVisible && (\n        <div className=\"ProfilePicker__overlay\">\n          <div className=\"ProfilePicker__wrapper\">\n            <p className=\"ProfilePicker__help-text\">\n              Select one of the options:\n            </p>\n            <div className=\"ProfilePicker__options\">\n              <div className=\"ProfilePicker__option\">\n                <img alt=\"edit-icon\" src={EditIcon} />\n              </div>\n              <div className=\"ProfilePicker__option\">\n                <img alt=\"trash-icon\" src={TrashIcon} />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = `${REDUCER_KEY}/login`,\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\n  loginError = `${REDUCER_KEY}/loginError`,\n}\n","import { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { selectProfile } from '../../store/profiles/actions';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  const dispatch = useDispatch();\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a profile to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\n\n        {/* LIST */}\n        {/* @ts-ignore */}\n        {profiles.map(({ name, profileId, src }) => (\n          <ProfilePicker\n            clickHandler={() => dispatch(selectProfile(profileId))}\n            key={profileId}\n            mode=\"select\"\n            name={name}\n            src={src}\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        // LIST\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        // @ts-ignore\n        <CreateProfileForm clickHandler={onClickBackHandler} />\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","import { FunctionComponent } from 'react';\n\n// styles\nimport './spinner-styles.scss';\n\nconst Spinner: FunctionComponent = () => <div className=\"Spinner\" />;\n\nexport default Spinner;\n","export default __webpack_public_path__ + \"static/media/gentleman.f5e3e398.svg\";","import { FunctionComponent, useEffect, useState } from 'react';\n\n// components\nimport Spinner from '../Spinner/Spinner';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\nconst PageLoader: FunctionComponent = () => {\n  const [visibleContent, setVisibleContent] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => setVisibleContent(false), 5000);\n  }, []);\n\n  return (\n    <div className=\"PageLoader\">\n      {/* CONTENT */}\n      {visibleContent && (\n        <div className=\"PageLoader__content\">\n          <h2 className=\"PageLoader__title\">Welcome Gentleman:</h2>\n          <img\n            alt=\"gentleman-logo\"\n            className=\"PageLoader__image-welcome\"\n            src={Gentleman}\n          />\n        </div>\n      )}\n\n      {/* SPINNER */}\n      <div\n        className={`PageLoader__spinner ${\n          !visibleContent ? 'PageLoader__spinner--show' : ''\n        }`}\n      >\n        <Spinner />\n      </div>\n    </div>\n  );\n};\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n","import composeFp from 'lodash/fp/compose';\nimport getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TTypingsState } from './types';\n\nexport const typingsSelector: Selector<TMainState, TTypingsState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(typingsSelector, getFp('isPending'));\n\nexport const typingsLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(typingsSelector, composeFp(isArrayFp, getFp('typings')));\n\nexport const getAttributeFromTypings = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(typingsSelector, getFp(attribute));\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport { channelsLoadedSelector } from './channels/selectors';\nimport {\n  errorMessageSelector,\n  isPendingSelector as isPendingAuthSelector,\n} from './auth/selectors';\nimport { profilesLoadedSelector } from './profiles/selectors';\nimport { typingsLoadedSelector } from './typings/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    profilesLoadedSelector,\n    channelsLoadedSelector,\n    typingsLoadedSelector,\n    (profilesData, channelsData, typingsData) =>\n      profilesData && channelsData && typingsData\n  );\n","import { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get';\n\n// components\nimport Chat from '../Chat/Chat';\nimport ModalNewUpdates from '../ModalNewUpdates/ModalNewUpdates';\nimport OnlineHandler from '../OnlineHandler/OnlineHandler';\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { appDataLoadedSelector } from '../../store/selectors';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { getAttributeFromChannels } from '../../store/channels/selectors';\nimport { setChannelId } from '../../store/channels/actions';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const dispatch = useDispatch();\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const selectedChannelId = useSelector(\n    getAttributeFromChannels('selectedChannelId')\n  );\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n  const channels = useSelector(getAttributeFromChannels('channels'));\n\n  useEffect(() => {\n    if (appDataLoaded && !selectedChannelId) {\n      const channelId = get(channels, '0.channelId');\n      dispatch(setChannelId(channelId));\n    }\n    // eslint-disable-next-line\n  }, [appDataLoaded, selectedChannelId]);\n\n  if (!appDataLoaded) {\n    return <PageLoader />;\n  }\n\n  if (!selectedProfileId) {\n    return (\n      <>\n        <ModalNewUpdates />\n        <ProfilePicker />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"Page\">\n      <OnlineHandler />\n      <PageHeader />\n      <Chat />\n    </div>\n  );\n};\n\nexport default Page;\n","import { useEffect, useMemo, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// components\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport Page from '../Page/Page';\n\n// core\nimport ContextProvider from '../../core/ContextProvider/ContextProvider';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    []\n  );\n\n  useEffect(() => {\n    const password = prompt('Please enter a password:');\n    indexedDB.deleteDatabase('firebaseLocalStorageDb');\n    dispatch(loginAction(password as string));\n    // eslint-disable-next-line\n  }, []);\n\n  if (isPending) {\n    return null;\n  }\n\n  if (errorMessage) {\n    return <ErrorPage />;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ContextProvider>\n        <Page />\n      </ContextProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// @ts-nocheck\n// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TChannel } from '../../store/channels/types';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchChannelsSuccess } from '../../store/channels/actions';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\nimport { fetchTypingsSuccess } from '../../store/typings/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n    const channelsActions = (payload: Array<TChannel>): void => {\n      dispatch(fetchChannelsSuccess(payload));\n    };\n    const typingsActions = (payload: Array<TChannel>): void => {\n      dispatch(fetchTypingsSuccess(payload));\n    };\n\n    if (isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n        databaseHandler(firebase, channelsActions, DatabaseColumns.channels);\n        databaseHandler(firebase, typingsActions, DatabaseColumns.typings);\n      }, 8000);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n};\n\nconst loginSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport {\n  TCreateChannelError,\n  TFetchChannelsSuccess,\n  TChannelsState,\n  TSendMessageError,\n  TSetChannelId,\n  TSetStatusTypingError,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TChannelsState = {\n  channels: null,\n  error: '',\n  isPending: true,\n  selectedChannelId: '',\n};\n\nconst createChannel = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createChannelSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createChannelError = (\n  state: TAuthState,\n  { payload: error }: TCreateChannelError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchChannelsSuccess = (\n  state: TAuthState,\n  { payload: channels }: TFetchChannelsSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  channels,\n});\n\nconst fetchChannelsError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst sendMessage = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst sendMessageError = (\n  state: TAuthState,\n  { payload: error }: TSendMessageError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst setChannelId = (\n  state: TAuthState,\n  { payload: selectedChannelId }: TSetChannelId\n): TAuthState => ({\n  ...state,\n  selectedChannelId,\n});\n\nconst setStatusTypingError = (\n  state: TAuthState,\n  { payload: error }: TSetStatusTypingError\n): TAuthState => ({\n  ...state,\n  error,\n});\n\nconst channels = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ChannelsActionsType.createChannel:\n      return createChannel(state, action);\n    case ChannelsActionsType.createChannelSuccess:\n      return createChannelSuccess(state, action);\n    case ChannelsActionsType.createChannelsError:\n      return createChannelError(state, action);\n    case ChannelsActionsType.fetchChannelsSuccess:\n      return fetchChannelsSuccess(state, action);\n    case ChannelsActionsType.fetchChannelsError:\n      return fetchChannelsError(state, action);\n    case ChannelsActionsType.sendMessage:\n      return sendMessage(state, action);\n    case ChannelsActionsType.sendMessageError:\n      return sendMessageError(state, action);\n    case ChannelsActionsType.setChannelId:\n      return setChannelId(state, action);\n    case ChannelsActionsType.setStatusTypingError:\n      return setStatusTypingError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default channels;\n","// @ts-nocheck\n// others\nimport {\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TProfilesState,\n  TSelectProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TProfilesState = {\n  data: null,\n  error: '',\n  isPending: true,\n  selectedProfileId: '',\n};\n\nconst createProfile = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createProfileError = (\n  state: TAuthState,\n  { payload: error }: TCreateProfileError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setProfileId = (\n  state: TAuthState,\n  { payload: selectedProfileId }: TSelectProfile\n): TAuthState => ({\n  ...state,\n  selectedProfileId,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.createProfile:\n      return createProfile(state, action);\n    case ProfilesActionsType.createProfileSuccess:\n      return createProfileSuccess(state, action);\n    case ProfilesActionsType.createProfileError:\n      return createProfileError(state, action);\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    case ProfilesActionsType.selectProfile:\n      return setProfileId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\n// others\nimport { TTypingsState, TSetStatusTypingError } from './types';\n\n// store\nimport { TypingsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TTypingsState = {\n  error: '',\n  typings: null,\n};\n\nconst fetchTypingsSuccess = (\n  state: TAuthState,\n  { payload: typings }: TFetchChannelsSuccess\n): TAuthState => ({\n  ...state,\n  typings,\n});\n\nconst fetchTypingsError = (\n  state: TAuthState,\n  { payload: error }: TSetStatusTypingError\n): TAuthState => ({\n  ...state,\n  error,\n});\n\nconst setStatusTypingError = (\n  state: TAuthState,\n  { payload: error }: TSetStatusTypingError\n): TAuthState => ({\n  ...state,\n  error,\n});\n\nconst typings = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case TypingsActionsType.fetchTypingsSuccess:\n      return fetchTypingsSuccess(state, action);\n    case TypingsActionsType.fetchTypingsError:\n      return fetchTypingsError(state, action);\n    case TypingsActionsType.setStatusTypingError:\n      return setStatusTypingError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default typings;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport channels from './channels/reducer';\nimport profiles from './profiles/reducer';\nimport typings from './typings/reducer';\n\nconst reducers = { auth, channels, profiles, typings };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess());\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\n// others\nimport { TChannel } from '../../../store/channels/types';\nimport { TProfile } from '../../../store/profiles/types';\n\nconst generateId = (data: Array<TProfile | TChannel>, keyId: string) => {\n  const result: Array<string> = [];\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  do {\n    result.splice(0, result.length);\n    for (let i = 0; i < 9; i++) {\n      result.push(\n        characters.charAt(Math.floor(Math.random() * characters.length))\n      );\n    }\n  } while (data.find((data) => data[keyId] === result.join('')));\n\n  return result.join('');\n};\n\nexport default generateId;\n","// @ts-nocheck\nimport { delay, PutEffect, put, select } from 'redux-saga/effects';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { TChannel, TTyping } from './types';\n\n// services\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\nimport { getTypingsWithRemovedItem } from '../../components/Chat/ChatInput/services';\n\n// store\nimport {\n  createChannelSuccess,\n  createChannelError,\n  sendMessageSuccess,\n  sendMessageError,\n  setStatusTypingError,\n} from './actions';\nimport {\n  getAttributeFromChannels,\n  getAttributeFromSelectedChannel,\n} from './selectors';\n\nexport function* createChannel({ payload }): Generator<PutEffect<any>> {\n  const { name, shortcut } = payload;\n  const data = yield select(getAttributeFromChannels('channels'));\n  const channelId = generateId(data, 'channelId');\n\n  try {\n    yield delay(1000);\n    yield getRefDatabase([DatabaseColumns.channels]).set([\n      ...data,\n      { channelId, name, shortcut },\n    ]);\n    yield put(createChannelSuccess());\n  } catch (error) {\n    yield put(createChannelError(error));\n  }\n}\n\nexport function* sendMessage({ payload }): Generator<PutEffect<any>> {\n  const channels: Array<TChannel> = yield select(\n    getAttributeFromChannels('channels')\n  );\n  const selectedChannelId = yield select(\n    getAttributeFromChannels('selectedChannelId')\n  );\n  const messages =\n    (yield select(getAttributeFromSelectedChannel('messages'))) || [];\n  const indexOfChannel = channels.findIndex(\n    ({ channelId }) => channelId === selectedChannelId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.channels,\n      indexOfChannel,\n      'messages',\n    ]).set([...messages, payload]);\n    yield put(sendMessageSuccess());\n  } catch (error) {\n    yield put(sendMessageError(error));\n  }\n}\n\nexport function* setStatusTyping({\n  payload,\n}: TTyping & { mode: 'add' | 'remove' }): Generator<PutEffect<any>> {\n  const { mode, profileId, profileName } = payload;\n  const channels: Array<TChannel> = yield select(\n    getAttributeFromChannels('channels')\n  );\n  const typings: Array<TTyping> =\n    (yield select(getAttributeFromSelectedChannel('typings'))) || [];\n  const selectedChannelId = yield select(\n    getAttributeFromChannels('selectedChannelId')\n  );\n  const indexOfChannel = channels.findIndex(\n    ({ channelId }) => channelId === selectedChannelId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.channels,\n      indexOfChannel,\n      'typings',\n    ]).set(\n      mode === 'add'\n        ? [...typings, { profileId, profileName }]\n        : getTypingsWithRemovedItem(typings, profileId)\n    );\n  } catch (error) {\n    yield put(setStatusTypingError(error));\n  }\n}\n","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createChannel, sendMessage, setStatusTyping } from './saga';\nimport { ChannelsActionsType } from './actionsType';\n\nexport function* watchChannels(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    takeEvery(ChannelsActionsType.createChannel, createChannel),\n    takeEvery(ChannelsActionsType.sendMessage, sendMessage),\n    takeEvery(ChannelsActionsType.setStatusTyping, setStatusTyping),\n  ]);\n}\n","// @ts-nocheck\nimport firebase from 'firebase';\nimport { eventChannel } from 'redux-saga';\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\nimport { TFileUploadPayload } from './types';\n\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\n  const { action, file, path }: TFileUploadPayload = payload;\n\n  try {\n    const uploadTask = firebase.storage().ref(path).put(file);\n    const channel = eventChannel((emit) =>\n      uploadTask.on('state_changed', emit)\n    );\n    let src = '';\n\n    yield takeEvery(channel, () => {});\n    yield uploadTask;\n    yield uploadTask.snapshot.ref\n      .getDownloadURL()\n      .then((response) => (src = response));\n    yield put(action({ result: 'success', src }));\n  } catch (error) {\n    yield put(action({ error, result: 'error' }));\n  }\n}\n","// @ts-nocheck\nexport const REDUCER_KEY = 'common';\n\nexport enum CommonActionsType {\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { uploadImage } from './saga';\nimport { CommonActionsType } from './actionsType';\n\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\n  ]);\n}\n","// @ts-nocheck\n//others\nimport { TReturnablePayload } from '../../../store/common/types';\n\nconst afterUploadImageHandler = ({\n  error,\n  result,\n  src,\n}: TReturnablePayload) => {\n  if (result === 'error') {\n    throw error;\n  }\n  return src;\n};\n\nexport default afterUploadImageHandler;\n","// others\nimport { TFileUploadPayload, TUploadFile } from './types';\n\n// store\nimport { CommonActionsType } from './actionsType';\n\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\n  type: CommonActionsType.uploadFile,\n  payload,\n});\n","// @ts-nocheck\nimport { delay, PutEffect, put, select, take } from 'redux-saga/effects';\nimport { TProfileFormData } from './types';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { StoragePath } from '../../enums';\nimport { TProfile } from './types';\nimport { UPDATE_DELAY_TIME } from '../../constants';\n\n// services\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport {\n  createProfileSuccess,\n  createProfileError,\n  uploadImageFinished,\n  selectProfileError,\n  updateTimeProfileError,\n} from './actions';\nimport { uploadFile } from '../common/actions';\nimport { getAttributeFromProfiles } from './selectors';\n\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\n  const {\n    backToProfileList,\n    name,\n    imageData: { file },\n  }: TProfileFormData = payload;\n  const path = `${StoragePath.profiles}/${name}`;\n  const data = yield select(getAttributeFromProfiles('data'));\n  const profileId = generateId(data, 'profileId');\n\n  try {\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\n\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\n    const src = afterUploadImageHandler(payload);\n\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\n      ...data,\n      {\n        lastUpdateTime: new Date().getTime(),\n        name,\n        online: false,\n        profileId,\n        src,\n      },\n    ]);\n    yield put(createProfileSuccess());\n    yield backToProfileList();\n  } catch (error) {\n    yield put(createProfileError(error));\n  }\n}\n\nexport function* selectProfile({\n  payload: selectedProfileId,\n}): Generator<PutEffect<any>> {\n  const profiles: Array<TProfile> = yield select(\n    getAttributeFromProfiles('data')\n  );\n  const indexProfile = profiles.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'online',\n    ]).set(true);\n  } catch (error) {\n    yield put(selectProfileError(error));\n  }\n}\n\nexport function* updateTimeProfile({\n  payload: selectedProfileId,\n}): Generator<PutEffect<any>> {\n  const data: Array<TProfile> = yield select(getAttributeFromProfiles('data'));\n  const indexProfile = data.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'lastUpdateTime',\n    ]).set(new Date().getTime());\n    yield delay(UPDATE_DELAY_TIME);\n    yield updateTimeProfile({ payload: selectedProfileId });\n  } catch (error) {\n    yield put(updateTimeProfileError(error));\n  }\n}\n","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createProfile, selectProfile, updateTimeProfile } from './saga';\nimport { ProfilesActionsType } from './actionsType';\n\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\n    takeEvery(ProfilesActionsType.selectProfile, selectProfile),\n    takeEvery(ProfilesActionsType.updateTimeProfile, updateTimeProfile),\n  ]);\n}\n","// @ts-nocheck\nimport { PutEffect, put, select } from 'redux-saga/effects';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { TChannel, TTyping } from './types';\n\n// services\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\nimport { getTypingsWithRemovedItem } from '../../components/Chat/ChatInput/services';\n\n// store\nimport { getAttributeFromTypings } from './selectors';\nimport { setStatusTypingError } from './actions';\n\nexport function* setStatusTyping({\n  payload,\n}: TTyping & { mode: 'add' | 'remove' }): Generator<PutEffect<any>> {\n  const { channelId, mode, profileId, profileName } = payload;\n  const typings: Array<TChannel> =\n    (yield select(getAttributeFromTypings('typings'))) || [];\n\n  try {\n    yield getRefDatabase([DatabaseColumns.typings]).set(\n      mode === 'add'\n        ? [...typings, { channelId, profileId, profileName }]\n        : getTypingsWithRemovedItem(typings, profileId)\n    );\n  } catch (error) {\n    yield put(setStatusTypingError(error));\n  }\n}\n","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { setStatusTyping } from './saga';\nimport { TypingsActionsType } from './actionsType';\n\nexport function* watchTypings(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([takeEvery(TypingsActionsType.setStatusTyping, setStatusTyping)]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\nimport { watchChannels } from './channels/watch';\nimport { watchCommonStore } from './common/watch';\nimport { watchProfiles } from './profiles/watch';\nimport { watchTypings } from './typings/watch';\n\nconst watches = [\n  watchAuth,\n  watchChannels,\n  watchCommonStore,\n  watchProfiles,\n  watchTypings,\n];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './watchers';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}