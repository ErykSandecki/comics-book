{"version":3,"sources":["store/channels/actionsType.ts","assets/images/backgrounds/error.svg","components/ErrorPage/ErrorPage.tsx","store/channels/selectors.ts","store/typings/actionsType.ts","store/typings/actions.ts","store/profiles/actionsType.ts","components/Chat/ChatInput/useTyping.ts","assets/images/icons/send-icon.svg","assets/images/icons/send-disabled-icon.svg","components/Chat/ChatInput/services.ts","store/channels/actions.ts","store/profiles/selectors.ts","enums.ts","components/Chat/ChatInput/ChatInput.tsx","assets/images/icons/typing-spinner.svg","services/isOnlineUser.ts","constants.ts","components/Chat/ChatMessages/ChatMessagesTypings/ChatMessagesTypings.tsx","components/Chat/ChatMessages/useScroll.ts","assets/images/backgrounds/empty-messages.svg","components/Chat/ChatMessages/constants.ts","components/Chat/ChatMessages/services.ts","store/typings/selectors.ts","components/Chat/ChatMessages/ChatMessages.tsx","core/ContextProvider/ContextProvider.tsx","components/Firebase/enums.ts","components/Chat/Chat.tsx","assets/images/icons/update-icon.svg","components/ModalNewUpdates/constants.ts","components/ModalNewUpdates/ModalNewUpdates.tsx","components/ProfilePickerSection/enums.ts","components/Firebase/services/getRefDatabase.ts","components/OnlineHandler/useSubscribesOnDisconnectHandlers.ts","store/profiles/actions.ts","components/OnlineHandler/OnlineHandler.tsx","components/NavMenu/NavMenuCreateChannelForm/NavMenuCreateChannelForm.tsx","assets/images/icons/plus-white-icon.svg","components/NavMenu/NavMenuChannels/NavMenuChannels.tsx","assets/images/icons/offline-icon.svg","assets/images/icons/online-icon.svg","components/NavMenu/NavMenuProfiles/NavMenuProfiles.tsx","assets/images/icons/close-white-icon.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/close-icon.svg","assets/images/icons/gear-icon.svg","assets/images/icons/modify-size-icon.svg","components/PageHeader/PageHeaderSettingsMenu/PageHeaderSettingsMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","components/ProfileForm/ProfileForm.tsx","components/CreateProfileForm/CreateProfileForm.tsx","components/ProfilePicker/useOutsideClickCard.ts","components/ProfilePicker/usePress.ts","assets/images/icons/edit-icon.svg","assets/images/icons/plus.svg","assets/images/icons/trash-icon.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","components/Spinner/Spinner.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","store/selectors.ts","components/Page/Page.tsx","components/App/App.tsx","store/auth/actions.ts","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/channels/reducer.ts","store/profiles/reducer.ts","store/typings/reducer.ts","store/reducers.ts","store/auth/saga.ts","store/auth/watch.ts","components/Firebase/services/generateId.ts","store/channels/saga.ts","store/channels/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/typings/saga.ts","store/typings/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["ChannelsActionsType","ErrorPage","className","alt","src","Background","REDUCER_KEY","TypingsActionsType","channelsSelector","getFp","isPendingSelector","createSelector","channelsLoadedSelector","composeFp","isArrayFp","getAttributeFromChannels","headFp","attribute","getAttributesFromSelectedChannel","channels","selectedChannelId","findFp","channelId","getAttributeFromSelectedChannel","ProfilesActionsType","setStatusTyping","payload","type","setStatusTypingError","useTyping","profileId","profileName","useState","isTyping","setIsTyping","dispatch","useDispatch","useSelector","hideTyping","useCallback","debounce","mode","time","useEffect","Date","getTime","getPreparedContent","content","replaceAll","getTypingsWithRemovedItem","typings","selectedProfileId","filter","createChannelError","createChannelsError","sendMessageError","setChannelId","LocalStorageKey","StoragePath","profilesSelector","profilesLoadedSelector","getAttributeFromProfiles","getAttributesFromSelectedProfile","data","getAttributeFromSelectedProfile","ChatInput","forwardRef","ref","updateHeightMessages","channelName","inputRef","useRef","setContent","visibilityPlaceholder","setVisibilityPlaceholder","name","avatarSrc","inputText","current","innerText","trim","showTyping","resetAfterSubmit","contentEditable","onBlur","onFocus","onInput","event","target","innerHTML","suppressContentEditableWarning","onClick","sendMessage","SendIcon","SendDisabledIcon","isOnlineUser","lastTimeFromSelectedProfile","lastUpdateFromTimeSomeProfile","online","ChatMessagesTypings","lastUpdateTime","filteredProfiles","lastUpdateTimeProfile","length","users","map","join","getUsersWhoTypings","TypingSpinner","useScroll","messages","automaticScroll","setAutomaticScroll","scrollTo","top","scrollHeight","behavior","maxScrollTop","clientHeight","scrollTop","DAYS_MEANINGS","shouldBeWithZero","value","getFormatedDate","date","getFullYear","getMonth","getDate","dateFromMessage","currentDate","diffDays","Math","round","abs","typingsSelector","typingsLoadedSelector","getAttributeFromTypings","ChatMessages","_","scrollHandler","lastElement","onScroll","EmptyMessages","index","dangerouslySetInnerHTML","__html","DatabaseColumns","Context","createContext","margin","setMargin","ContextProvider","children","parseInt","localStorage","getItem","marginOffset","Provider","result","setItem","Chat","chatInputRef","messagesRef","useContext","style","height","calculatedHeight","maxHeight","UPDATE_DETAILS","CURRENT_VERSION","ModalNewUpdates","visible","setVisible","savedVersion","version","onClickHandler","setTimeout","Modal","closeAfterTransition","open","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","UpdateIcon","description","Button","variant","Mode","getRefDatabase","path","refDataBase","firebase","database","i","child","useSubscribesDisconnectHandlers","indexProfile","onDisconnect","set","subscribeTypings","subscribeProfile","profiles","createProfileError","uploadImageFinished","OnlineHandler","findIndex","updateTimeProfile","NavMenuCreateChannelForm","closeModal","openNotifiaction","setName","shortcut","setShortcut","isSubmitted","setIsSubmitted","isPending","onSubmit","preventDefault","toUpperCase","createChannel","TextField","onChange","e","label","inputProps","maxLength","color","disabled","size","CircularProgress","NavMenuChannels","closeNavMenu","setOpen","Alert","props","elevation","PlusWhiteIcon","Snackbar","autoHideDuration","severity","NavMenuProfiles","getIconPath","OnlineIcon","OfflineIcon","NavMenu","stopPropagation","CloseWhiteIcon","PageHeaderSettingsMenu","anchorEl","setAnchorEl","onClickCloseHandler","currentTarget","GearIcon","Menu","id","keepMounted","Boolean","MenuItem","ModifySizeIcon","CloseIcon","PageHeader","reduce","total","HamburgerMenu","loadImage","setImageData","reader","FileReader","files","onload","file","readAsDataURL","ProfileForm","clickHandler","initialName","imageData","initialImageData","submitHandler","title","BackIcon","backToProfileList","EmptyImage","click","ButtonPicture","CreateProfileForm","restProps","formData","createProfile","useOutsideClickCard","isFocus","setFocus","eventType","isMobile","handleClickOutside","contains","document","addEventListener","removeEventListener","isTouchEvent","touches","usePress","pressHandler","shouldPreventDefault","delay","longPressTriggered","setLongPressTriggered","start","passive","clear","shouldTriggerClick","clearTimeout","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","clearManual","ProfilePicker","cardRef","overlayVisible","setOverlayVisible","isOverlayVisible","restPropsPress","PlusIcon","EditIcon","TrashIcon","AuthActionsType","ProfilePickerList","selectProfile","ProfilePickerSection","listProfiles","setMode","Spinner","PageLoader","visibleContent","setVisibleContent","Gentleman","authSelector","errorMessageSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","channelsData","typingsData","Page","appDataLoaded","get","App","theme","useMemo","createMuiTheme","palette","password","prompt","indexedDB","deleteDatabase","login","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","push","databaseSuccessHandler","response","actions","val","databaseHandler","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","channelsActions","fetchChannelsSuccess","typingsActions","fetchTypingsSuccess","initialState","loginSuccess","state","loginError","createChannelSuccess","fetchChannelsError","createProfileSuccess","fetchProfilesError","setProfileId","fetchTypingsError","reducers","auth","action","createRootReducer","combineReducers","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","generateId","keyId","characters","splice","charAt","floor","random","find","select","indexOfChannel","sendMessageSuccess","watchChannels","uploadImage","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","take","selectProfileError","updateTimeProfileError","watchProfiles","watchTypings","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7b4d8a03.chunk.js","sourcesContent":["// @ts-nocheck\nexport const REDUCER_KEY = 'channels';\n\nexport enum ChannelsActionsType {\n  createChannel = `${REDUCER_KEY}/createChannel`,\n  createChannelSuccess = `${REDUCER_KEY}/createChannelSuccess`,\n  createChannelsError = `${REDUCER_KEY}/createChannelsError`,\n  fetchChannelsSuccess = `${REDUCER_KEY}/fetchChannelsSuccess`,\n  fetchChannelsError = `${REDUCER_KEY}/fetchChannelsError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  sendMessage = `${REDUCER_KEY}/sendMessage`,\n  sendMessageSuccess = `${REDUCER_KEY}/sendMessageSuccess`,\n  sendMessageError = `${REDUCER_KEY}/sendMessageError`,\n  setChannelId = `${REDUCER_KEY}/setChannelId`,\n}\n","export default __webpack_public_path__ + \"static/media/error.aee84ee0.svg\";","import { FunctionComponent } from 'react';\n\n// others\nimport Background from '../../assets/images/backgrounds/error.svg';\n\n// styles\nimport './error-page-styles.scss';\n\nconst ErrorPage: FunctionComponent = () => (\n  <section className=\"ErrorPage\">\n    <img\n      alt=\"background-error\"\n      className=\"ErrorPage__background\"\n      src={Background}\n    />\n  </section>\n);\n\nexport default ErrorPage;\n","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport headFp from 'lodash/head';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TChannel, TChannelsState } from './types';\n\nexport const channelsSelector: Selector<TMainState, TChannelsState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(channelsSelector, getFp('isPending'));\n\nexport const channelsLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(channelsSelector, composeFp(isArrayFp, getFp('channels')));\n\nexport const getDefaultChannelId: Selector<TMainState, TChannel> =\n  createSelector(\n    channelsSelector,\n    composeFp(getFp('channelId'), headFp, getFp('channels'))\n  );\n\nexport const getAttributeFromChannels = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(channelsSelector, getFp(attribute));\n\n// @ts-ignore\nexport const getAttributesFromSelectedChannel: Selector<TMainState, TChannel> =\n  createSelector(channelsSelector, ({ channels, selectedChannelId }) =>\n    findFp(({ channelId }) => channelId === selectedChannelId, channels)\n  );\n\nexport const getAttributeFromSelectedChannel = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(getAttributesFromSelectedChannel, getFp(attribute));\n","// @ts-nocheck\nexport const REDUCER_KEY = 'typings';\n\nexport enum TypingsActionsType {\n  fetchTypingsSuccess = `${REDUCER_KEY}/fetchTypingsSuccess`,\n  fetchTypingsError = `${REDUCER_KEY}/fetchTypingsError`,\n  setStatusTyping = `${REDUCER_KEY}/setStatusTyping`,\n  setStatusTypingError = `${REDUCER_KEY}/setStatusTypingError`,\n}\n","// others\nimport {\n  TFetchTypingsSuccess,\n  TFetchTypingsError,\n  TSetStatusTyping,\n  TSetStatusTypingError,\n  TTyping,\n} from './types';\n\n// store\nimport { TypingsActionsType } from './actionsType';\n\nexport const fetchTypingsSuccess = (\n  payload: Array<TTyping>\n): TFetchTypingsSuccess => ({\n  type: TypingsActionsType.fetchTypingsSuccess,\n  payload,\n});\n\nexport const fetchTypingsError = (): TFetchTypingsError => ({\n  type: TypingsActionsType.fetchTypingsError,\n});\n\nexport const setStatusTyping = (\n  payload: TTyping & { mode: 'add' | 'remove' }\n): TSetStatusTyping => ({\n  type: TypingsActionsType.setStatusTyping,\n  payload,\n});\n\nexport const setStatusTypingError = (\n  payload: string\n): TSetStatusTypingError => ({\n  type: TypingsActionsType.setStatusTyping,\n  payload,\n});\n","// @ts-nocheck\nexport const REDUCER_KEY = 'profiles';\n\nexport enum ProfilesActionsType {\n  createProfile = `${REDUCER_KEY}/createProfile`,\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\n  selectProfile = `${REDUCER_KEY}/selectProfile`,\n  selectProfileError = `${REDUCER_KEY}/selectProfileError`,\n  updateTimeProfile = `${REDUCER_KEY}/updateTimeProfile`,\n  updateTimeProfileError = `${REDUCER_KEY}/updateTimeProfileError`,\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport debounce from 'lodash/debounce';\n\n// store\nimport { getAttributeFromChannels } from '../../../store/channels/selectors';\nimport { setStatusTyping } from '../../../store/typings/actions';\n\nconst useTyping = (profileId: string, profileName: string) => {\n  const [isTyping, setIsTyping] = useState(false);\n  const dispatch = useDispatch();\n  const channelId = useSelector(getAttributeFromChannels('selectedChannelId'));\n  const payload = {\n    profileId,\n    profileName,\n    channelId,\n  };\n\n  // eslint-disable-next-line\n  const hideTyping = useCallback(\n    debounce(() => {\n      setIsTyping(false);\n      dispatch(\n        setStatusTyping({\n          ...payload,\n          mode: 'remove',\n          time: -1\n          \n        })\n      );\n    }, 1000),\n    []\n  );\n\n  const showTyping = () => {\n    if (!isTyping) {\n      setIsTyping(true);\n      dispatch(\n        setStatusTyping({\n          ...payload,\n          mode: 'add',\n          time: new Date().getTime(),\n        })\n      );\n    }\n    hideTyping();\n  };\n\n  useEffect(() => {\n    dispatch(\n      setStatusTyping({\n        ...payload,\n        mode: 'remove',\n        time: -1,\n      })\n    );\n    // eslint-disable-next-line\n  }, []);\n\n  return showTyping;\n};\n\nexport default useTyping;\n","export default __webpack_public_path__ + \"static/media/send-icon.2dc21fc0.svg\";","export default __webpack_public_path__ + \"static/media/send-disabled-icon.53fba88d.svg\";","import { TTyping } from '../../../store/typings/types';\n\nexport const getPreparedContent = (content: string) =>\n  content.replaceAll(\n    '<div><br></div>',\n    `<div class=\"ChatMessages__break-line\"><br></div>`\n  );\n\nexport const getTypingsWithRemovedItem = (\n  typings: Array<TTyping>,\n  selectedProfileId: string\n) => typings.filter(({ profileId }) => profileId !== selectedProfileId);\n","// others\nimport {\n  TChannel,\n  TCreateChannel,\n  TCreateChannelError,\n  TCreateChannelSuccess,\n  TFetchChannelsError,\n  TFetchChannelsSuccess,\n  TMessage,\n  TSendMessage,\n  TSendMessageError,\n  TSendMessageSuccess,\n  TSetChannelId,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\n\nexport const createChannel = (\n  payload: Omit<TChannel, 'chanelId' | 'messages'>\n): TCreateChannel => ({\n  type: ChannelsActionsType.createChannel,\n  payload,\n});\n\nexport const createChannelSuccess = (): TCreateChannelSuccess => ({\n  type: ChannelsActionsType.createChannelSuccess,\n});\n\nexport const createChannelError = (payload: string): TCreateChannelError => ({\n  type: ChannelsActionsType.createChannelsError,\n  payload,\n});\n\nexport const fetchChannelsSuccess = (\n  payload: Array<TChannel>\n): TFetchChannelsSuccess => ({\n  type: ChannelsActionsType.fetchChannelsSuccess,\n  payload,\n});\n\nexport const fetchChannelsError = (): TFetchChannelsError => ({\n  type: ChannelsActionsType.fetchChannelsError,\n});\n\nexport const sendMessage = (payload: TMessage): TSendMessage => ({\n  type: ChannelsActionsType.sendMessage,\n  payload,\n});\n\nexport const sendMessageSuccess = (): TSendMessageSuccess => ({\n  type: ChannelsActionsType.sendMessageSuccess,\n});\n\nexport const sendMessageError = (payload: string): TSendMessageError => ({\n  type: ChannelsActionsType.sendMessageError,\n  payload,\n});\n\nexport const setChannelId = (payload: string): TSetChannelId => ({\n  type: ChannelsActionsType.setChannelId,\n  payload,\n});\n","import composeFp from 'lodash/fp/compose';\nimport findFp from 'lodash/fp/find';\nimport getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TProfile, TProfilesState } from './types';\n\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(profilesSelector, getFp('isPending'));\n\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\n\nexport const getAttributeFromProfiles = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(profilesSelector, getFp(attribute));\n\n// @ts-ignore\nexport const getAttributesFromSelectedProfile: Selector<TMainState, TProfile> =\n  createSelector(profilesSelector, ({ data, selectedProfileId }) =>\n    findFp(({ profileId }) => profileId === selectedProfileId, data)\n  );\n\nexport const getAttributeFromSelectedProfile = (\n  attribute: string\n): Selector<TMainState, TProfile> =>\n  createSelector(getAttributesFromSelectedProfile, getFp(attribute));\n","export enum LocalStorageKey {\n  marginOffset = 'MARGIN_OFFSET',\n  version = 'VERSION',\n}\n\nexport enum StoragePath {\n  profiles = 'PROFILES',\n}\n","// @ts-nocheck\nimport {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n  useRef,\n  useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// hooks\nimport useTyping from './useTyping';\n\n// others\nimport SendIcon from '../../../assets/images/icons/send-icon.svg';\nimport SendDisabledIcon from '../../../assets/images/icons/send-disabled-icon.svg';\nimport { TProfile } from '../../../store/profiles/types';\n\n// services\nimport { getPreparedContent } from './services';\n\n// store\nimport { sendMessage } from '../../../store/channels/actions';\nimport { getAttributesFromSelectedProfile } from '../../../store/profiles/selectors';\n\n// styles\nimport './chat-input-styles.scss';\n\ntype TProps = {\n  channelName: string;\n  updateHeightMessages: () => void;\n};\n\nconst ChatInput: ForwardRefExoticComponent<\n  TProps & RefAttributes<HTMLDivElement>\n> = forwardRef<HTMLDivElement, TProps>(\n  ({ updateHeightMessages, channelName }, ref) => {\n    const dispatch = useDispatch();\n    const inputRef = useRef(null);\n    const [content, setContent] = useState('');\n    const [visibilityPlaceholder, setVisibilityPlaceholder] = useState(true);\n    const {\n      name: profileName,\n      src: avatarSrc,\n      profileId,\n    }: TProfile = useSelector(getAttributesFromSelectedProfile);\n    const inputText = inputRef.current?.innerText.trim() || '';\n    const showTyping = useTyping(profileId, profileName);\n\n    const onBlurHandler = (): void => {\n      if (!inputText) {\n        setVisibilityPlaceholder(true);\n      }\n    };\n\n    const onInputHandler = (event: Event): void => {\n      const { target } = event;\n\n      showTyping();\n      setContent(target.innerHTML);\n      updateHeightMessages();\n    };\n    // eslint-disable-next-line\n\n    const onSubmitHandler = () => {\n      if (content) {\n        dispatch(\n          sendMessage({\n            avatarSrc,\n            content: getPreparedContent(content),\n            profileName,\n            profileId,\n            time: new Date().getTime(),\n          })\n        );\n        resetAfterSubmit();\n      }\n    };\n\n    const resetAfterSubmit = () => {\n      inputRef.current.innerText = '';\n\n      updateHeightMessages();\n      setContent('');\n      setVisibilityPlaceholder(true);\n    };\n\n    return (\n      <div className=\"ChatInput\" ref={ref}>\n        <p\n          className=\"ChatInput__text-field\"\n          contentEditable={true}\n          onBlur={onBlurHandler}\n          onFocus={() => setVisibilityPlaceholder(false)}\n          onInput={onInputHandler}\n          ref={inputRef}\n          suppressContentEditableWarning\n        />\n        {visibilityPlaceholder && (\n          <span className=\"ChatInput__placeholder\">\n            Message #{channelName}:\n          </span>\n        )}\n        <img\n          alt=\"send-icon\"\n          className=\"ChatInput__send-icon\"\n          onClick={onSubmitHandler}\n          src={inputText ? SendIcon : SendDisabledIcon}\n        />\n      </div>\n    );\n  }\n);\n\nexport default ChatInput;\n","export default __webpack_public_path__ + \"static/media/typing-spinner.b98a8c76.svg\";","// others\nimport { TIME_TO_COMPARE } from '../constants';\n\nconst isOnlineUser = (\n  lastTimeFromSelectedProfile: number,\n  lastUpdateFromTimeSomeProfile: number,\n  online: boolean\n): boolean =>\n  online &&\n  lastTimeFromSelectedProfile - lastUpdateFromTimeSomeProfile < TIME_TO_COMPARE;\n\nexport default isOnlineUser;\n","export const EMAIL = 'eryk.sandecki@gmail.com';\nexport const UPDATE_DELAY_TIME = 60000;\nexport const TIME_TO_COMPARE = 90000;\n","//@ts-nocheck\nimport { FunctionComponent, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport TypingSpinner from '../../../../assets/images/icons/typing-spinner.svg';\nimport { TTyping } from '../../../../store/typings/types';\n\n// store\nimport {\n  getAttributeFromProfiles,\n  getAttributeFromSelectedProfile,\n} from '../../../../store/profiles/selectors';\n\n// services\nimport isOnlineUser from '../../../../services/isOnlineUser';\n\n// styles\nimport './chat-messages-typings-styles.scss';\n\ntype TProps = {\n  typings: Array<TTyping>;\n};\n\nconst ChatMessagesTypings: FunctionComponent<TProps> = ({ typings }) => {\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const lastUpdateTime: number = useSelector(\n    getAttributeFromSelectedProfile('lastUpdateTime')\n  );\n  const filteredProfiles = useCallback(\n    () =>\n      typings.filter(\n        ({ profileId, time: lastUpdateTimeProfile }) =>\n          profileId !== selectedProfileId &&\n          isOnlineUser(lastUpdateTime, lastUpdateTimeProfile, true)\n      ),\n    [lastUpdateTime, selectedProfileId, typings]\n  );\n\n  const getDescription = (): string =>\n    filteredProfiles().length === 1 ? 'is Typing:' : 'are Typings:';\n\n  const getUsersWhoTypings = (): string => {\n    const users = filteredProfiles();\n\n    return users.length > 2\n      ? `${users.length} users`\n      : users.map(({ profileName }) => profileName).join(', ');\n  };\n\n  if (filteredProfiles().length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"ChatMessagesTypings\">\n      <p className=\"ChatMessagesTypings__profile\">{getUsersWhoTypings()}</p>\n      <p className=\"ChatMessagesTypings__description\">{getDescription()}</p>\n      <img\n        alt=\"typing-spinner\"\n        className=\"ChatMessagesTypings__spinner\"\n        src={TypingSpinner}\n      />\n    </div>\n  );\n};\n\nexport default ChatMessagesTypings;\n","// @ts-nocheck\nimport { ForwardedRef, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\n// others\nimport { TMessage } from './../../../store/channels/types';\nimport { TTyping } from './../../../store/typings/types';\n\n// store\nimport {\n    getAttributeFromChannels,\n  } from '../../../store/channels/selectors';\n\nconst useScroll = (messages: Array<TMessage>, ref: ForwardedRef<HTMLDivElement>, typings: Array<TTyping>) => {\n    const [automaticScroll, setAutomaticScroll] = useState(true);\n    const selectedChannelId = useSelector(\n      getAttributeFromChannels('selectedChannelId')\n    );\n\n    const scrollHandler = () => {\n        const { current } = ref;\n        const maxScrollTop = current.scrollHeight - current.clientHeight;\n  \n        if (current.scrollTop === maxScrollTop) {\n          setAutomaticScroll(true);\n        } else {\n          setAutomaticScroll(false);\n        }\n      };\n  \n      useEffect(() => {\n        const { current } = ref;\n        if (automaticScroll) {\n          current.scrollTo({ top: current.scrollHeight, behavior: 'smooth' });\n        }\n        // eslint-disable-next-line\n      }, [messages, ref, typings]);\n  \n      useEffect(() => {\n        const { current } = ref;\n        current.scrollTo({ top: current.scrollHeight, behavior: 'smooth' });\n        setAutomaticScroll(true);\n        // eslint-disable-next-line\n      }, [selectedChannelId]);\n\n      return scrollHandler;\n}\n\nexport default useScroll;","export default __webpack_public_path__ + \"static/media/empty-messages.285e086d.svg\";","export const DAYS_MEANINGS = ['Today', 'Yesterday'];\n","// @ts-nocheck\n// others\nimport { DAYS_MEANINGS } from './constants';\n\nconst oneDay = 24 * 60 * 60 * 1000;\n\nconst shouldBeWithZero = (value: number): string =>\n  value < 10 ? `0${value}` : value;\n\nconst getFormatedDate = (date: Date): string =>\n  `${date.getFullYear()}-${shouldBeWithZero(\n    date.getMonth() + 1\n  )}-${shouldBeWithZero(date.getDate())}`;\n\nexport const getDate = (time: number): string => {\n  const dateFromMessage = new Date(getFormatedDate(new Date(time)));\n  const currentDate = new Date(getFormatedDate(new Date()));\n  const diffDays = Math.round(\n    Math.abs((currentDate - dateFromMessage) / oneDay)\n  );\n\n  return diffDays < DAYS_MEANINGS.length\n    ? DAYS_MEANINGS[diffDays]\n    : getFormatedDate(new Date(time));\n};\n","import composeFp from 'lodash/fp/compose';\nimport getFp from 'lodash/fp/get';\nimport isArrayFp from 'lodash/fp/isArray';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TTypingsState } from './types';\n\nexport const typingsSelector: Selector<TMainState, TTypingsState> =\n  getFp(REDUCER_KEY);\n\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\n  createSelector(typingsSelector, getFp('isPending'));\n\nexport const typingsLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(typingsSelector, composeFp(isArrayFp, getFp('typings')));\n\nexport const getAttributeFromTypings = (\n  attribute: string\n): Selector<TMainState, any> =>\n  createSelector(typingsSelector, getFp(attribute));\n","// @ts-nocheck\nimport { forwardRef, ForwardRefExoticComponent, RefAttributes } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport ChatMessagesTypings from './ChatMessagesTypings/ChatMessagesTypings';\n\n// hooks\nimport useScroll from './useScroll';\n\n// others\nimport EmptyMessages from '../../../assets/images/backgrounds/empty-messages.svg';\nimport { TMessage } from '../../../store/channels/types';\nimport { TTyping } from '../../../store/typings/types';\n\n// services\nimport { getDate } from './services';\n\n// store\nimport { getAttributeFromSelectedChannel } from '../../../store/channels/selectors';\nimport { getAttributeFromTypings } from '../../../store/typings/selectors';\n\n// styles\nimport './chat-messages-styles.scss';\n\nconst ChatMessages: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>> =\n  forwardRef<HTMLDivElement, {}>((_, ref) => {\n    // eslint-disable-next-line\n    const messages: Array<TMessage> =\n      useSelector(getAttributeFromSelectedChannel('messages')) || [];\n    const typings: Array<TTyping> =\n      useSelector(getAttributeFromTypings('typings')) || [];\n    const scrollHandler = useScroll(messages, ref, typings);\n    const lastElement = messages.length - 1;\n\n    return (\n      <section className=\"ChatMessages\" onScroll={scrollHandler} ref={ref}>\n        {messages.length === 0 ? (\n          <div className=\"ChatMessages__empty\">\n            <img alt=\"empty-messages\" src={EmptyMessages} />\n            <p className=\"ChatMessages__suggestion\">\n              No messages! You can start a conversation on this channel.\n            </p>\n          </div>\n        ) : (\n          <>\n            {messages.map(\n              ({ avatarSrc, content, profileName, time }, index) => (\n                <div\n                  className={`ChatMessages__wrapper ${\n                    index === lastElement ? 'ChatMessages__wrapper--last' : ''\n                  }`}\n                  key={index}\n                >\n                  <img\n                    alt=\"avatar\"\n                    className=\"ChatMessages__avatar\"\n                    src={avatarSrc}\n                  />\n                  <div className=\"ChatMessages__content\">\n                    <p className=\"ChatMessages__profile-name\">\n                      <b>{profileName}</b> {getDate(time)}\n                    </p>\n                    <p\n                      className=\"ChatMessages__content\"\n                      dangerouslySetInnerHTML={{ __html: content }}\n                    />\n                  </div>\n                </div>\n              )\n            )}\n            <ChatMessagesTypings typings={typings} />\n          </>\n        )}\n      </section>\n    );\n  });\n\nexport default ChatMessages;\n","// @ts-nocheck\nimport { createContext, FunctionComponent, ReactNode, useState } from 'react';\n\n// other\nimport { LocalStorageKey } from '../../enums';\n\ntype TProps = {\n  children: ReactNode;\n};\n\nexport const Context: React.Context<any> = createContext({\n  margin: 0,\n  setMargin: () => {},\n});\n\nconst getMarginFromLocalStorage = (): number =>\n  parseInt(localStorage.getItem(LocalStorageKey.marginOffset) || 0);\n\nconst ContextProvider: FunctionComponent<TProps> = ({ children }) => {\n  const [margin, setMargin] = useState(getMarginFromLocalStorage());\n\n  const setMarginHandler = (value: number): void => {\n    const result = margin + value;\n\n    if (margin > 0 || value !== -1) {\n      setMargin(result);\n      localStorage.setItem(LocalStorageKey.marginOffset, result);\n    }\n  };\n\n  return (\n    <Context.Provider value={{ margin, setMargin: setMarginHandler }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n","export enum DatabaseColumns {\n  profiles = 'profiles',\n  channels = 'channels',\n  typings = 'typings',\n}\n","// @ts-nocheck\nimport { FunctionComponent, useContext, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport ChatInput from './ChatInput/ChatInput';\nimport ChatMessages from './ChatMessages/ChatMessages';\n\n// core\nimport { Context } from '../../core/ContextProvider/ContextProvider';\n\n// others\nimport { TContext } from '../../core/ContextProvider/types';\n\n// store\nimport { getAttributeFromSelectedChannel } from '../../store/channels/selectors';\n\n// styles\nimport './chat-styles.scss';\n\nconst Chat: FunctionComponent<{}> = () => {\n  const chatInputRef = useRef(null);\n  const messagesRef = useRef(null);\n  const name = useSelector(getAttributeFromSelectedChannel('name'));\n  const { margin }: TContext = useContext(Context);\n\n  const updateHeightMessages = (): void => {\n    const height = chatInputRef.current.clientHeight;\n    const calculatedHeight = `calc(100% - ${height}px)`;\n\n    messagesRef.current.style.height = calculatedHeight;\n    messagesRef.current.style.maxHeight = calculatedHeight;\n  };\n\n  return (\n    <section\n      className=\"Chat\"\n      style={{ height: `calc(100vh - ${80 + margin}px)` }}\n    >\n      <ChatMessages ref={messagesRef} />\n      <ChatInput\n        channelName={name}\n        ref={chatInputRef}\n        updateHeightMessages={updateHeightMessages}\n      />\n    </section>\n  );\n};\n\nexport default Chat;\n","export default __webpack_public_path__ + \"static/media/update-icon.82e7731f.svg\";","export const UPDATE_DETAILS = [\n  'Application access by password',\n  'Ability to create profiles',\n  'Ability to create channels',\n  'Status of active brothers-in-law',\n  'Application adapted to all devices',\n  'Ability to write on the channel',\n  'Status on the number of active brothers-in-law',\n  'Ability to send messages',\n  'Determination of date of last message',\n];\nexport const CURRENT_VERSION = '1.0.0';\n","import { FunctionComponent, useEffect, useState } from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Button from '@material-ui/core/Button';\nimport Fade from '@material-ui/core/Fade';\nimport Modal from '@material-ui/core/Modal';\n\n// others\nimport UpdateIcon from '../../assets/images/icons/update-icon.svg';\nimport { UPDATE_DETAILS, CURRENT_VERSION } from './constants';\nimport { LocalStorageKey } from '../../enums';\n\n// styles\nimport './modal-new-updates-styles.scss';\n\nconst ModalNewUpdates: FunctionComponent = () => {\n  const [visible, setVisible] = useState(false);\n  const savedVersion = localStorage.getItem(LocalStorageKey.version) || '';\n\n  const onClickHandler = (): void => {\n    localStorage.setItem(LocalStorageKey.version, CURRENT_VERSION);\n    setVisible(false);\n  };\n\n  useEffect(() => {\n    if (savedVersion !== CURRENT_VERSION) {\n      setTimeout(() => {\n        setVisible(true);\n      }, 1000);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Modal\n      className=\"ModalNewUpdates\"\n      closeAfterTransition\n      open={visible}\n      onClose={onClickHandler}\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={visible}>\n        <div className=\"ModalNewUpdates__container\">\n          <div className=\"ModalNewUpdates__wrapper\">\n            {/* ICON */}\n            <div className=\"ModalNewUpdates__icon\">\n              <img alt=\"update-icon\" src={UpdateIcon} />\n            </div>\n\n            {/* DETAILS */}\n            <div className=\"ModalNewUpdates__content\">\n              <h4 className=\"ModalNewUpdates__title\">\n                New Update: {CURRENT_VERSION}\n              </h4>\n              <ul className=\"ModalNewUpdates__details\">\n                {UPDATE_DETAILS.map((description) => (\n                  <li className=\"ModalNewUpdates__item\" key={description}>\n                    <p className=\"ModalNewUpdates__description\">\n                      {description}.\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          <Button\n            className=\"ModalNewUpdates__submit\"\n            onClick={onClickHandler}\n            variant=\"outlined\"\n          >\n            Understand\n          </Button>\n        </div>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default ModalNewUpdates;\n","export enum Mode {\n  createProfile = 'createProfile',\n  listProfiles = 'listProfiles',\n}\n","import firebase from 'firebase';\n\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\n  let refDataBase = firebase.database().ref(path[0]);\n  for (let i = 1; i < path.length; i++) {\n    refDataBase = refDataBase.child(path[i]);\n  }\n  return refDataBase;\n};\n\nexport default getRefDatabase;\n","// @ts-nocheck\nimport { useSelector } from 'react-redux';\n\n// others\nimport { DatabaseColumns } from '../Firebase/enums';\n\n// services\nimport getRefDatabase from '../Firebase/services/getRefDatabase';\nimport { getTypingsWithRemovedItem } from '../Chat/ChatInput/services';\n\n// store\nimport { getAttributeFromSelectedChannel } from '../../store/channels/selectors';\n\nconst useSubscribesDisconnectHandlers = (\n  indexProfile: number,\n  selectedProfileId: string\n) => {\n  const typings = useSelector(getAttributeFromSelectedChannel('typings')) || [];\n\n  const subscribeProfile = () =>\n    getRefDatabase([DatabaseColumns.profiles, indexProfile, 'online'])\n      .onDisconnect()\n      .set(false);\n\n  const subscribeTypings = () => null;\n    getRefDatabase([DatabaseColumns.typings])\n      .onDisconnect()\n      .set(getTypingsWithRemovedItem(typings, selectedProfileId));\n\n  return {\n    subscribeTypings,\n    subscribeProfile,\n  };\n};\n\nexport default useSubscribesDisconnectHandlers;\n","import { TUpdateTimeProfileError } from './types';\n// others\nimport { TReturnablePayload } from './../common/types';\nimport {\n  TCreateProfile,\n  TCreateProfileSuccess,\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TFetchProfilesError,\n  TProfile,\n  TProfileFormData,\n  TUploadImageFinished,\n  TSelectProfile,\n  TSelectProfileError,\n  TUpdateTimeProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\n\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\n  type: ProfilesActionsType.createProfile,\n  payload,\n});\n\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\n  type: ProfilesActionsType.createProfileSuccess,\n});\n\nexport const createProfileError = (payload: string): TCreateProfileError => ({\n  type: ProfilesActionsType.createProfileError,\n  payload,\n});\n\nexport const fetchProfilesSuccess = (\n  payload: Array<TProfile>\n): TFetchProfilesSuccess => ({\n  type: ProfilesActionsType.fetchProfilesSuccess,\n  payload,\n});\n\nexport const fetchProfilesError = (): TFetchProfilesError => ({\n  type: ProfilesActionsType.fetchProfilesError,\n});\n\nexport const uploadImageFinished = (\n  payload: TReturnablePayload\n): TUploadImageFinished => ({\n  type: ProfilesActionsType.uploadImageFinished,\n  payload,\n});\n\nexport const selectProfile = (payload: string): TSelectProfile => ({\n  type: ProfilesActionsType.selectProfile,\n  payload,\n});\n\nexport const selectProfileError = (payload: string): TSelectProfileError => ({\n  type: ProfilesActionsType.selectProfileError,\n  payload,\n});\n\nexport const updateTimeProfile = (payload: string): TUpdateTimeProfile => ({\n  type: ProfilesActionsType.updateTimeProfile,\n  payload,\n});\n\nexport const updateTimeProfileError = (\n  payload: string\n): TUpdateTimeProfileError => ({\n  type: ProfilesActionsType.updateTimeProfileError,\n  payload,\n});\n","// @ts-nocheck\nimport { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// hooks\nimport useSubscribesDisconnectHandlers from './useSubscribesOnDisconnectHandlers';\n\n// others\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { updateTimeProfile } from '../../store/profiles/actions';\n\nconst OnlineHandler: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const indexProfile = profiles.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  const { subscribeTypings, subscribeProfile } =\n    useSubscribesDisconnectHandlers(indexProfile, selectedProfileId);\n\n  useEffect(() => {\n    subscribeProfile();\n    subscribeTypings();\n    dispatch(updateTimeProfile(selectedProfileId));\n    // eslint-disable-next-line\n  }, []);\n\n  return null;\n};\n\nexport default OnlineHandler;\n","// @ts-nocheck\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// store\nimport { createChannel } from '../../../store/channels/actions';\nimport { isPendingSelector } from '../../../store/channels/selectors';\n\n// styles\nimport './nav-menu-create-channel-form-styles.scss';\n\ntype TProps = {\n  closeModal: () => void;\n  openNotifiaction: () => void;\n};\n\nconst NavMenuCreateChannelForm: FunctionComponent<TProps> = ({\n  closeModal,\n  openNotifiaction,\n}) => {\n  const [name, setName] = useState('');\n  const [shortcut, setShortcut] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n\n  const onSubmitHandler = (event: Event): void => {\n    event.preventDefault();\n\n    if (name && shortcut) {\n      dispatch(createChannel({ name, shortcut: shortcut.toUpperCase() }));\n      setIsSubmitted(true);\n    }\n  };\n\n  useEffect(() => {\n    if (!isPending && isSubmitted) {\n      closeModal();\n      openNotifiaction();\n    }\n    // eslint-disable-next-line\n  }, [isPending, isSubmitted]);\n\n  return (\n    <form className=\"NavMenuCreateChannelForm\" onSubmit={onSubmitHandler}>\n      <h2>Create channel:</h2>\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setName(e.target.value)}\n        label=\"Channel name:\"\n        value={name}\n      />\n      <TextField\n        className=\"NavMenuCreateChannelForm__input\"\n        onChange={(e) => setShortcut(e.target.value)}\n        label=\"Shortcut channel name eg. (ME):\"\n        inputProps={{ maxLength: 2 }}\n        value={shortcut}\n      />\n      <Button\n        className=\"ProfileForm__submit-button\"\n        color=\"primary\"\n        disabled={isPending}\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n      >\n        Create Channel\n        {isPending && (\n          <CircularProgress\n            className=\"ProfileForm__spinner\"\n            color=\"primary\"\n            size={20}\n          />\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default NavMenuCreateChannelForm;\n","export default __webpack_public_path__ + \"static/media/plus-white-icon.f41cd2c2.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n// components\nimport NavMenuCreateChannelForm from '../NavMenuCreateChannelForm/NavMenuCreateChannelForm';\n\n// others\nimport PlusWhiteIcon from '../../../assets/images/icons/plus-white-icon.svg';\nimport { TChannel } from '../../../store/channels/types';\n\n// store\nimport { getAttributeFromChannels } from '../../../store/channels/selectors';\nimport { setChannelId } from '../../../store/channels/actions';\n\n// styles\nimport './nav-menu-channels-styles.scss';\n\ntype TProps = {\n  closeNavMenu: () => void;\n};\n\nconst NavMenuChannels: FunctionComponent<TProps> = ({ closeNavMenu }) => {\n  const [open, setOpen] = useState(false);\n  const [visible, setVisible] = useState(false);\n  const dispatch = useDispatch();\n  const channels: Array<TChannel> = useSelector(\n    getAttributeFromChannels('channels')\n  );\n\n  const Alert = (props: AlertProps) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  };\n\n  const onClickHandler = (channelId: string): void => {\n    closeNavMenu();\n    dispatch(setChannelId(channelId));\n  };\n\n  return (\n    <div className=\"NavMenuChannels\">\n      {/* NAV */}\n      <div className=\"NavMenuChannels__nav\">\n        <p className=\"NavMenuChannels__title\">Channels</p>\n        <img\n          alt=\"plus-white-icon\"\n          className=\"NavMenuChannels__button\"\n          onClick={() => setVisible(true)}\n          src={PlusWhiteIcon}\n        />\n      </div>\n      {/* CHANNELS */}\n      <div className=\"NavMenuChannels__channels\">\n        {channels.map(({ channelId, name }) => (\n          <p\n            className=\"NavMenuChannels__channel-name\"\n            key={channelId}\n            onClick={() => onClickHandler(channelId)}\n          >\n            #{name}\n          </p>\n        ))}\n      </div>\n\n      {/* MODAL */}\n      <Modal\n        className=\"NavMenuChannels__modal\"\n        closeAfterTransition\n        open={visible}\n        onClose={() => setVisible(false)}\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={visible}>\n          <div className=\"NavMenuChannels__card\">\n            <NavMenuCreateChannelForm\n              closeModal={() => setVisible(false)}\n              openNotifiaction={() => setOpen(true)}\n            />\n          </div>\n        </Fade>\n      </Modal>\n\n      {/* NOTIFICATION */}\n      <Snackbar\n        open={open}\n        className=\"NavMenuChannels__snackbar\"\n        autoHideDuration={5000}\n        onClose={() => setOpen(false)}\n      >\n        <Alert onClose={() => setOpen(false)} severity=\"success\">\n          Channel has been added!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default NavMenuChannels;\n","export default __webpack_public_path__ + \"static/media/offline-icon.328c273c.svg\";","export default __webpack_public_path__ + \"static/media/online-icon.cd9ad327.svg\";","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// others\nimport OfflineIcon from '../../../assets/images/icons/offline-icon.svg';\nimport OnlineIcon from '../../../assets/images/icons/online-icon.svg';\nimport { TProfile } from '../../../store/profiles/types';\n\n// services\nimport isOnlineUser from '../../../services/isOnlineUser';\n\n// store\nimport {\n  getAttributeFromProfiles,\n  getAttributeFromSelectedProfile,\n} from '../../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-profiles-styles.scss';\n\nconst NavMenuProfiles: FunctionComponent = () => {\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n\n  //@ts-ignore\n  const lastUpdateTime: number = useSelector(\n    getAttributeFromSelectedProfile('lastUpdateTime')\n  );\n\n  const getIconPath = (\n    lastUpdateTimeProfile: number,\n    online: boolean\n  ): string => {\n    if (isOnlineUser(lastUpdateTime, lastUpdateTimeProfile, online)) {\n      return OnlineIcon;\n    }\n    return OfflineIcon;\n  };\n\n  return (\n    <div className=\"NavMenuProfiles\">\n      {/* HEADER */}\n      <div className=\"NavMenuProfiles__header\">\n        <p className=\"NavMenuProfiles__title\">Brothers-in-law</p>\n      </div>\n\n      {/* USERS */}\n      <div className=\"NavMenuProfiles__profiles\">\n        {profiles\n          .filter(({ profileId }) => profileId !== selectedProfileId)\n          .map(({ lastUpdateTime, name, online, profileId, src }) => (\n            <div className=\"NavMenuProfiles__profile\" key={profileId}>\n              <img\n                alt={profileId}\n                className=\"NavMenuProfiles__avatar\"\n                src={src}\n              />\n              <img\n                alt=\"status-icon\"\n                className=\"NavMenuProfiles__status\"\n                src={getIconPath(lastUpdateTime, online)}\n              />\n              <p className=\"NavMenuProfiles__name\" key={profileId}>\n                {name}\n              </p>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenuProfiles;\n","export default __webpack_public_path__ + \"static/media/close-white-icon.c6df9cb2.svg\";","import { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenuChannels from './NavMenuChannels/NavMenuChannels';\nimport NavMenuProfiles from './NavMenuProfiles/NavMenuProfiles';\n\n// others\nimport CloseWhiteIcon from '../../assets/images/icons/close-white-icon.svg';\n\n// store\nimport { getAttributesFromSelectedProfile } from '../../store/profiles/selectors';\n\n// styles\nimport './nav-menu-styles.scss';\n\ntype TProps = {\n  visible: boolean;\n  setVisible: (flag: boolean) => void;\n};\n\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\n  const onClickHandler = (): void => setVisible(false);\n  const { name, src } = useSelector(getAttributesFromSelectedProfile);\n\n  return (\n    <div\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\n      onClick={onClickHandler}\n    >\n      {/* BACKGROUND */}\n      <div\n        className={`NavMenu__background ${\n          visible && 'NavMenu__background--visible'\n        }`}\n      />\n\n      {/* CONTAINER */}\n      <div\n        className={`NavMenu__container ${\n          visible && 'NavMenu__container--visible'\n        }`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* HEADER */}\n        <div className=\"NavMenu__header\">\n          <div className=\"NavMenu__profile-data\">\n            <img\n              alt=\"profile-avatar\"\n              className=\"NavMenu__profile-avatar\"\n              src={src}\n            />\n            <p className=\"NavMenu__profile-name\">{name}</p>\n          </div>\n          <img\n            alt=\"close-white-icon\"\n            className=\"NavMenu__button-close\"\n            onClick={onClickHandler}\n            src={CloseWhiteIcon}\n          />\n        </div>\n\n        {/* CONTENT */}\n        <div className=\"NavMenu__content\">\n          <NavMenuChannels closeNavMenu={onClickHandler} />\n          <NavMenuProfiles />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavMenu;\n","export default __webpack_public_path__ + \"static/media/close-icon.51d90ac8.svg\";","export default __webpack_public_path__ + \"static/media/gear-icon.7598d1ce.svg\";","export default __webpack_public_path__ + \"static/media/modify-size-icon.54599b76.svg\";","// @ts-nocheck\nimport { FunctionComponent, useContext, useState } from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// core\nimport { Context } from '../../../core/ContextProvider/ContextProvider';\n\n// others\nimport CloseIcon from '../../../assets/images/icons/close-icon.svg';\nimport GearIcon from '../../../assets/images/icons/gear-icon.svg';\nimport ModifySizeIcon from '../../../assets/images/icons/modify-size-icon.svg';\nimport { TContext } from '../../../core/ContextProvider/types';\n\n// styles\nimport './page-header-settings-menu-styles.scss';\n\nconst PageHeaderSettingsMenu: FunctionComponent<{}> = () => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { setMargin }: TContext = useContext(Context);\n  const onClickOpenHandler = (event: Event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onClickCloseHandler = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className=\"PageHeaderSettingsMenu\">\n      <img alt=\"gear-icon\" onClick={onClickOpenHandler} src={GearIcon} />\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={onClickCloseHandler}\n      >\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(1)}\n        >\n          Up\n          <img alt=\"gear-icon\" src={ModifySizeIcon} />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={() => setMargin(-1)}\n        >\n          Down\n          <img\n            alt=\"reverted-gear-icon\"\n            className=\"PageHeaderSettingsMenu__icon-rotate\"\n            src={ModifySizeIcon}\n          />\n        </MenuItem>\n        <MenuItem\n          className=\"PageHeaderSettingsMenu__item\"\n          onClick={onClickCloseHandler}\n        >\n          Close\n          <img alt=\"close-icon\" src={CloseIcon} />\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\nexport default PageHeaderSettingsMenu;\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.4f615ee5.svg\";","import { FunctionComponent, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n// components\nimport NavMenu from '../NavMenu/NavMenu';\nimport PageHeaderSettingsMenu from './PageHeaderSettingsMenu/PageHeaderSettingsMenu';\n\n// others\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\nimport { TChannel } from '../../store/channels/types';\nimport { TProfile } from '../../store/profiles/types';\n\n// services\nimport isOnlineUser from '../../services/isOnlineUser';\n\n// store\nimport { getAttributesFromSelectedChannel } from '../../store/channels/selectors';\nimport {\n  getAttributeFromProfiles,\n  getAttributeFromSelectedProfile,\n} from '../../store/profiles/selectors';\n\n// styles\nimport './page-header-styles.scss';\n\nconst PageHeader: FunctionComponent<{}> = () => {\n  const [visible, setVisible] = useState(false);\n  const { name, shortcut }: TChannel = useSelector(\n    getAttributesFromSelectedChannel\n  );\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n\n  //@ts-ignore\n  const lastUpdateTime: number = useSelector(\n    getAttributeFromSelectedProfile('lastUpdateTime')\n  );\n\n  const getNumberOfUsersOnline = (): number =>\n    profiles\n      .filter(({ profileId }) => profileId !== selectedProfileId)\n      .reduce(\n        (total, { lastUpdateTime: lastUpdateTimeProfile, online }) =>\n          isOnlineUser(lastUpdateTime, lastUpdateTimeProfile, online)\n            ? ++total\n            : total,\n        0\n      );\n\n  return (\n    <header className=\"PageHeader\">\n      {/* LEFT COLUMN */}\n      <div className=\"PageHeader__left-column\">\n        {/* PICKER */}\n        <div className=\"PageHeader__channel-picker\">{shortcut}</div>\n\n        {/* DETAILS */}\n        <div>\n          <p className=\"PageHeader__title\">#{name}</p>\n          <p className=\"PageHeader__users\">\n            {getNumberOfUsersOnline()} Brothers online\n          </p>\n        </div>\n      </div>\n\n      {/* RIGHT COLUMN */}\n      <div className=\"PageHeader__right-column\">\n        <PageHeaderSettingsMenu />\n        <img\n          alt=\"hamburger-menu\"\n          className=\"PageHeader__hamburger-menu\"\n          onClick={() => setVisible(true)}\n          src={HamburgerMenu}\n        />\n      </div>\n\n      {/* Nav Left Menu */}\n      <NavMenu visible={visible} setVisible={setVisible} />\n    </header>\n  );\n};\n\nexport default PageHeader;\n","export default __webpack_public_path__ + \"static/media/back.3f83d067.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.7e1048a6.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.16de0a9b.svg\";","// @ts-nocheck\n// others\n\nconst loadImage = (\n  event: Event,\n  setImageData: (file: string | ArrayBuffer | null) => void\n) => {\n  const reader = new FileReader();\n  const { files } = event.target;\n\n  reader.onload = (e) => {\n    setImageData({\n      file: files[0],\n      src: e.target.result,\n    });\n  };\n\n  reader.readAsDataURL(files[0]);\n};\n\nexport default loadImage;\n","// @ts-nocheck\nimport { FunctionComponent, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// others\nimport BackIcon from '../../assets/images/icons/back.svg';\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\nimport { TImageData } from '../../types';\nimport { TProfileFormData } from '../../store/profiles/types';\n\n// services\nimport loadImage from './services/loadImage';\n\n// store\nimport { isPendingSelector } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-form-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  name?: string;\n  imageData?: TImageData;\n  submitHandler: (formData: TProfileFormData) => void;\n  title: string;\n};\n\nconst ProfileForm: FunctionComponent<TProps> = ({\n  clickHandler,\n  name: initialName = '',\n  imageData: initialImageData = null,\n  submitHandler,\n  title,\n}) => {\n  const isPending = useSelector(isPendingSelector);\n  const inputRef = useRef(null);\n  const [imageData, setImageData] = useState(initialImageData);\n  const [name, setName] = useState(initialName);\n\n  const onSubmitHandler = (event: Event) => {\n    event.preventDefault();\n\n    if (imageData && name) {\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\n    }\n  };\n\n  return (\n    <div className=\"ProfileForm__form-wrapper\">\n      <h2 className=\"ProfileForm__title\">\n        <img\n          alt=\"back-icon\"\n          className=\"ProfileForm__icon\"\n          onClick={clickHandler}\n          src={BackIcon}\n        />\n        {title}\n      </h2>\n\n      {/* FORM */}\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\n        {/* AVATAR */}\n        <div\n          className={`ProfileForm__avatar ${\n            imageData ? 'ProfileForm__avatar--selected' : ''\n          }`}\n        >\n          {imageData ? (\n            <img\n              alt=\"avatar\"\n              className=\"ProfileForm__image\"\n              src={imageData.src}\n            />\n          ) : (\n            <img\n              alt=\"empty\"\n              className=\"ProfileForm__empty-picture\"\n              src={EmptyImage}\n            />\n          )}\n\n          {/* BUTTON */}\n          <img\n            alt=\"button-icon\"\n            className=\"ProfileForm__button-picture\"\n            onClick={() => inputRef.current.click()}\n            src={ButtonPicture}\n          />\n          <input\n            className=\"ProfileForm__input-file\"\n            onChange={(event: Event) => loadImage(event, setImageData)}\n            ref={inputRef}\n            type=\"file\"\n          />\n        </div>\n\n        {/* INPUT NAME */}\n        <TextField\n          className=\"ProfileForm__input-name\"\n          onChange={(e) => setName(e.target.value)}\n          label=\"Profile name:\"\n          value={name}\n        />\n\n        <Button\n          className=\"ProfileForm__submit-button\"\n          color=\"primary\"\n          disabled={isPending}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Create Profile\n          {isPending && (\n            <CircularProgress\n              className=\"ProfileForm__spinner\"\n              color=\"primary\"\n              size={20}\n            />\n          )}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","import { FunctionComponent } from 'react';\nimport { useDispatch } from 'react-redux';\n\n// components\nimport ProfileForm from '../ProfileForm/ProfileForm';\n\n// store\nimport { createProfile } from '../../store/profiles/actions';\nimport { TProfileFormData } from '../../store/profiles/types';\n\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\n  const dispatch = useDispatch();\n\n  const submitHandler = (formData: TProfileFormData) =>\n    dispatch(createProfile(formData));\n\n  return (\n    //@ts-ignore\n    <ProfileForm\n      submitHandler={submitHandler}\n      title=\"Create Profile:\"\n      {...restProps}\n    />\n  );\n};\n\nexport default CreateProfileForm;\n","// @ts-nocheck\nimport { MutableRefObject, useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nconst useOutsideClickCard = (ref: MutableRefObject<HTMLDivElement>) => {\n  const [isFocus, setFocus] = useState(false);\n  const eventType = isMobile ? 'touchstart' : 'mousedown';\n\n  const handleClickOutside = (event: Event): void => {\n    const target = event.target as Node;\n\n    if (ref.current) {\n      if (!isFocus && ref.current.contains(target)) {\n        setFocus(true);\n      } else if (isFocus && !ref.current.contains(target)) {\n        setFocus(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(eventType, handleClickOutside);\n\n    return () => {\n      document.removeEventListener(eventType, handleClickOutside);\n    };\n    // eslint-disable-next-line\n  }, [ref, isFocus]);\n\n  return isFocus;\n};\n\nexport default useOutsideClickCard;\n","// @ts-nocheck\nimport { useCallback, useRef, useState } from 'react';\n\nconst usePress = (\n  pressHandler,\n  clickHandler,\n  { shouldPreventDefault = true, delay = 1000 } = {}\n) => {\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const timeout = useRef();\n  const target = useRef();\n\n  const start = useCallback(\n    (event) => {\n      if (shouldPreventDefault && event.target) {\n        event.target.addEventListener('touchend', preventDefault, {\n          passive: false,\n        });\n        target.current = event.target;\n      }\n\n      timeout.current = setTimeout(() => {\n        pressHandler(event);\n        setLongPressTriggered(true);\n      }, delay);\n    },\n    [pressHandler, delay, shouldPreventDefault]\n  );\n\n  const clear = useCallback(\n    (_, shouldTriggerClick = true) => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n      }\n\n      if (shouldTriggerClick && !longPressTriggered) {\n        clickHandler();\n      }\n\n      if (shouldPreventDefault && target.current) {\n        target.current.removeEventListener('touchend', preventDefault);\n      }\n\n      setLongPressTriggered(false);\n    },\n    [shouldPreventDefault, clickHandler, longPressTriggered]\n  );\n\n  return {\n    onMouseDown: (e) => start(e),\n    onTouchStart: (e) => start(e),\n    onMouseUp: (e) => clear(e),\n    onMouseLeave: (e) => clear(e, false),\n    onTouchEnd: (e) => clear(e),\n    clearManual: () => clear(null, false),\n  };\n};\n\nconst isTouchEvent = (event) => {\n  return 'touches' in event;\n};\n\nconst preventDefault = (event) => {\n  if (!isTouchEvent(event)) return;\n\n  if (event.touches.length < 2 && event.preventDefault) {\n    event.preventDefault();\n  }\n};\n\nexport default usePress;\n","export default __webpack_public_path__ + \"static/media/edit-icon.a04997a1.svg\";","export default __webpack_public_path__ + \"static/media/plus.553def23.svg\";","export default __webpack_public_path__ + \"static/media/trash-icon.66b5ea88.svg\";","import {\n  FunctionComponent,\n  MutableRefObject,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\n// hooks\nimport useOutsideClickCard from './useOutsideClickCard';\nimport usePress from './usePress';\n\n// others\nimport EditIcon from '../../assets/images/icons/edit-icon.svg';\nimport PlusIcon from '../../assets/images/icons/plus.svg';\nimport TrashIcon from '../../assets/images/icons/trash-icon.svg';\n\n// styles\nimport './profile-picker-styles.scss';\n\ntype TProps = {\n  clickHandler: () => void;\n  mode?: 'add' | 'select';\n  name?: string;\n  src?: string;\n};\n\nconst ProfilePicker: FunctionComponent<TProps> = ({\n  clickHandler,\n  mode = 'add',\n  name,\n  src,\n}) => {\n  // @ts-ignore\n  const cardRef: MutableRefObject<HTMLDivElement> = useRef(null);\n  const isFocus = useOutsideClickCard(cardRef);\n  const [overlayVisible, setOverlayVisible] = useState(false);\n  const isOverlayVisible = mode === 'select' && overlayVisible && isFocus;\n\n  const onPressHandler = () => {\n    setOverlayVisible(true);\n  };\n\n  const onClickHandler = () => {\n    clickHandler();\n  };\n\n  const { clearManual, ...restPropsPress } = usePress(\n    onPressHandler,\n    onClickHandler\n  );\n\n  useEffect(() => {\n    if (!isFocus && overlayVisible) {\n      setOverlayVisible(false);\n      clearManual();\n    }\n    // eslint-disable-next-line\n  }, [isFocus, overlayVisible]);\n\n  return (\n    <section\n      className={`ProfilePicker ${\n        isOverlayVisible ? 'ProfilePicker--blur' : ''\n      }`}\n      ref={cardRef}\n    >\n      <div\n        className={`ProfilePicker__card ProfilePicker--${mode}__card ${\n          isOverlayVisible ? 'ProfilePicker__card--blur' : ''\n        }`}\n        {...restPropsPress}\n      >\n        {/* TITLE */}\n        <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\n          {name ? name : 'Create:'}\n        </p>\n\n        {/* CIRCLE */}\n        <div className={`ProfilePicker__button ProfilePicker--${mode}__button`}>\n          <img\n            alt={name ? `${name}-avatar` : 'icon'}\n            className={`ProfilePicker__image ProfilePicker--${mode}__image`}\n            src={src ? src : PlusIcon}\n          />\n        </div>\n      </div>\n\n      {/* OVERLAY */}\n      {isOverlayVisible && (\n        <div className=\"ProfilePicker__overlay\">\n          <div className=\"ProfilePicker__wrapper\">\n            <p className=\"ProfilePicker__help-text\">\n              Select one of the options:\n            </p>\n            <div className=\"ProfilePicker__options\">\n              <div className=\"ProfilePicker__option\">\n                <img alt=\"edit-icon\" src={EditIcon} />\n              </div>\n              <div className=\"ProfilePicker__option\">\n                <img alt=\"trash-icon\" src={TrashIcon} />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePicker;\n","// @ts-nocheck\nexport const REDUCER_KEY = 'auth';\n\nexport enum AuthActionsType {\n  login = `${REDUCER_KEY}/login`,\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\n  loginError = `${REDUCER_KEY}/loginError`,\n}\n","import { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\n\n// others\nimport { Mode } from '../ProfilePickerSection/enums';\nimport { TProfile } from '../../store/profiles/types';\n\n// store\nimport { selectProfile } from '../../store/profiles/actions';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\n\n// styles\nimport './profile-picker-list-styles.scss';\n\ntype TProps = {\n  clickHandler: (mode: Mode) => void;\n};\n\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\n  const dispatch = useDispatch();\n  const profiles: Array<TProfile> = useSelector(\n    getAttributeFromProfiles('data')\n  );\n\n  return (\n    <section className=\"ProfilePickerList\">\n      {/* CONTENT */}\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\n      <p className=\"ProfilePickerList__description\">\n        Select a profile to start a conversation with your brother-in-law.\n      </p>\n\n      {/* PICKERS */}\n      <div className=\"ProfilePickerList__pickers\">\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\n\n        {/* LIST */}\n        {/* @ts-ignore */}\n        {profiles.map(({ name, profileId, src }) => (\n          <ProfilePicker\n            clickHandler={() => dispatch(selectProfile(profileId))}\n            key={profileId}\n            mode=\"select\"\n            name={name}\n            src={src}\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default ProfilePickerList;\n","import { FunctionComponent, useState } from 'react';\n\n// components\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\n\n// others\nimport { Mode } from './enums';\n\n// styles\nimport './profile-picker-section-styles.scss';\n\nconst ProfilePickerSection: FunctionComponent = () => {\n  const [mode, setMode] = useState(Mode.listProfiles);\n\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\n\n  return (\n    <section className=\"ProfilePickerSection\">\n      {mode === Mode.listProfiles ? (\n        // LIST\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\n      ) : (\n        // @ts-ignore\n        <CreateProfileForm clickHandler={onClickBackHandler} />\n      )}\n    </section>\n  );\n};\n\nexport default ProfilePickerSection;\n","import { FunctionComponent } from 'react';\n\n// styles\nimport './spinner-styles.scss';\n\nconst Spinner: FunctionComponent = () => <div className=\"Spinner\" />;\n\nexport default Spinner;\n","export default __webpack_public_path__ + \"static/media/gentleman.f5e3e398.svg\";","import { FunctionComponent, useEffect, useState } from 'react';\n\n// components\nimport Spinner from '../Spinner/Spinner';\n\n// others\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\n\n// styles\nimport './page-loader-styles.scss';\n\nconst PageLoader: FunctionComponent = () => {\n  const [visibleContent, setVisibleContent] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => setVisibleContent(false), 5000);\n  }, []);\n\n  return (\n    <div className=\"PageLoader\">\n      {/* CONTENT */}\n      {visibleContent && (\n        <div className=\"PageLoader__content\">\n          <h2 className=\"PageLoader__title\">Welcome Gentleman:</h2>\n          <img\n            alt=\"gentleman-logo\"\n            className=\"PageLoader__image-welcome\"\n            src={Gentleman}\n          />\n        </div>\n      )}\n\n      {/* SPINNER */}\n      <div\n        className={`PageLoader__spinner ${\n          !visibleContent ? 'PageLoader__spinner--show' : ''\n        }`}\n      >\n        <Spinner />\n      </div>\n    </div>\n  );\n};\n\nexport default PageLoader;\n","// @ts-nocheck\nimport getFp from 'lodash/fp/get';\nimport { createSelector, Selector } from 'reselect';\n\n// store\nimport { REDUCER_KEY } from './actionsType';\nimport { TMainState } from '../../types';\nimport { TLocationState } from './types';\n\nexport const authSelector: Selector<TMainState, TLocationState> =\n  getFp(REDUCER_KEY);\n\nexport const errorMessageSelector: Selector<TMainState, boolean> =\n  createSelector(authSelector, getFp('error'));\n\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\n  authSelector,\n  getFp('isPending')\n);\n","import { createSelector, Selector } from 'reselect';\n\n// others\nimport { TMainState } from '../types';\n\n// store\nimport { channelsLoadedSelector } from './channels/selectors';\nimport {\n  errorMessageSelector,\n  isPendingSelector as isPendingAuthSelector,\n} from './auth/selectors';\nimport { profilesLoadedSelector } from './profiles/selectors';\nimport { typingsLoadedSelector } from './typings/selectors';\n\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    isPendingAuthSelector,\n    errorMessageSelector,\n    (isPending, errorMessage) => !isPending && !errorMessage\n  );\n\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\n  createSelector(\n    profilesLoadedSelector,\n    channelsLoadedSelector,\n    typingsLoadedSelector,\n    (profilesData, channelsData, typingsData) =>\n      profilesData && channelsData && typingsData\n  );\n","import { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get';\n\n// components\nimport Chat from '../Chat/Chat';\nimport ModalNewUpdates from '../ModalNewUpdates/ModalNewUpdates';\nimport OnlineHandler from '../OnlineHandler/OnlineHandler';\nimport PageHeader from '../PageHeader/PageHeader';\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\nimport PageLoader from '../PageLoader/PageLoader';\n\n// store\nimport { appDataLoadedSelector } from '../../store/selectors';\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\nimport { getAttributeFromChannels } from '../../store/channels/selectors';\nimport { setChannelId } from '../../store/channels/actions';\n\n// styles\nimport './page-styles.scss';\n\nconst Page: FunctionComponent<{}> = () => {\n  const dispatch = useDispatch();\n  const selectedProfileId = useSelector(\n    getAttributeFromProfiles('selectedProfileId')\n  );\n  const selectedChannelId = useSelector(\n    getAttributeFromChannels('selectedChannelId')\n  );\n  const appDataLoaded = useSelector(appDataLoadedSelector);\n  const channels = useSelector(getAttributeFromChannels('channels'));\n\n  useEffect(() => {\n    if (appDataLoaded && !selectedChannelId) {\n      const channelId = get(channels, '0.channelId');\n      dispatch(setChannelId(channelId));\n    }\n    // eslint-disable-next-line\n  }, [appDataLoaded, selectedChannelId]);\n\n  if (!appDataLoaded) {\n    return <PageLoader />;\n  }\n\n  if (!selectedProfileId) {\n    return (\n      <>\n        <ModalNewUpdates />\n        <ProfilePicker />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"Page\">\n      <OnlineHandler />\n      <PageHeader />\n      <Chat />\n    </div>\n  );\n};\n\nexport default Page;\n","import { useEffect, useMemo, FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// components\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport Page from '../Page/Page';\n\n// core\nimport ContextProvider from '../../core/ContextProvider/ContextProvider';\n\n// store\nimport {\n  errorMessageSelector,\n  isPendingSelector,\n} from '../../store/auth/selectors';\nimport { loginAction } from '../../store/auth/actions';\n\nconst App: FunctionComponent<{}> = () => {\n  const isPending = useSelector(isPendingSelector);\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(errorMessageSelector);\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    []\n  );\n\n  useEffect(() => {\n    const password = prompt('Please enter a password:');\n    indexedDB.deleteDatabase('firebaseLocalStorageDb');\n    dispatch(loginAction(password as string));\n    // eslint-disable-next-line\n  }, []);\n\n  if (isPending) {\n    return null;\n  }\n\n  if (errorMessage) {\n    return <ErrorPage />;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ContextProvider>\n        <Page />\n      </ContextProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// store\nimport { AuthActionsType } from './actionsType';\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\n\nexport const loginAction = (payload: string): TLogin => ({\n  type: AuthActionsType.login,\n  payload,\n});\n\nexport const loginActionSuccess = (): TLoginSuccess => ({\n  type: AuthActionsType.loginSuccess,\n});\n\nexport const loginActionError = (payload: string): TLoginError => ({\n  type: AuthActionsType.loginError,\n  payload,\n});\n","export const config = {\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\n  authDomain: 'comics-book.firebaseapp.com',\n  projectId: 'comics-book',\n  storageBucket: 'comics-book.appspot.com',\n  messagingSenderId: '426496482303',\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\n};\n","const databaseErrorHandler = (error: string): void => {\n  // eslint-disable-next-line\n  console.error(error);\n};\n\nexport default databaseErrorHandler;\n","// @ts-nocheck\nconst getData = (values: any): void => {\n  const keys = Object.keys(values);\n  const data = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    data.push(values[keys[i]]);\n  }\n  return data;\n};\n\nconst databaseSuccessHandler = (\n  response: any,\n  actions: (data: any) => void = null\n): void => {\n  const values = response.val();\n  actions(getData(values || {}));\n};\n\nexport default databaseSuccessHandler;\n","// @ts-nocheck\n// others\nimport { DatabaseColumns } from '../enums';\n\n// services\nimport databaseErrorHandler from './databaseErrorHandler';\nimport databaseSuccessHandler from './databaseSuccessHandler';\n\nconst databaseHandler = (\n  firebase: any,\n  actions: (data: any) => void,\n  ref: DatabaseColumns\n) => {\n  firebase\n    .database()\n    .ref(ref)\n    .on(\n      'value',\n      (response: any) => databaseSuccessHandler(response, actions),\n      databaseErrorHandler\n    );\n};\n\nexport default databaseHandler;\n","import { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase';\n\n// others\nimport { config } from './constants';\nimport { DatabaseColumns } from './enums';\nimport { TChannel } from '../../store/channels/types';\nimport { TProfile } from '../../store/profiles/types';\nimport { TTyping } from '../../store/typings/types';\n\n// store\nimport { isAuthenticatedSelector } from '../../store/selectors';\nimport { fetchChannelsSuccess } from '../../store/channels/actions';\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\nimport { fetchTypingsSuccess } from '../../store/typings/actions';\n\n// services\nimport databaseHandler from './services/databaseHandler';\n\nconst Firebase: FunctionComponent<{}> = () => {\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    firebase.initializeApp(config);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const profilesActions = (payload: Array<TProfile>): void => {\n      dispatch(fetchProfilesSuccess(payload));\n    };\n    const channelsActions = (payload: Array<TChannel>): void => {\n      dispatch(fetchChannelsSuccess(payload));\n    };\n    const typingsActions = (payload: Array<TTyping>): void => {\n      dispatch(fetchTypingsSuccess(payload));\n    };\n\n    if (isAuthenticated) {\n      setTimeout(() => {\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\n        databaseHandler(firebase, channelsActions, DatabaseColumns.channels);\n        databaseHandler(firebase, typingsActions, DatabaseColumns.typings);\n      }, 8000);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated]);\n\n  return null;\n};\n\nexport default Firebase;\n","// @ts-nocheck\n// others\nimport { TLoginError } from './types';\n\n// store\nimport { AuthActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\nimport { TAuthState } from './types';\n\nconst initialState: TAuthState = {\n  error: '',\n  isPending: true,\n};\n\nconst loginSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst loginError = (\n  state: TAuthState,\n  { payload: error }: TLoginError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst auth = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case AuthActionsType.loginSuccess:\n      return loginSuccess(state, action);\n    case AuthActionsType.loginError:\n      return loginError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","// @ts-nocheck\n// others\nimport {\n  TCreateChannelError,\n  TFetchChannelsSuccess,\n  TChannelsState,\n  TSendMessageError,\n  TSetChannelId,\n  TSetStatusTypingError,\n} from './types';\n\n// store\nimport { ChannelsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TChannelsState = {\n  channels: null,\n  error: '',\n  isPending: true,\n  selectedChannelId: '',\n};\n\nconst createChannel = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createChannelSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createChannelError = (\n  state: TAuthState,\n  { payload: error }: TCreateChannelError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchChannelsSuccess = (\n  state: TAuthState,\n  { payload: channels }: TFetchChannelsSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  channels,\n});\n\nconst fetchChannelsError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst sendMessage = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst sendMessageError = (\n  state: TAuthState,\n  { payload: error }: TSendMessageError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst setChannelId = (\n  state: TAuthState,\n  { payload: selectedChannelId }: TSetChannelId\n): TAuthState => ({\n  ...state,\n  selectedChannelId,\n});\n\nconst setStatusTypingError = (\n  state: TAuthState,\n  { payload: error }: TSetStatusTypingError\n): TAuthState => ({\n  ...state,\n  error,\n});\n\nconst channels = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ChannelsActionsType.createChannel:\n      return createChannel(state, action);\n    case ChannelsActionsType.createChannelSuccess:\n      return createChannelSuccess(state, action);\n    case ChannelsActionsType.createChannelsError:\n      return createChannelError(state, action);\n    case ChannelsActionsType.fetchChannelsSuccess:\n      return fetchChannelsSuccess(state, action);\n    case ChannelsActionsType.fetchChannelsError:\n      return fetchChannelsError(state, action);\n    case ChannelsActionsType.sendMessage:\n      return sendMessage(state, action);\n    case ChannelsActionsType.sendMessageError:\n      return sendMessageError(state, action);\n    case ChannelsActionsType.setChannelId:\n      return setChannelId(state, action);\n    case ChannelsActionsType.setStatusTypingError:\n      return setStatusTypingError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default channels;\n","// @ts-nocheck\n// others\nimport {\n  TCreateProfileError,\n  TFetchProfilesSuccess,\n  TProfilesState,\n  TSelectProfile,\n} from './types';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TProfilesState = {\n  data: null,\n  error: '',\n  isPending: true,\n  selectedProfileId: '',\n};\n\nconst createProfile = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: true,\n});\n\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst createProfileError = (\n  state: TAuthState,\n  { payload: error }: TCreateProfileError\n): TAuthState => ({\n  ...state,\n  error,\n  isPending: false,\n});\n\nconst fetchProfilesSuccess = (\n  state: TAuthState,\n  { payload: data }: TFetchProfilesSuccess\n): TAuthState => ({\n  ...state,\n  isPending: false,\n  data,\n});\n\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\n  ...state,\n  isPending: false,\n});\n\nconst setProfileId = (\n  state: TAuthState,\n  { payload: selectedProfileId }: TSelectProfile\n): TAuthState => ({\n  ...state,\n  selectedProfileId,\n});\n\nconst profiles = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case ProfilesActionsType.createProfile:\n      return createProfile(state, action);\n    case ProfilesActionsType.createProfileSuccess:\n      return createProfileSuccess(state, action);\n    case ProfilesActionsType.createProfileError:\n      return createProfileError(state, action);\n    case ProfilesActionsType.fetchProfilesSuccess:\n      return fetchProfilesSuccess(state, action);\n    case ProfilesActionsType.fetchProfilesError:\n      return fetchProfilesError(state, action);\n    case ProfilesActionsType.selectProfile:\n      return setProfileId(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default profiles;\n","// @ts-nocheck\n// others\nimport { TTypingsState, TSetStatusTypingError } from './types';\n\n// store\nimport { TypingsActionsType } from './actionsType';\nimport { TAnyAction } from '../../types';\n\nconst initialState: TTypingsState = {\n  error: '',\n  typings: null,\n};\n\nconst fetchTypingsSuccess = (\n  state: TAuthState,\n  { payload: typings }: TFetchChannelsSuccess\n): TAuthState => ({\n  ...state,\n  typings,\n});\n\nconst fetchTypingsError = (\n  state: TAuthState,\n  { payload: error }: TSetStatusTypingError\n): TAuthState => ({\n  ...state,\n  error,\n});\n\nconst setStatusTypingError = (\n  state: TAuthState,\n  { payload: error }: TSetStatusTypingError\n): TAuthState => ({\n  ...state,\n  error,\n});\n\nconst typings = (\n  state: TAuthState = initialState,\n  action: TAnyAction\n): TAuthState => {\n  switch (action.type) {\n    case TypingsActionsType.fetchTypingsSuccess:\n      return fetchTypingsSuccess(state, action);\n    case TypingsActionsType.fetchTypingsError:\n      return fetchTypingsError(state, action);\n    case TypingsActionsType.setStatusTypingError:\n      return setStatusTypingError(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default typings;\n","// @ts-nocheck\nimport { combineReducers } from 'redux';\n\n// store\nimport auth from './auth/reducer';\nimport channels from './channels/reducer';\nimport profiles from './profiles/reducer';\nimport typings from './typings/reducer';\n\nconst reducers = { auth, channels, profiles, typings };\n\nconst createRootReducer = () =>\n  combineReducers({\n    ...reducers,\n  });\n\nexport default createRootReducer;\n","// @ts-nocheck\nimport { PutEffect, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\n\n// others\nimport { EMAIL } from '../../constants';\n\n// store\nimport { loginActionError, loginActionSuccess } from './actions';\n\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\n  const password = data.payload;\n\n  try {\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\n    yield put(loginActionSuccess());\n  } catch (error) {\n    const { code } = error;\n    yield put(loginActionError(code));\n  }\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { login } from './saga';\nimport { AuthActionsType } from './actionsType';\n\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(AuthActionsType.login, login),\n  ]);\n}\n","// @ts-nocheck\n// others\nimport { TChannel } from '../../../store/channels/types';\nimport { TProfile } from '../../../store/profiles/types';\n\nconst generateId = (data: Array<TProfile | TChannel>, keyId: string) => {\n  const result: Array<string> = [];\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  do {\n    result.splice(0, result.length);\n    for (let i = 0; i < 9; i++) {\n      result.push(\n        characters.charAt(Math.floor(Math.random() * characters.length))\n      );\n    }\n  } while (data.find((data) => data[keyId] === result.join('')));\n\n  return result.join('');\n};\n\nexport default generateId;\n","// @ts-nocheck\nimport { delay, PutEffect, put, select } from 'redux-saga/effects';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { TChannel } from './types';\n\n// services\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport {\n  createChannelSuccess,\n  createChannelError,\n  sendMessageSuccess,\n  sendMessageError,\n} from './actions';\nimport {\n  getAttributeFromChannels,\n  getAttributeFromSelectedChannel,\n} from './selectors';\n\nexport function* createChannel({ payload }): Generator<PutEffect<any>> {\n  const { name, shortcut } = payload;\n  const data = yield select(getAttributeFromChannels('channels'));\n  const channelId = generateId(data, 'channelId');\n\n  try {\n    yield delay(1000);\n    yield getRefDatabase([DatabaseColumns.channels]).set([\n      ...data,\n      { channelId, name, shortcut },\n    ]);\n    yield put(createChannelSuccess());\n  } catch (error) {\n    yield put(createChannelError(error));\n  }\n}\n\nexport function* sendMessage({ payload }): Generator<PutEffect<any>> {\n  const channels: Array<TChannel> = yield select(\n    getAttributeFromChannels('channels')\n  );\n  const selectedChannelId = yield select(\n    getAttributeFromChannels('selectedChannelId')\n  );\n  const messages =\n    (yield select(getAttributeFromSelectedChannel('messages'))) || [];\n  const indexOfChannel = channels.findIndex(\n    ({ channelId }) => channelId === selectedChannelId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.channels,\n      indexOfChannel,\n      'messages',\n    ]).set([...messages, payload]);\n    yield put(sendMessageSuccess());\n  } catch (error) {\n    yield put(sendMessageError(error));\n  }\n}","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createChannel, sendMessage } from './saga';\nimport { ChannelsActionsType } from './actionsType';\n\nexport function* watchChannels(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    takeEvery(ChannelsActionsType.createChannel, createChannel),\n    takeEvery(ChannelsActionsType.sendMessage, sendMessage),\n  ]);\n}\n","// @ts-nocheck\nimport firebase from 'firebase';\nimport { eventChannel } from 'redux-saga';\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\nimport { TFileUploadPayload } from './types';\n\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\n  const { action, file, path }: TFileUploadPayload = payload;\n\n  try {\n    const uploadTask = firebase.storage().ref(path).put(file);\n    const channel = eventChannel((emit) =>\n      uploadTask.on('state_changed', emit)\n    );\n    let src = '';\n\n    yield takeEvery(channel, () => {});\n    yield uploadTask;\n    yield uploadTask.snapshot.ref\n      .getDownloadURL()\n      .then((response) => (src = response));\n    yield put(action({ result: 'success', src }));\n  } catch (error) {\n    yield put(action({ error, result: 'error' }));\n  }\n}\n","// @ts-nocheck\nexport const REDUCER_KEY = 'common';\n\nexport enum CommonActionsType {\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\n}\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { uploadImage } from './saga';\nimport { CommonActionsType } from './actionsType';\n\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\n  ]);\n}\n","// @ts-nocheck\n//others\nimport { TReturnablePayload } from '../../../store/common/types';\n\nconst afterUploadImageHandler = ({\n  error,\n  result,\n  src,\n}: TReturnablePayload) => {\n  if (result === 'error') {\n    throw error;\n  }\n  return src;\n};\n\nexport default afterUploadImageHandler;\n","// others\nimport { TFileUploadPayload, TUploadFile } from './types';\n\n// store\nimport { CommonActionsType } from './actionsType';\n\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\n  type: CommonActionsType.uploadFile,\n  payload,\n});\n","// @ts-nocheck\nimport { delay, PutEffect, put, select, take } from 'redux-saga/effects';\nimport { TProfileFormData } from './types';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { StoragePath } from '../../enums';\nimport { TProfile } from './types';\nimport { UPDATE_DELAY_TIME } from '../../constants';\n\n// services\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\nimport generateId from '../../components/Firebase/services/generateId';\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\n\n// store\nimport { ProfilesActionsType } from './actionsType';\nimport {\n  createProfileSuccess,\n  createProfileError,\n  uploadImageFinished,\n  selectProfileError,\n  updateTimeProfileError,\n} from './actions';\nimport { uploadFile } from '../common/actions';\nimport { getAttributeFromProfiles } from './selectors';\n\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\n  const {\n    backToProfileList,\n    name,\n    imageData: { file },\n  }: TProfileFormData = payload;\n  const path = `${StoragePath.profiles}/${name}`;\n  const data = yield select(getAttributeFromProfiles('data'));\n  const profileId = generateId(data, 'profileId');\n\n  try {\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\n\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\n    const src = afterUploadImageHandler(payload);\n\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\n      ...data,\n      {\n        lastUpdateTime: new Date().getTime(),\n        name,\n        online: false,\n        profileId,\n        src,\n      },\n    ]);\n    yield put(createProfileSuccess());\n    yield backToProfileList();\n  } catch (error) {\n    yield put(createProfileError(error));\n  }\n}\n\nexport function* selectProfile({\n  payload: selectedProfileId,\n}): Generator<PutEffect<any>> {\n  const profiles: Array<TProfile> = yield select(\n    getAttributeFromProfiles('data')\n  );\n  const indexProfile = profiles.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'online',\n    ]).set(true);\n  } catch (error) {\n    yield put(selectProfileError(error));\n  }\n}\n\nexport function* updateTimeProfile({\n  payload: selectedProfileId,\n}): Generator<PutEffect<any>> {\n  const data: Array<TProfile> = yield select(getAttributeFromProfiles('data'));\n  const indexProfile = data.findIndex(\n    ({ profileId }) => profileId === selectedProfileId\n  );\n\n  try {\n    yield getRefDatabase([\n      DatabaseColumns.profiles,\n      indexProfile,\n      'lastUpdateTime',\n    ]).set(new Date().getTime());\n    yield delay(UPDATE_DELAY_TIME);\n    yield updateTimeProfile({ payload: selectedProfileId });\n  } catch (error) {\n    yield put(updateTimeProfileError(error));\n  }\n}\n","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { createProfile, selectProfile, updateTimeProfile } from './saga';\nimport { ProfilesActionsType } from './actionsType';\n\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([\n    // @ts-ignore\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\n    takeEvery(ProfilesActionsType.selectProfile, selectProfile),\n    takeEvery(ProfilesActionsType.updateTimeProfile, updateTimeProfile),\n  ]);\n}\n","// @ts-nocheck\nimport { PutEffect, put, select } from 'redux-saga/effects';\n\n// others\nimport { DatabaseColumns } from '../../components/Firebase/enums';\nimport { TChannel, TTyping } from './types';\n\n// services\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\nimport { getTypingsWithRemovedItem } from '../../components/Chat/ChatInput/services';\n\n// store\nimport { getAttributeFromTypings } from './selectors';\nimport { setStatusTypingError } from './actions';\n\nexport function* setStatusTyping({\n  payload,\n}: TTyping & { mode: 'add' | 'remove' }): Generator<PutEffect<any>> {\n  const { channelId, mode, profileId, profileName, time } = payload;\n  const typings: Array<TChannel> =\n    (yield select(getAttributeFromTypings('typings'))) || [];\n\n  try {\n    yield getRefDatabase([DatabaseColumns.typings]).set(\n      mode === 'add'\n        ? [...typings, { channelId, profileId, profileName, time }]\n        : getTypingsWithRemovedItem(typings, profileId)\n    );\n  } catch (error) {\n    yield put(setStatusTypingError(error));\n  }\n}\n","// @ts-nocheck\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\n\n// store\nimport { setStatusTyping } from './saga';\nimport { TypingsActionsType } from './actionsType';\n\nexport function* watchTypings(): Generator<AllEffect<ForkEffect<any>>> {\n  yield all([takeEvery(TypingsActionsType.setStatusTyping, setStatusTyping)]);\n}\n","// @ts-nocheck\nimport { SagaMiddleware } from 'redux-saga';\n\n// store\nimport { watchAuth } from './auth/watch';\nimport { watchChannels } from './channels/watch';\nimport { watchCommonStore } from './common/watch';\nimport { watchProfiles } from './profiles/watch';\nimport { watchTypings } from './typings/watch';\n\nconst watches = [\n  watchAuth,\n  watchChannels,\n  watchCommonStore,\n  watchProfiles,\n  watchTypings,\n];\n\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\n  for (const watch of watches) sagaMiddleware.run(watch);\n};\n\nexport default sagaMiddlewareRuns;\n","// @ts-nocheck\nimport {\n  Action,\n  applyMiddleware,\n  CombinedState,\n  createStore,\n  Store,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// store\nimport reducers from './reducers';\nimport sagaMiddlewareRuns from './watchers';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configureStore = (): Store<CombinedState<any>, Action> => {\n  const store = createStore(\n    reducers(),\n    {},\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\n  );\n  sagaMiddlewareRuns(sagaMiddleware);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n// components\nimport App from './components/App/App';\nimport Firebase from './components/Firebase/Firebase';\n\n// store\nimport configureStore from './store/configureStore';\n\n// styles\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Firebase />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}