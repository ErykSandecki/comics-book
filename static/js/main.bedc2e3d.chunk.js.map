{"version":3,"sources":["enums.ts","assets/images/icons/send-icon.svg","components/Chat/ChatInput/ChatInput.tsx","components/Chat/ChatMessages/ChatMessages.tsx","core/ContextProvider/ContextProvider.tsx","components/Firebase/enums.ts","components/Chat/Chat.tsx","store/profiles/actionsType.ts","components/Firebase/services/getRefDatabase.ts","components/OnlineHandler/useOnDisconnectHandlers.ts","store/profiles/selectors.ts","store/channels/actionsType.ts","store/profiles/actions.ts","components/OnlineHandler/OnlineHandler.tsx","store/channels/actions.ts","components/ProfilePickerSection/enums.ts","store/channels/selectors.ts","components/NavMenu/NavMenuCreateChannelForm/NavMenuCreateChannelForm.tsx","assets/images/icons/plus-white-icon.svg","components/NavMenu/NavMenuChannels/NavMenuChannels.tsx","assets/images/icons/offline-icon.svg","assets/images/icons/online-icon.svg","components/NavMenu/NavMenuProfiles/NavMenuProfiles.tsx","constants.ts","assets/images/icons/close-white-icon.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/close-icon.svg","assets/images/icons/gear-icon.svg","assets/images/icons/modify-size-icon.svg","components/PageHeader/PageHeaderSettingsMenu/PageHeaderSettingsMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","components/ProfileForm/ProfileForm.tsx","components/CreateProfileForm/CreateProfileForm.tsx","components/ProfilePicker/usePress.ts","assets/images/icons/plus.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","store/selectors.ts","components/Page/Page.tsx","components/App/App.tsx","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/channels/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/saga.ts","store/auth/actions.ts","store/auth/watch.ts","components/Firebase/services/generateId.ts","store/channels/saga.ts","store/channels/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["LocalStorageKey","StoragePath","ChatInput","forwardRef","ref","inputHandler","useState","visibilityPlaceholder","setVisibilityPlaceholder","className","contentEditable","onBlur","event","target","innerText","trim","length","onFocus","onInput","suppressContentEditableWarning","alt","src","SendIcon","ChatMessages","_","DatabaseColumns","Context","createContext","margin","setMargin","ContextProvider","children","parseInt","localStorage","getItem","marginOffset","Provider","value","result","setItem","Chat","messagesRef","useRef","inputRef","useContext","style","height","current","clientHeight","ProfilesActionsType","getRefDatabase","path","refDataBase","firebase","database","i","child","useOnDisconnectHandlers","indexProfile","disconnectProfile","profiles","onDisconnect","set","REDUCER_KEY","ChannelsActionsType","profilesSelector","getFp","isPendingSelector","createSelector","profilesLoadedSelector","composeFp","isArrayFp","getAttributeFromProfiles","attribute","getAttributesFromSelectedProfile","selectedProfileId","findFp","profileId","createProfileError","payload","type","uploadImageFinished","OnlineHandler","dispatch","useDispatch","useSelector","findIndex","useEffect","updateTimeProfile","Mode","createChannelError","createChannelsError","channelsSelector","channelsLoadedSelector","getDefaultChannelId","headFp","getAttributeFromChannels","NavMenuCreateChannelForm","closeModal","openNotifiaction","name","setName","shortcut","setShortcut","isSubmitted","setIsSubmitted","isPending","onSubmit","preventDefault","toUpperCase","createChannel","TextField","onChange","e","label","inputProps","maxLength","Button","color","disabled","size","variant","CircularProgress","NavMenuChannels","closeNavMenu","open","setOpen","visible","setVisible","channels","Alert","props","elevation","onClickHandler","channelId","setChannelId","onClick","PlusWhiteIcon","map","Modal","closeAfterTransition","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Snackbar","autoHideDuration","severity","NavMenuProfiles","lastUpdateTime","getAttributeFromSelectedProfile","getIconPath","lastUpdateTimeProfile","online","OnlineIcon","OfflineIcon","filter","NavMenu","stopPropagation","CloseWhiteIcon","PageHeaderSettingsMenu","anchorEl","setAnchorEl","onClickCloseHandler","currentTarget","GearIcon","Menu","id","keepMounted","Boolean","MenuItem","ModifySizeIcon","CloseIcon","PageHeader","defaultChannelId","selectedChannelId","getAttributesFromSelectedChannel","HamburgerMenu","loadImage","setImageData","reader","FileReader","files","onload","file","readAsDataURL","ProfileForm","clickHandler","initialName","imageData","initialImageData","submitHandler","title","BackIcon","backToProfileList","EmptyImage","click","ButtonPicture","CreateProfileForm","restProps","formData","createProfile","isTouchEvent","touches","usePress","pressHandler","shouldPreventDefault","delay","longPressTriggered","setLongPressTriggered","start","useCallback","addEventListener","passive","setTimeout","clear","shouldTriggerClick","clearTimeout","removeEventListener","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","ProfilePicker","mode","overlayVisible","setOverlayVisible","isOverlayVisible","press","PlusIcon","AuthActionsType","ProfilePickerList","selectProfile","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","index","authSelector","errorMessageSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","channelsData","Page","App","theme","useMemo","createMuiTheme","palette","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseErrorHandler","error","console","getData","values","keys","Object","data","push","databaseSuccessHandler","response","actions","val","databaseHandler","on","Firebase","isAuthenticated","initializeApp","profilesActions","fetchProfilesSuccess","channelsActions","fetchChannelsSuccess","initialState","loginSuccess","state","loginError","createChannelSuccess","fetchChannelsError","createProfileSuccess","fetchProfilesError","setProfileId","reducers","auth","action","createRootReducer","combineReducers","login","password","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","generateId","keyId","characters","splice","charAt","Math","floor","random","find","join","select","watchChannels","uploadImage","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","take","Date","getTime","selectProfileError","updateTimeProfileError","watchProfiles","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bedc2e3d.chunk.js","sourcesContent":["export enum LocalStorageKey {\r\n  marginOffset = 'MARGIN_OFFSET',\r\n}\r\n\r\nexport enum StoragePath {\r\n  profiles = 'PROFILES',\r\n}\r\n","export default __webpack_public_path__ + \"static/media/send-icon.d7969ca4.svg\";","// @ts-nocheck\r\nimport {\r\n  forwardRef,\r\n  ForwardRefExoticComponent,\r\n  RefAttributes,\r\n  useState,\r\n} from 'react';\r\n\r\n// others\r\nimport SendIcon from '../../../assets/images/icons/send-icon.svg';\r\n\r\n// styles\r\nimport './chat-input-styles.scss';\r\n\r\ntype TProps = {\r\n  inputHandler: (event: Event) => void;\r\n};\r\n\r\nconst ChatInput: ForwardRefExoticComponent<\r\n  TProps & RefAttributes<HTMLDivElement>\r\n> = forwardRef<HTMLDivElement, TProps>(({ inputHandler }, ref) => {\r\n  const [visibilityPlaceholder, setVisibilityPlaceholder] = useState(true);\r\n\r\n  const onBlurHandler = (event: Event): void => {\r\n    const { target } = event;\r\n\r\n    if (target.innerText.trim().length === 0) {\r\n      setVisibilityPlaceholder(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ChatInput\" ref={ref}>\r\n      <p\r\n        className=\"ChatInput__text-field\"\r\n        contentEditable={true}\r\n        onBlur={onBlurHandler}\r\n        onFocus={() => setVisibilityPlaceholder(false)}\r\n        onInput={inputHandler}\r\n        suppressContentEditableWarning\r\n      />\r\n      {visibilityPlaceholder && (\r\n        <span className=\"ChatInput__placeholder\">Message #Meetings:</span>\r\n      )}\r\n      <img alt=\"send-icon\" className=\"ChatInput__send-icon\" src={SendIcon} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ChatInput;\r\n","import { forwardRef, ForwardRefExoticComponent, RefAttributes } from 'react';\r\n\r\n// styles\r\nimport './chat-messages-styles.scss';\r\n\r\nconst ChatMessages: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>> =\r\n  forwardRef<HTMLDivElement, {}>((_, ref) => {\r\n    return <div className=\"ChatMessages\" ref={ref}></div>;\r\n  });\r\n\r\nexport default ChatMessages;\r\n","// @ts-nocheck\r\nimport { createContext, FunctionComponent, ReactNode, useState } from 'react';\r\n\r\n// other\r\nimport { LocalStorageKey } from '../../enums';\r\n\r\ntype TProps = {\r\n  children: ReactNode;\r\n};\r\n\r\nexport const Context: React.Context<any> = createContext({\r\n  margin: 0,\r\n  setMargin: () => {},\r\n});\r\n\r\nconst getMarginFromLocalStorage = (): number =>\r\n  parseInt(localStorage.getItem(LocalStorageKey.marginOffset) || 0);\r\n\r\nconst ContextProvider: FunctionComponent<TProps> = ({ children }) => {\r\n  const [margin, setMargin] = useState(getMarginFromLocalStorage());\r\n\r\n  const setMarginHandler = (value: number): void => {\r\n    const result = margin + value;\r\n\r\n    if (margin > 0 || value !== -1) {\r\n      setMargin(result);\r\n      localStorage.setItem(LocalStorageKey.marginOffset, result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Context.Provider value={{ margin, setMargin: setMarginHandler }}>\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default ContextProvider;\r\n","export enum DatabaseColumns {\r\n  profiles = 'profiles',\r\n  channels = 'channels',\r\n}\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useContext, useRef } from 'react';\r\n\r\n// components\r\nimport ChatInput from './ChatInput/ChatInput';\r\nimport ChatMessages from './ChatMessages/ChatMessages';\r\n\r\n// core\r\nimport { Context } from '../../core/ContextProvider/ContextProvider';\r\n\r\n// others\r\nimport { TContext } from '../../core/ContextProvider/types';\r\n\r\n// styles\r\nimport './chat-styles.scss';\r\n\r\nconst Chat: FunctionComponent<{}> = () => {\r\n  const messagesRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  const { margin }: TContext = useContext(Context);\r\n\r\n  const onInputHandler = (): void => {\r\n    const height = inputRef.current.clientHeight;\r\n    messagesRef.current.style.height = `calc(100% - ${height}px)`;\r\n  };\r\n\r\n  return (\r\n    <section\r\n      className=\"Chat\"\r\n      style={{ height: `calc(100vh - ${80 + margin}px)` }}\r\n    >\r\n      <ChatMessages ref={messagesRef} />\r\n      <ChatInput inputHandler={onInputHandler} ref={inputRef} />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","// @ts-nocheck\r\nexport const REDUCER_KEY = 'profiles';\r\n\r\nexport enum ProfilesActionsType {\r\n  createProfile = `${REDUCER_KEY}/createProfile`,\r\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\r\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\r\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\r\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\r\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\r\n  selectProfile = `${REDUCER_KEY}/selectProfile`,\r\n  selectProfileError = `${REDUCER_KEY}/selectProfileError`,\r\n  updateTimeProfile = `${REDUCER_KEY}/updateTimeProfile`,\r\n  updateTimeProfileError = `${REDUCER_KEY}/updateTimeProfileError`,\r\n}\r\n","import firebase from 'firebase';\r\n\r\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\r\n  let refDataBase = firebase.database().ref(path[0]);\r\n  for (let i = 1; i < path.length; i++) {\r\n    refDataBase = refDataBase.child(path[i]);\r\n  }\r\n  return refDataBase;\r\n};\r\n\r\nexport default getRefDatabase;\r\n","// @ts-nocheck\r\n// others\r\nimport { DatabaseColumns } from '../Firebase/enums';\r\n\r\n// services\r\nimport getRefDatabase from '../Firebase/services/getRefDatabase';\r\n\r\nconst useOnDisconnectHandlers = (indexProfile: number) => {\r\n  const disconnectProfile = () =>\r\n    getRefDatabase([DatabaseColumns.profiles, indexProfile, 'online'])\r\n      .onDisconnect()\r\n      .set(false);\r\n\r\n  return {\r\n    disconnectProfile,\r\n  };\r\n};\r\n\r\nexport default useOnDisconnectHandlers;\r\n","import composeFp from 'lodash/fp/compose';\r\nimport findFp from 'lodash/fp/find';\r\nimport getFp from 'lodash/fp/get';\r\nimport isArrayFp from 'lodash/fp/isArray';\r\nimport { createSelector, Selector } from 'reselect';\r\n\r\n// store\r\nimport { REDUCER_KEY } from './actionsType';\r\nimport { TMainState } from '../../types';\r\nimport { TProfile, TProfilesState } from './types';\r\n\r\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\r\n  getFp(REDUCER_KEY);\r\n\r\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\r\n  createSelector(profilesSelector, getFp('isPending'));\r\n\r\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\r\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\r\n\r\nexport const getAttributeFromProfiles = (\r\n  attribute: string\r\n): Selector<TMainState, any> =>\r\n  createSelector(profilesSelector, getFp(attribute));\r\n\r\nexport const getAttributesFromSelectedProfile = (\r\n  selectedProfileId: string\r\n): Selector<TMainState, TProfile> =>\r\n  // @ts-ignore\r\n  createSelector(\r\n    profilesSelector,\r\n    composeFp(\r\n      findFp(({ profileId }) => profileId === selectedProfileId),\r\n      getFp('data')\r\n    )\r\n  );\r\n\r\nexport const getAttributeFromSelectedProfile = (\r\n  attribute: string,\r\n  selectedProfileId: string\r\n): Selector<TMainState, TProfile> =>\r\n  // @ts-ignore\r\n  createSelector(\r\n    getAttributesFromSelectedProfile(selectedProfileId),\r\n    getFp(attribute)\r\n  );\r\n","// @ts-nocheck\r\nexport const REDUCER_KEY = 'channels';\r\n\r\nexport enum ChannelsActionsType {\r\n  createChannel = `${REDUCER_KEY}/createChannel`,\r\n  createChannelSuccess = `${REDUCER_KEY}/createChannelSuccess`,\r\n  createChannelsError = `${REDUCER_KEY}/createChannelsError`,\r\n  fetchChannelsSuccess = `${REDUCER_KEY}/fetchChannelsSuccess`,\r\n  fetchChannelsError = `${REDUCER_KEY}/fetchChannelsError`,\r\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\r\n  setChannelId = `${REDUCER_KEY}/setChannelId`,\r\n}\r\n","import { TUpdateTimeProfileError } from './types';\r\n// others\r\nimport { TReturnablePayload } from './../common/types';\r\nimport {\r\n  TCreateProfile,\r\n  TCreateProfileSuccess,\r\n  TCreateProfileError,\r\n  TFetchProfilesSuccess,\r\n  TFetchProfilesError,\r\n  TProfile,\r\n  TProfileFormData,\r\n  TUploadImageFinished,\r\n  TSelectProfile,\r\n  TSelectProfileError,\r\n  TUpdateTimeProfile,\r\n} from './types';\r\n\r\n// store\r\nimport { ProfilesActionsType } from './actionsType';\r\n\r\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\r\n  type: ProfilesActionsType.createProfile,\r\n  payload,\r\n});\r\n\r\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\r\n  type: ProfilesActionsType.createProfileSuccess,\r\n});\r\n\r\nexport const createProfileError = (payload: string): TCreateProfileError => ({\r\n  type: ProfilesActionsType.createProfileError,\r\n  payload,\r\n});\r\n\r\nexport const fetchProfilesSuccess = (\r\n  payload: Array<TProfile>\r\n): TFetchProfilesSuccess => ({\r\n  type: ProfilesActionsType.fetchProfilesSuccess,\r\n  payload,\r\n});\r\n\r\nexport const fetchProfilesError = (): TFetchProfilesError => ({\r\n  type: ProfilesActionsType.fetchProfilesError,\r\n});\r\n\r\nexport const uploadImageFinished = (\r\n  payload: TReturnablePayload\r\n): TUploadImageFinished => ({\r\n  type: ProfilesActionsType.uploadImageFinished,\r\n  payload,\r\n});\r\n\r\nexport const selectProfile = (payload: string): TSelectProfile => ({\r\n  type: ProfilesActionsType.selectProfile,\r\n  payload,\r\n});\r\n\r\nexport const selectProfileError = (payload: string): TSelectProfileError => ({\r\n  type: ProfilesActionsType.selectProfileError,\r\n  payload,\r\n});\r\n\r\nexport const updateTimeProfile = (payload: string): TUpdateTimeProfile => ({\r\n  type: ProfilesActionsType.updateTimeProfile,\r\n  payload,\r\n});\r\n\r\nexport const updateTimeProfileError = (\r\n  payload: string\r\n): TUpdateTimeProfileError => ({\r\n  type: ProfilesActionsType.updateTimeProfileError,\r\n  payload,\r\n});\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// hooks\r\nimport useOnDisconnectHandlers from './useOnDisconnectHandlers';\r\n\r\n// others\r\nimport { TProfile } from '../../store/profiles/types';\r\n\r\n// store\r\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\r\nimport { updateTimeProfile } from '../../store/profiles/actions';\r\n\r\nconst OnlineHandler: FunctionComponent = () => {\r\n  const dispatch = useDispatch();\r\n  const selectedProfileId = useSelector(\r\n    getAttributeFromProfiles('selectedProfileId')\r\n  );\r\n  const profiles: Array<TProfile> = useSelector(\r\n    getAttributeFromProfiles('data')\r\n  );\r\n  const indexProfile = profiles.findIndex(\r\n    ({ profileId }) => profileId === selectedProfileId\r\n  );\r\n  const { disconnectProfile } = useOnDisconnectHandlers(indexProfile);\r\n\r\n  useEffect(() => {\r\n    disconnectProfile();\r\n    dispatch(updateTimeProfile(selectedProfileId));\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default OnlineHandler;\r\n","// others\r\nimport {\r\n  TChannel,\r\n  TCreateChannel,\r\n  TCreateChannelSuccess,\r\n  TCreateChannelError,\r\n  TFetchChannelsSuccess,\r\n  TFetchChannelsError,\r\n  TSetChannelId,\r\n} from './types';\r\n\r\n// store\r\nimport { ChannelsActionsType } from './actionsType';\r\n\r\nexport const createChannel = (\r\n  payload: Omit<TChannel, 'chanelId' | 'messages'>\r\n): TCreateChannel => ({\r\n  type: ChannelsActionsType.createChannel,\r\n  payload,\r\n});\r\n\r\nexport const createChannelSuccess = (): TCreateChannelSuccess => ({\r\n  type: ChannelsActionsType.createChannelSuccess,\r\n});\r\n\r\nexport const createChannelError = (payload: string): TCreateChannelError => ({\r\n  type: ChannelsActionsType.createChannelsError,\r\n  payload,\r\n});\r\n\r\nexport const fetchChannelsSuccess = (\r\n  payload: Array<TChannel>\r\n): TFetchChannelsSuccess => ({\r\n  type: ChannelsActionsType.fetchChannelsSuccess,\r\n  payload,\r\n});\r\n\r\nexport const fetchChannelsError = (): TFetchChannelsError => ({\r\n  type: ChannelsActionsType.fetchChannelsError,\r\n});\r\n\r\nexport const setChannelId = (payload: string): TSetChannelId => ({\r\n  type: ChannelsActionsType.setChannelId,\r\n  payload,\r\n});\r\n","export enum Mode {\r\n  createProfile = 'createProfile',\r\n  listProfiles = 'listProfiles',\r\n}\r\n","import composeFp from 'lodash/fp/compose';\r\nimport findFp from 'lodash/fp/find';\r\nimport getFp from 'lodash/fp/get';\r\nimport headFp from 'lodash/head';\r\nimport isArrayFp from 'lodash/fp/isArray';\r\nimport { createSelector, Selector } from 'reselect';\r\n\r\n// store\r\nimport { REDUCER_KEY } from './actionsType';\r\nimport { TMainState } from '../../types';\r\nimport { TChannel, TChannelsState } from './types';\r\n\r\nexport const channelsSelector: Selector<TMainState, TChannelsState> =\r\n  getFp(REDUCER_KEY);\r\n\r\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\r\n  createSelector(channelsSelector, getFp('isPending'));\r\n\r\nexport const channelsLoadedSelector: Selector<TMainState, boolean> =\r\n  createSelector(channelsSelector, composeFp(isArrayFp, getFp('channels')));\r\n\r\nexport const getDefaultChannelId: Selector<TMainState, TChannel> =\r\n  createSelector(\r\n    channelsSelector,\r\n    composeFp(getFp('channelId'), headFp, getFp('channels'))\r\n  );\r\n\r\nexport const getAttributeFromChannels = (\r\n  attribute: string\r\n): Selector<TMainState, any> =>\r\n  createSelector(channelsSelector, getFp(attribute));\r\n\r\nexport const getAttributesFromSelectedChannel = (\r\n  selectedChannelId: string\r\n): Selector<TMainState, TChannel> =>\r\n  // @ts-ignore\r\n  createSelector(\r\n    channelsSelector,\r\n    composeFp(\r\n      findFp(({ channelId }) => channelId === selectedChannelId),\r\n      getFp('channels')\r\n    )\r\n  );\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n// store\r\nimport { createChannel } from '../../../store/channels/actions';\r\nimport { isPendingSelector } from '../../../store/channels/selectors';\r\n\r\n// styles\r\nimport './nav-menu-create-channel-form-styles.scss';\r\n\r\ntype TProps = {\r\n  closeModal: () => void;\r\n  openNotifiaction: () => void;\r\n};\r\n\r\nconst NavMenuCreateChannelForm: FunctionComponent<TProps> = ({\r\n  closeModal,\r\n  openNotifiaction,\r\n}) => {\r\n  const [name, setName] = useState('');\r\n  const [shortcut, setShortcut] = useState('');\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const isPending = useSelector(isPendingSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmitHandler = (event: Event): void => {\r\n    event.preventDefault();\r\n\r\n    if (name && shortcut) {\r\n      dispatch(createChannel({ name, shortcut: shortcut.toUpperCase() }));\r\n      setIsSubmitted(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isPending && isSubmitted) {\r\n      closeModal();\r\n      openNotifiaction();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [isPending, isSubmitted]);\r\n\r\n  return (\r\n    <form className=\"NavMenuCreateChannelForm\" onSubmit={onSubmitHandler}>\r\n      <h2>Create channel:</h2>\r\n      <TextField\r\n        className=\"NavMenuCreateChannelForm__input\"\r\n        onChange={(e) => setName(e.target.value)}\r\n        label=\"Channel name:\"\r\n        value={name}\r\n      />\r\n      <TextField\r\n        className=\"NavMenuCreateChannelForm__input\"\r\n        onChange={(e) => setShortcut(e.target.value)}\r\n        label=\"Shortcut channel name eg. (ME):\"\r\n        inputProps={{ maxLength: 2 }}\r\n        value={shortcut}\r\n      />\r\n      <Button\r\n        className=\"ProfileForm__submit-button\"\r\n        color=\"primary\"\r\n        disabled={isPending}\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n      >\r\n        Create Channel\r\n        {isPending && (\r\n          <CircularProgress\r\n            className=\"ProfileForm__spinner\"\r\n            color=\"primary\"\r\n            size={20}\r\n          />\r\n        )}\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NavMenuCreateChannelForm;\r\n","export default __webpack_public_path__ + \"static/media/plus-white-icon.abb60e4a.svg\";","import { FunctionComponent, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\n// components\r\nimport NavMenuCreateChannelForm from '../NavMenuCreateChannelForm/NavMenuCreateChannelForm';\r\n\r\n// others\r\nimport PlusWhiteIcon from '../../../assets/images/icons/plus-white-icon.svg';\r\nimport { TChannel } from '../../../store/channels/types';\r\n\r\n// store\r\nimport { getAttributeFromChannels } from '../../../store/channels/selectors';\r\nimport { setChannelId } from '../../../store/channels/actions';\r\n\r\n// styles\r\nimport './nav-menu-channels-styles.scss';\r\n\r\ntype TProps = {\r\n  closeNavMenu: () => void;\r\n};\r\n\r\nconst NavMenuChannels: FunctionComponent<TProps> = ({ closeNavMenu }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [visible, setVisible] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const channels: Array<TChannel> = useSelector(\r\n    getAttributeFromChannels('channels')\r\n  );\r\n\r\n  const Alert = (props: AlertProps) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  };\r\n\r\n  const onClickHandler = (channelId: string): void => {\r\n    closeNavMenu();\r\n    dispatch(setChannelId(channelId));\r\n  };\r\n\r\n  return (\r\n    <div className=\"NavMenuChannels\">\r\n      {/* NAV */}\r\n      <div className=\"NavMenuChannels__nav\">\r\n        <p className=\"NavMenuChannels__title\">Channels</p>\r\n        <img\r\n          alt=\"plus-white-icon\"\r\n          className=\"NavMenuChannels__button\"\r\n          onClick={() => setVisible(true)}\r\n          src={PlusWhiteIcon}\r\n        />\r\n      </div>\r\n      {/* CHANNELS */}\r\n      <div className=\"NavMenuChannels__channels\">\r\n        {channels.map(({ channelId, name }) => (\r\n          <p\r\n            className=\"NavMenuChannels__channel-name\"\r\n            key={channelId}\r\n            onClick={() => onClickHandler(channelId)}\r\n          >\r\n            #{name}\r\n          </p>\r\n        ))}\r\n      </div>\r\n\r\n      {/* MODAL */}\r\n      <Modal\r\n        className=\"NavMenuChannels__modal\"\r\n        closeAfterTransition\r\n        open={visible}\r\n        onClose={() => setVisible(false)}\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={visible}>\r\n          <div className=\"NavMenuChannels__card\">\r\n            <NavMenuCreateChannelForm\r\n              closeModal={() => setVisible(false)}\r\n              openNotifiaction={() => setOpen(true)}\r\n            />\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n\r\n      {/* NOTIFICATION */}\r\n      <Snackbar\r\n        open={open}\r\n        className=\"NavMenuChannels__snackbar\"\r\n        autoHideDuration={5000}\r\n        onClose={() => setOpen(false)}\r\n      >\r\n        <Alert onClose={() => setOpen(false)} severity=\"success\">\r\n          Channel has been added!\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenuChannels;\r\n","export default __webpack_public_path__ + \"static/media/offline-icon.e258b94e.svg\";","export default __webpack_public_path__ + \"static/media/online-icon.f3194dda.svg\";","import { FunctionComponent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// others\r\nimport OfflineIcon from '../../../assets/images/icons/offline-icon.svg';\r\nimport OnlineIcon from '../../../assets/images/icons/online-icon.svg';\r\nimport { TIME_TO_COMPARE } from '../../../constants';\r\nimport { TProfile } from '../../../store/profiles/types';\r\n\r\n// store\r\nimport {\r\n  getAttributeFromProfiles,\r\n  getAttributeFromSelectedProfile,\r\n} from '../../../store/profiles/selectors';\r\n\r\n// styles\r\nimport './nav-menu-profiles-styles.scss';\r\n\r\nconst NavMenuProfiles: FunctionComponent = () => {\r\n  const profiles: Array<TProfile> = useSelector(\r\n    getAttributeFromProfiles('data')\r\n  );\r\n  const selectedProfileId = useSelector(\r\n    getAttributeFromProfiles('selectedProfileId')\r\n  );\r\n\r\n  //@ts-ignore\r\n  const lastUpdateTime: number = useSelector(\r\n    getAttributeFromSelectedProfile('lastUpdateTime', selectedProfileId)\r\n  );\r\n\r\n  const getIconPath = (\r\n    lastUpdateTimeProfile: number,\r\n    online: boolean\r\n  ): string => {\r\n    if (online && lastUpdateTime - lastUpdateTimeProfile < TIME_TO_COMPARE) {\r\n      return OnlineIcon;\r\n    }\r\n    return OfflineIcon;\r\n  };\r\n\r\n  return (\r\n    <div className=\"NavMenuProfiles\">\r\n      {/* HEADER */}\r\n      <div className=\"NavMenuProfiles__header\">\r\n        <p className=\"NavMenuProfiles__title\">Brothers-in-law</p>\r\n      </div>\r\n\r\n      {/* USERS */}\r\n      <div className=\"NavMenuProfiles__profiles\">\r\n        {profiles\r\n          .filter(({ profileId }) => profileId !== selectedProfileId)\r\n          .map(({ lastUpdateTime, name, online, profileId, src }) => (\r\n            <div className=\"NavMenuProfiles__profile\" key={profileId}>\r\n              <img\r\n                alt={profileId}\r\n                className=\"NavMenuProfiles__avatar\"\r\n                src={src}\r\n              />\r\n              <img\r\n                alt=\"status-icon\"\r\n                className=\"NavMenuProfiles__status\"\r\n                src={getIconPath(lastUpdateTime, online)}\r\n              />\r\n              <p className=\"NavMenuProfiles__name\" key={profileId}>\r\n                {name}\r\n              </p>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenuProfiles;\r\n","export const EMAIL = 'eryk.sandecki@gmail.com';\r\nexport const UPDATE_DELAY_TIME = 60000;\r\nexport const TIME_TO_COMPARE = 90000;","export default __webpack_public_path__ + \"static/media/close-white-icon.46536c1e.svg\";","import { FunctionComponent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// components\r\nimport NavMenuChannels from './NavMenuChannels/NavMenuChannels';\r\nimport NavMenuProfiles from './NavMenuProfiles/NavMenuProfiles';\r\n\r\n// others\r\nimport CloseWhiteIcon from '../../assets/images/icons/close-white-icon.svg';\r\n\r\n// store\r\nimport {\r\n  getAttributeFromProfiles,\r\n  getAttributesFromSelectedProfile,\r\n} from '../../store/profiles/selectors';\r\n\r\n// styles\r\nimport './nav-menu-styles.scss';\r\n\r\ntype TProps = {\r\n  visible: boolean;\r\n  setVisible: (flag: boolean) => void;\r\n};\r\n\r\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\r\n  const onClickHandler = (): void => setVisible(false);\r\n  const selectedProfileId = useSelector(\r\n    getAttributeFromProfiles('selectedProfileId')\r\n  );\r\n  const { name, src } = useSelector(\r\n    getAttributesFromSelectedProfile(selectedProfileId)\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\r\n      onClick={onClickHandler}\r\n    >\r\n      {/* BACKGROUND */}\r\n      <div\r\n        className={`NavMenu__background ${\r\n          visible && 'NavMenu__background--visible'\r\n        }`}\r\n      />\r\n\r\n      {/* CONTAINER */}\r\n      <div\r\n        className={`NavMenu__container ${\r\n          visible && 'NavMenu__container--visible'\r\n        }`}\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        {/* HEADER */}\r\n        <div className=\"NavMenu__header\">\r\n          <div className=\"NavMenu__profile-data\">\r\n            <img\r\n              alt=\"profile-avatar\"\r\n              className=\"NavMenu__profile-avatar\"\r\n              src={src}\r\n            />\r\n            <p className=\"NavMenu__profile-name\">{name}</p>\r\n          </div>\r\n          <img\r\n            alt=\"close-white-icon\"\r\n            className=\"NavMenu__button-close\"\r\n            onClick={onClickHandler}\r\n            src={CloseWhiteIcon}\r\n          />\r\n        </div>\r\n\r\n        {/* CONTENT */}\r\n        <div className=\"NavMenu__content\">\r\n          <NavMenuChannels closeNavMenu={onClickHandler} />\r\n          <NavMenuProfiles />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenu;\r\n","export default __webpack_public_path__ + \"static/media/close-icon.092c61d5.svg\";","export default __webpack_public_path__ + \"static/media/gear-icon.e5deb93c.svg\";","export default __webpack_public_path__ + \"static/media/modify-size-icon.7b8f31f6.svg\";","// @ts-nocheck\r\nimport { FunctionComponent, useContext, useState } from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n// core\r\nimport { Context } from '../../../core/ContextProvider/ContextProvider';\r\n\r\n// others\r\nimport CloseIcon from '../../../assets/images/icons/close-icon.svg';\r\nimport GearIcon from '../../../assets/images/icons/gear-icon.svg';\r\nimport ModifySizeIcon from '../../../assets/images/icons/modify-size-icon.svg';\r\nimport { TContext } from '../../../core/ContextProvider/types';\r\n\r\n// styles\r\nimport './page-header-settings-menu-styles.scss';\r\n\r\nconst PageHeaderSettingsMenu: FunctionComponent<{}> = () => {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const { setMargin }: TContext = useContext(Context);\r\n  const onClickOpenHandler = (event: Event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const onClickCloseHandler = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"PageHeaderSettingsMenu\">\r\n      <img alt=\"gear-icon\" onClick={onClickOpenHandler} src={GearIcon} />\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={onClickCloseHandler}\r\n      >\r\n        <MenuItem\r\n          className=\"PageHeaderSettingsMenu__item\"\r\n          onClick={() => setMargin(1)}\r\n        >\r\n          Up\r\n          <img alt=\"gear-icon\" src={ModifySizeIcon} />\r\n        </MenuItem>\r\n        <MenuItem\r\n          className=\"PageHeaderSettingsMenu__item\"\r\n          onClick={() => setMargin(-1)}\r\n        >\r\n          Down\r\n          <img\r\n            alt=\"reverted-gear-icon\"\r\n            className=\"PageHeaderSettingsMenu__icon-rotate\"\r\n            src={ModifySizeIcon}\r\n          />\r\n        </MenuItem>\r\n        <MenuItem\r\n          className=\"PageHeaderSettingsMenu__item\"\r\n          onClick={onClickCloseHandler}\r\n        >\r\n          Close\r\n          <img alt=\"close-icon\" src={CloseIcon} />\r\n        </MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\nexport default PageHeaderSettingsMenu;\r\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.85ddbb0d.svg\";","import { FunctionComponent, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// components\r\nimport NavMenu from '../NavMenu/NavMenu';\r\nimport PageHeaderSettingsMenu from './PageHeaderSettingsMenu/PageHeaderSettingsMenu';\r\n\r\n// others\r\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\r\nimport { TChannel } from '../../store/channels/types';\r\n\r\n// store\r\nimport {\r\n  getAttributeFromChannels,\r\n  getAttributesFromSelectedChannel,\r\n  getDefaultChannelId,\r\n} from '../../store/channels/selectors';\r\n\r\n// styles\r\nimport './page-header-styles.scss';\r\n\r\nconst PageHeader: FunctionComponent<{}> = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const defaultChannelId = useSelector(getDefaultChannelId);\r\n  const selectedChannelId =\r\n    useSelector(getAttributeFromChannels('selectedChannelId')) ||\r\n    defaultChannelId;\r\n  const { name, shortcut }: TChannel = useSelector(\r\n    getAttributesFromSelectedChannel(selectedChannelId)\r\n  );\r\n\r\n  return (\r\n    <header className=\"PageHeader\">\r\n      {/* LEFT COLUMN */}\r\n      <div className=\"PageHeader__left-column\">\r\n        {/* PICKER */}\r\n        <div className=\"PageHeader__channel-picker\">{shortcut}</div>\r\n\r\n        {/* DETAILS */}\r\n        <div>\r\n          <p className=\"PageHeader__title\">#{name}</p>\r\n          <p className=\"PageHeader__users\">2 Brothers online</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* RIGHT COLUMN */}\r\n      <div className=\"PageHeader__right-column\">\r\n        <PageHeaderSettingsMenu />\r\n        <img\r\n          alt=\"hamburger-menu\"\r\n          className=\"PageHeader__hamburger-menu\"\r\n          onClick={() => setVisible(true)}\r\n          src={HamburgerMenu}\r\n        />\r\n      </div>\r\n\r\n      {/* Nav Left Menu */}\r\n      <NavMenu visible={visible} setVisible={setVisible} />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default PageHeader;\r\n","export default __webpack_public_path__ + \"static/media/back.d5208217.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.9659aaae.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.acb60281.svg\";","// @ts-nocheck\r\n// others\r\n\r\nconst loadImage = (\r\n  event: Event,\r\n  setImageData: (file: string | ArrayBuffer | null) => void\r\n) => {\r\n  const reader = new FileReader();\r\n  const { files } = event.target;\r\n\r\n  reader.onload = (e) => {\r\n    setImageData({\r\n      file: files[0],\r\n      src: e.target.result,\r\n    });\r\n  };\r\n\r\n  reader.readAsDataURL(files[0]);\r\n};\r\n\r\nexport default loadImage;\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n// others\r\nimport BackIcon from '../../assets/images/icons/back.svg';\r\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\r\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\r\nimport { TImageData } from '../../types';\r\nimport { TProfileFormData } from '../../store/profiles/types';\r\n\r\n// services\r\nimport loadImage from './services/loadImage';\r\n\r\n// store\r\nimport { isPendingSelector } from '../../store/profiles/selectors';\r\n\r\n// styles\r\nimport './profile-form-styles.scss';\r\n\r\ntype TProps = {\r\n  clickHandler: () => void;\r\n  name?: string;\r\n  imageData?: TImageData;\r\n  submitHandler: (formData: TProfileFormData) => void;\r\n  title: string;\r\n};\r\n\r\nconst ProfileForm: FunctionComponent<TProps> = ({\r\n  clickHandler,\r\n  name: initialName = '',\r\n  imageData: initialImageData = null,\r\n  submitHandler,\r\n  title,\r\n}) => {\r\n  const isPending = useSelector(isPendingSelector);\r\n  const inputRef = useRef(null);\r\n  const [imageData, setImageData] = useState(initialImageData);\r\n  const [name, setName] = useState(initialName);\r\n\r\n  const onSubmitHandler = (event: Event) => {\r\n    event.preventDefault();\r\n\r\n    if (imageData && name) {\r\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ProfileForm__form-wrapper\">\r\n      <h2 className=\"ProfileForm__title\">\r\n        <img\r\n          alt=\"back-icon\"\r\n          className=\"ProfileForm__icon\"\r\n          onClick={clickHandler}\r\n          src={BackIcon}\r\n        />\r\n        {title}\r\n      </h2>\r\n\r\n      {/* FORM */}\r\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\r\n        {/* AVATAR */}\r\n        <div\r\n          className={`ProfileForm__avatar ${\r\n            imageData ? 'ProfileForm__avatar--selected' : ''\r\n          }`}\r\n        >\r\n          {imageData ? (\r\n            <img\r\n              alt=\"avatar\"\r\n              className=\"ProfileForm__image\"\r\n              src={imageData.src}\r\n            />\r\n          ) : (\r\n            <img\r\n              alt=\"empty\"\r\n              className=\"ProfileForm__empty-picture\"\r\n              src={EmptyImage}\r\n            />\r\n          )}\r\n\r\n          {/* BUTTON */}\r\n          <img\r\n            alt=\"button-icon\"\r\n            className=\"ProfileForm__button-picture\"\r\n            onClick={() => inputRef.current.click()}\r\n            src={ButtonPicture}\r\n          />\r\n          <input\r\n            className=\"ProfileForm__input-file\"\r\n            onChange={(event: Event) => loadImage(event, setImageData)}\r\n            ref={inputRef}\r\n            type=\"file\"\r\n          />\r\n        </div>\r\n\r\n        {/* INPUT NAME */}\r\n        <TextField\r\n          className=\"ProfileForm__input-name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n          label=\"Profile name:\"\r\n          value={name}\r\n        />\r\n\r\n        <Button\r\n          className=\"ProfileForm__submit-button\"\r\n          color=\"primary\"\r\n          disabled={isPending}\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n        >\r\n          Create Profile\r\n          {isPending && (\r\n            <CircularProgress\r\n              className=\"ProfileForm__spinner\"\r\n              color=\"primary\"\r\n              size={20}\r\n            />\r\n          )}\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n","import { FunctionComponent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// components\r\nimport ProfileForm from '../ProfileForm/ProfileForm';\r\n\r\n// store\r\nimport { createProfile } from '../../store/profiles/actions';\r\nimport { TProfileFormData } from '../../store/profiles/types';\r\n\r\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const submitHandler = (formData: TProfileFormData) =>\r\n    dispatch(createProfile(formData));\r\n\r\n  return (\r\n    //@ts-ignore\r\n    <ProfileForm\r\n      submitHandler={submitHandler}\r\n      title=\"Create Profile:\"\r\n      {...restProps}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CreateProfileForm;\r\n","// @ts-nocheck\r\nimport { useCallback, useRef, useState } from 'react';\r\n\r\nconst usePress = (\r\n  pressHandler,\r\n  clickHandler,\r\n  { shouldPreventDefault = true, delay = 1000 } = {}\r\n) => {\r\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\r\n  const timeout = useRef();\r\n  const target = useRef();\r\n\r\n  const start = useCallback(\r\n    (event) => {\r\n      if (shouldPreventDefault && event.target) {\r\n        event.target.addEventListener('touchend', preventDefault, {\r\n          passive: false,\r\n        });\r\n        target.current = event.target;\r\n      }\r\n      timeout.current = setTimeout(() => {\r\n        pressHandler(event);\r\n        setLongPressTriggered(true);\r\n      }, delay);\r\n    },\r\n    [pressHandler, delay, shouldPreventDefault]\r\n  );\r\n\r\n  const clear = useCallback(\r\n    (_, shouldTriggerClick = true) => {\r\n      timeout.current && clearTimeout(timeout.current);\r\n      shouldTriggerClick && !longPressTriggered && clickHandler();\r\n      setLongPressTriggered(false);\r\n      if (shouldPreventDefault && target.current) {\r\n        target.current.removeEventListener('touchend', preventDefault);\r\n      }\r\n    },\r\n    [shouldPreventDefault, clickHandler, longPressTriggered]\r\n  );\r\n\r\n  return {\r\n    onMouseDown: (e) => start(e),\r\n    onTouchStart: (e) => start(e),\r\n    onMouseUp: (e) => clear(e),\r\n    onMouseLeave: (e) => clear(e, false),\r\n    onTouchEnd: (e) => clear(e),\r\n  };\r\n};\r\n\r\nconst isTouchEvent = (event) => {\r\n  return 'touches' in event;\r\n};\r\n\r\nconst preventDefault = (event) => {\r\n  if (!isTouchEvent(event)) return;\r\n\r\n  if (event.touches.length < 2 && event.preventDefault) {\r\n    event.preventDefault();\r\n  }\r\n};\r\n\r\nexport default usePress;\r\n","export default __webpack_public_path__ + \"static/media/plus.c453ef1e.svg\";","import { FunctionComponent, useState } from 'react';\r\n\r\n// hooks\r\nimport usePress from './usePress';\r\n\r\n// others\r\nimport PlusIcon from '../../assets/images/icons/plus.svg';\r\n\r\n// styles\r\nimport './profile-picker-styles.scss';\r\n\r\ntype TProps = {\r\n  clickHandler: () => void;\r\n  mode?: 'add' | 'select';\r\n  name?: string;\r\n  src?: string;\r\n};\r\n\r\nconst ProfilePicker: FunctionComponent<TProps> = ({\r\n  clickHandler,\r\n  mode = 'add',\r\n  name,\r\n  src,\r\n}) => {\r\n  const [overlayVisible, setOverlayVisible] = useState(false);\r\n  const isOverlayVisible = mode === 'select' && overlayVisible;\r\n  const onPressHandler = () => {\r\n    setOverlayVisible(true);\r\n  };\r\n\r\n  const onClickHandler = () => {\r\n    clickHandler();\r\n  };\r\n\r\n  const press = usePress(onPressHandler, onClickHandler);\r\n\r\n  return (\r\n    <section\r\n      className={`ProfilePicker ${\r\n        isOverlayVisible ? 'ProfilePicker--blur' : ''\r\n      }`}\r\n    >\r\n      <div\r\n        className={`ProfilePicker__card ProfilePicker--${mode}__card ${\r\n          isOverlayVisible ? 'ProfilePicker__card--blur' : ''\r\n        }`}\r\n        {...press}\r\n      >\r\n        {/* TITLE */}\r\n        <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\r\n          {name ? name : 'Create:'}\r\n        </p>\r\n\r\n        {/* CIRCLE */}\r\n        <div className={`ProfilePicker__button ProfilePicker--${mode}__button`}>\r\n          <img\r\n            alt={name ? `${name}-avatar` : 'icon'}\r\n            className={`ProfilePicker__image ProfilePicker--${mode}__image`}\r\n            src={src ? src : PlusIcon}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* OVERLAY */}\r\n      {isOverlayVisible && <div className=\"ProfilePicker__overlay\"></div>}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProfilePicker;\r\n","// @ts-nocheck\r\nexport const REDUCER_KEY = 'auth';\r\n\r\nexport enum AuthActionsType {\r\n  login = `${REDUCER_KEY}/login`,\r\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\r\n  loginError = `${REDUCER_KEY}/loginError`,\r\n}\r\n","import { FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// components\r\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\r\n\r\n// others\r\nimport { Mode } from '../ProfilePickerSection/enums';\r\nimport { TProfile } from '../../store/profiles/types';\r\n\r\n// store\r\nimport { selectProfile } from '../../store/profiles/actions';\r\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\r\n\r\n// styles\r\nimport './profile-picker-list-styles.scss';\r\n\r\ntype TProps = {\r\n  clickHandler: (mode: Mode) => void;\r\n};\r\n\r\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\r\n  const dispatch = useDispatch();\r\n  const profiles: Array<TProfile> = useSelector(\r\n    getAttributeFromProfiles('data')\r\n  );\r\n\r\n  return (\r\n    <section className=\"ProfilePickerList\">\r\n      {/* CONTENT */}\r\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\r\n      <p className=\"ProfilePickerList__description\">\r\n        Select a profile to start a conversation with your brother-in-law.\r\n      </p>\r\n\r\n      {/* PICKERS */}\r\n      <div className=\"ProfilePickerList__pickers\">\r\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\r\n\r\n        {/* LIST */}\r\n        {/* @ts-ignore */}\r\n        {profiles.map(({ name, profileId, src }) => (\r\n          <ProfilePicker\r\n            clickHandler={() => dispatch(selectProfile(profileId))}\r\n            key={profileId}\r\n            mode=\"select\"\r\n            name={name}\r\n            src={src}\r\n          />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProfilePickerList;\r\n","import { FunctionComponent, useState } from 'react';\r\n\r\n// components\r\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\r\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\r\n\r\n// others\r\nimport { Mode } from './enums';\r\n\r\n// styles\r\nimport './profile-picker-section-styles.scss';\r\n\r\nconst ProfilePickerSection: FunctionComponent = () => {\r\n  const [mode, setMode] = useState(Mode.listProfiles);\r\n\r\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\r\n\r\n  return (\r\n    <section className=\"ProfilePickerSection\">\r\n      {mode === Mode.listProfiles ? (\r\n        // LIST\r\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\r\n      ) : (\r\n        // @ts-ignore\r\n        <CreateProfileForm clickHandler={onClickBackHandler} />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProfilePickerSection;\r\n","export default __webpack_public_path__ + \"static/media/gentleman.ff3326dc.svg\";","import { FunctionComponent } from 'react';\r\n\r\n// others\r\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\r\n\r\n// styles\r\nimport './page-loader-styles.scss';\r\n\r\ntype TProps = {\r\n  appDataLoaded: boolean;\r\n};\r\n\r\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\r\n  <div className=\"PageLoader\">\r\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\r\n    {/* LOGO */}\r\n    <img alt=\"gentleman-logo\" src={Gentleman} />\r\n\r\n    {/* SPINNER */}\r\n    <div className=\"PageLoader__spinner\">\r\n      {Array.from(Array(12)).map((_, index) => (\r\n        <div\r\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\r\n          key={index}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PageLoader;\r\n","// @ts-nocheck\r\nimport getFp from 'lodash/fp/get';\r\nimport { createSelector, Selector } from 'reselect';\r\n\r\n// store\r\nimport { REDUCER_KEY } from './actionsType';\r\nimport { TMainState } from '../../types';\r\nimport { TLocationState } from './types';\r\n\r\nexport const authSelector: Selector<TMainState, TLocationState> =\r\n  getFp(REDUCER_KEY);\r\n\r\nexport const errorMessageSelector: Selector<TMainState, boolean> =\r\n  createSelector(authSelector, getFp('error'));\r\n\r\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\r\n  authSelector,\r\n  getFp('isPending')\r\n);\r\n","import { createSelector, Selector } from 'reselect';\r\n\r\n// others\r\nimport { TMainState } from '../types';\r\n\r\n// store\r\nimport { channelsLoadedSelector } from './channels/selectors';\r\nimport {\r\n  errorMessageSelector,\r\n  isPendingSelector as isPendingAuthSelector,\r\n} from './auth/selectors';\r\nimport { profilesLoadedSelector } from './profiles/selectors';\r\n\r\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\r\n  createSelector(\r\n    isPendingAuthSelector,\r\n    errorMessageSelector,\r\n    (isPending, errorMessage) => !isPending && !errorMessage\r\n  );\r\n\r\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\r\n  createSelector(\r\n    profilesLoadedSelector,\r\n    channelsLoadedSelector,\r\n    (profilesData, channelsData) => profilesData && channelsData\r\n  );\r\n","import { FunctionComponent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// components\r\nimport Chat from '../Chat/Chat';\r\nimport OnlineHandler from '../OnlineHandler/OnlineHandler';\r\nimport PageHeader from '../PageHeader/PageHeader';\r\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\r\nimport PageLoader from '../PageLoader/PageLoader';\r\n\r\n// store\r\nimport { appDataLoadedSelector } from '../../store/selectors';\r\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\r\n\r\n// styles\r\nimport './page-styles.scss';\r\n\r\nconst Page: FunctionComponent<{}> = () => {\r\n  const selectedProfileId = useSelector(\r\n    getAttributeFromProfiles('selectedProfileId')\r\n  );\r\n  const appDataLoaded = useSelector(appDataLoadedSelector);\r\n\r\n  if (!appDataLoaded) {\r\n    return <PageLoader appDataLoaded={appDataLoaded} />;\r\n  }\r\n\r\n  if (!selectedProfileId) {\r\n    return <ProfilePicker />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Page\">\r\n      <OnlineHandler />\r\n      <PageHeader />\r\n      <Chat />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { useEffect, useMemo, FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\n// components\r\nimport ErrorPage from '../ErrorPage/ErrorPage';\r\nimport Page from '../Page/Page';\r\n\r\n// core\r\nimport ContextProvider from '../../core/ContextProvider/ContextProvider';\r\n\r\n// store\r\nimport {\r\n  errorMessageSelector,\r\n  isPendingSelector,\r\n} from '../../store/auth/selectors';\r\nimport { loginAction } from '../../store/auth/actions';\r\n\r\nconst App: FunctionComponent<{}> = () => {\r\n  const isPending = useSelector(isPendingSelector);\r\n  const dispatch = useDispatch();\r\n  const errorMessage = useSelector(errorMessageSelector);\r\n\r\n  const theme = useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: 'dark',\r\n        },\r\n      }),\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   const password = prompt('Please enter a password:');\r\n  //   indexedDB.deleteDatabase('firebaseLocalStorageDb');\r\n  //   dispatch(loginAction(password as string));\r\n  //   // eslint-disable-next-line\r\n  // }, []);\r\n\r\n  // if (isPending) {\r\n  //   return null;\r\n  // }\r\n\r\n  // if (errorMessage) {\r\n  //   return <ErrorPage />;\r\n  // }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ContextProvider>\r\n        <Page />\r\n      </ContextProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export const config = {\r\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\r\n  authDomain: 'comics-book.firebaseapp.com',\r\n  projectId: 'comics-book',\r\n  storageBucket: 'comics-book.appspot.com',\r\n  messagingSenderId: '426496482303',\r\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\r\n};\r\n","const databaseErrorHandler = (error: string): void => {\r\n  // eslint-disable-next-line\r\n  console.error(error);\r\n};\r\n\r\nexport default databaseErrorHandler;\r\n","// @ts-nocheck\r\nconst getData = (values: any): void => {\r\n  const keys = Object.keys(values);\r\n  const data = [];\r\n\r\n  for (let i = 0; i < keys.length; i++) {\r\n    data.push(values[keys[i]]);\r\n  }\r\n  return data;\r\n};\r\n\r\nconst databaseSuccessHandler = (\r\n  response: any,\r\n  actions: (data: any) => void = null\r\n): void => {\r\n  const values = response.val();\r\n  actions(getData(values || {}));\r\n};\r\n\r\nexport default databaseSuccessHandler;\r\n","// @ts-nocheck\r\n// others\r\nimport { DatabaseColumns } from '../enums';\r\n\r\n// services\r\nimport databaseErrorHandler from './databaseErrorHandler';\r\nimport databaseSuccessHandler from './databaseSuccessHandler';\r\n\r\nconst databaseHandler = (\r\n  firebase: any,\r\n  actions: (data: any) => void,\r\n  ref: DatabaseColumns\r\n) => {\r\n  firebase\r\n    .database()\r\n    .ref(ref)\r\n    .on(\r\n      'value',\r\n      (response: any) => databaseSuccessHandler(response, actions),\r\n      databaseErrorHandler\r\n    );\r\n};\r\n\r\nexport default databaseHandler;\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport firebase from 'firebase';\r\n\r\n// others\r\nimport { config } from './constants';\r\nimport { DatabaseColumns } from './enums';\r\nimport { TChannel } from '../../store/channels/types';\r\nimport { TProfile } from '../../store/profiles/types';\r\n\r\n// store\r\nimport { isAuthenticatedSelector } from '../../store/selectors';\r\nimport { fetchChannelsSuccess } from '../../store/channels/actions';\r\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\r\n\r\n// services\r\nimport databaseHandler from './services/databaseHandler';\r\n\r\nconst Firebase: FunctionComponent<{}> = () => {\r\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    firebase.initializeApp(config);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const profilesActions = (payload: Array<TProfile>): void => {\r\n      dispatch(fetchProfilesSuccess(payload));\r\n    };\r\n    const channelsActions = (payload: Array<TChannel>): void => {\r\n      dispatch(fetchChannelsSuccess(payload));\r\n    };\r\n\r\n    if (!isAuthenticated) {\r\n      setTimeout(() => {\r\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\r\n        databaseHandler(firebase, channelsActions, DatabaseColumns.channels);\r\n      }, 1);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [isAuthenticated]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default Firebase;\r\n","// @ts-nocheck\r\n// others\r\nimport { TLoginError } from './types';\r\n\r\n// store\r\nimport { AuthActionsType } from './actionsType';\r\nimport { TAnyAction } from '../../types';\r\nimport { TAuthState } from './types';\r\n\r\nconst initialState: TAuthState = {\r\n  error: '',\r\n  isPending: true,\r\n};\r\n\r\nconst loginSuccess = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n});\r\n\r\nconst loginError = (\r\n  state: TAuthState,\r\n  { payload: error }: TLoginError\r\n): TAuthState => ({\r\n  ...state,\r\n  error,\r\n  isPending: false,\r\n});\r\n\r\nconst auth = (\r\n  state: TAuthState = initialState,\r\n  action: TAnyAction\r\n): TAuthState => {\r\n  switch (action.type) {\r\n    case AuthActionsType.loginSuccess:\r\n      return loginSuccess(state, action);\r\n    case AuthActionsType.loginError:\r\n      return loginError(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default auth;\r\n","// @ts-nocheck\r\n// others\r\nimport {\r\n  TCreateChannelError,\r\n  TFetchChannelsSuccess,\r\n  TChannelsState,\r\n  TSetChannelId,\r\n} from './types';\r\n\r\n// store\r\nimport { ChannelsActionsType } from './actionsType';\r\nimport { TAnyAction } from '../../types';\r\n\r\nconst initialState: TChannelsState = {\r\n  channels: null,\r\n  error: '',\r\n  isPending: true,\r\n  selectedChannelId: '',\r\n};\r\n\r\nconst createChannel = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: true,\r\n});\r\n\r\nconst createChannelSuccess = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n});\r\n\r\nconst createChannelError = (\r\n  state: TAuthState,\r\n  { payload: error }: TCreateChannelError\r\n): TAuthState => ({\r\n  ...state,\r\n  error,\r\n  isPending: false,\r\n});\r\n\r\nconst fetchChannelsSuccess = (\r\n  state: TAuthState,\r\n  { payload: channels }: TFetchChannelsSuccess\r\n): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n  channels,\r\n});\r\n\r\nconst fetchChannelsError = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n});\r\n\r\nconst setChannelId = (\r\n  state: TAuthState,\r\n  { payload: selectedChannelId }: TSetChannelId\r\n): TAuthState => ({\r\n  ...state,\r\n  selectedChannelId,\r\n});\r\n\r\nconst channels = (\r\n  state: TAuthState = initialState,\r\n  action: TAnyAction\r\n): TAuthState => {\r\n  switch (action.type) {\r\n    case ChannelsActionsType.createChannel:\r\n      return createChannel(state, action);\r\n    case ChannelsActionsType.createChannelSuccess:\r\n      return createChannelSuccess(state, action);\r\n    case ChannelsActionsType.createChannelsError:\r\n      return createChannelError(state, action);\r\n    case ChannelsActionsType.fetchChannelsSuccess:\r\n      return fetchChannelsSuccess(state, action);\r\n    case ChannelsActionsType.fetchChannelsError:\r\n      return fetchChannelsError(state, action);\r\n    case ChannelsActionsType.setChannelId:\r\n      return setChannelId(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default channels;\r\n","// @ts-nocheck\r\n// others\r\nimport {\r\n  TCreateProfileError,\r\n  TFetchProfilesSuccess,\r\n  TProfilesState,\r\n  TSelectProfile,\r\n} from './types';\r\n\r\n// store\r\nimport { ProfilesActionsType } from './actionsType';\r\nimport { TAnyAction } from '../../types';\r\n\r\nconst initialState: TProfilesState = {\r\n  data: null,\r\n  error: '',\r\n  isPending: true,\r\n  selectedProfileId: '',\r\n};\r\n\r\nconst createProfile = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: true,\r\n});\r\n\r\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n});\r\n\r\nconst createProfileError = (\r\n  state: TAuthState,\r\n  { payload: error }: TCreateProfileError\r\n): TAuthState => ({\r\n  ...state,\r\n  error,\r\n  isPending: false,\r\n});\r\n\r\nconst fetchProfilesSuccess = (\r\n  state: TAuthState,\r\n  { payload: data }: TFetchProfilesSuccess\r\n): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n  data,\r\n});\r\n\r\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n});\r\n\r\nconst setProfileId = (\r\n  state: TAuthState,\r\n  { payload: selectedProfileId }: TSelectProfile\r\n): TAuthState => ({\r\n  ...state,\r\n  selectedProfileId,\r\n});\r\n\r\nconst profiles = (\r\n  state: TAuthState = initialState,\r\n  action: TAnyAction\r\n): TAuthState => {\r\n  switch (action.type) {\r\n    case ProfilesActionsType.createProfile:\r\n      return createProfile(state, action);\r\n    case ProfilesActionsType.createProfileSuccess:\r\n      return createProfileSuccess(state, action);\r\n    case ProfilesActionsType.createProfileError:\r\n      return createProfileError(state, action);\r\n    case ProfilesActionsType.fetchProfilesSuccess:\r\n      return fetchProfilesSuccess(state, action);\r\n    case ProfilesActionsType.fetchProfilesError:\r\n      return fetchProfilesError(state, action);\r\n    case ProfilesActionsType.selectProfile:\r\n      return setProfileId(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default profiles;\r\n","// @ts-nocheck\r\nimport { combineReducers } from 'redux';\r\n\r\n// store\r\nimport auth from './auth/reducer';\r\nimport channels from './channels/reducer';\r\nimport profiles from './profiles/reducer';\r\n\r\nconst reducers = { auth, channels, profiles };\r\n\r\nconst createRootReducer = () =>\r\n  combineReducers({\r\n    ...reducers,\r\n  });\r\n\r\nexport default createRootReducer;\r\n","// @ts-nocheck\r\nimport { PutEffect, put } from 'redux-saga/effects';\r\nimport firebase from 'firebase';\r\n\r\n// others\r\nimport { EMAIL } from '../../constants';\r\n\r\n// store\r\nimport { loginActionError, loginActionSuccess } from './actions';\r\n\r\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\r\n  const password = data.payload;\r\n\r\n  try {\r\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\r\n    yield put(loginActionSuccess());\r\n  } catch (error) {\r\n    const { code } = error;\r\n    yield put(loginActionError(code));\r\n  }\r\n}\r\n","// store\r\nimport { AuthActionsType } from './actionsType';\r\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\r\n\r\nexport const loginAction = (payload: string): TLogin => ({\r\n  type: AuthActionsType.login,\r\n  payload,\r\n});\r\n\r\nexport const loginActionSuccess = (): TLoginSuccess => ({\r\n  type: AuthActionsType.loginSuccess,\r\n});\r\n\r\nexport const loginActionError = (payload: string): TLoginError => ({\r\n  type: AuthActionsType.loginError,\r\n  payload,\r\n});\r\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\r\n\r\n// store\r\nimport { login } from './saga';\r\nimport { AuthActionsType } from './actionsType';\r\n\r\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\r\n  yield all([\r\n    // @ts-ignore\r\n    takeEvery(AuthActionsType.login, login),\r\n  ]);\r\n}\r\n","// @ts-nocheck\r\n// others\r\nimport { TChannel } from '../../../store/channels/types';\r\nimport { TProfile } from '../../../store/profiles/types';\r\n\r\nconst generateId = (data: Array<TProfile | TChannel>, keyId: string) => {\r\n  const result: Array<string> = [];\r\n  const characters =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n  do {\r\n    result.splice(0, result.length);\r\n    for (let i = 0; i < 9; i++) {\r\n      result.push(\r\n        characters.charAt(Math.floor(Math.random() * characters.length))\r\n      );\r\n    }\r\n  } while (data.find((data) => data[keyId] === result.join('')));\r\n\r\n  return result.join('');\r\n};\r\n\r\nexport default generateId;\r\n","// @ts-nocheck\r\nimport { delay, PutEffect, put, select } from 'redux-saga/effects';\r\n\r\n// others\r\nimport { DatabaseColumns } from '../../components/Firebase/enums';\r\n\r\n// services\r\nimport generateId from '../../components/Firebase/services/generateId';\r\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\r\n\r\n// store\r\nimport { createChannelSuccess, createChannelError } from './actions';\r\nimport { getAttributeFromChannels } from './selectors';\r\n\r\nexport function* createChannel({ payload }): Generator<PutEffect<any>> {\r\n  const { name, shortcut } = payload;\r\n  const data = yield select(getAttributeFromChannels('channels'));\r\n  const channelId = generateId(data, 'channelId');\r\n\r\n  try {\r\n    yield delay(1000);\r\n    yield getRefDatabase([DatabaseColumns.channels]).set([\r\n      ...data,\r\n      { channelId, name, shortcut },\r\n    ]);\r\n    yield put(createChannelSuccess());\r\n  } catch (error) {\r\n    yield put(createChannelError(error));\r\n  }\r\n}\r\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\r\n\r\n// store\r\nimport { createChannel } from './saga';\r\nimport { ChannelsActionsType } from './actionsType';\r\n\r\nexport function* watchChannels(): Generator<AllEffect<ForkEffect<any>>> {\r\n  yield all([\r\n    // @ts-ignore\r\n    takeEvery(ChannelsActionsType.createChannel, createChannel),\r\n  ]);\r\n}\r\n","// @ts-nocheck\r\nimport firebase from 'firebase';\r\nimport { eventChannel } from 'redux-saga';\r\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\r\nimport { TFileUploadPayload } from './types';\r\n\r\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\r\n  const { action, file, path }: TFileUploadPayload = payload;\r\n\r\n  try {\r\n    const uploadTask = firebase.storage().ref(path).put(file);\r\n    const channel = eventChannel((emit) =>\r\n      uploadTask.on('state_changed', emit)\r\n    );\r\n    let src = '';\r\n\r\n    yield takeEvery(channel, () => {});\r\n    yield uploadTask;\r\n    yield uploadTask.snapshot.ref\r\n      .getDownloadURL()\r\n      .then((response) => (src = response));\r\n    yield put(action({ result: 'success', src }));\r\n  } catch (error) {\r\n    yield put(action({ error, result: 'error' }));\r\n  }\r\n}\r\n","// @ts-nocheck\r\nexport const REDUCER_KEY = 'common';\r\n\r\nexport enum CommonActionsType {\r\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\r\n}\r\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\r\n\r\n// store\r\nimport { uploadImage } from './saga';\r\nimport { CommonActionsType } from './actionsType';\r\n\r\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\r\n  yield all([\r\n    // @ts-ignore\r\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\r\n  ]);\r\n}\r\n","// @ts-nocheck\r\n//others\r\nimport { TReturnablePayload } from '../../../store/common/types';\r\n\r\nconst afterUploadImageHandler = ({\r\n  error,\r\n  result,\r\n  src,\r\n}: TReturnablePayload) => {\r\n  if (result === 'error') {\r\n    throw error;\r\n  }\r\n  return src;\r\n};\r\n\r\nexport default afterUploadImageHandler;\r\n","// others\r\nimport { TFileUploadPayload, TUploadFile } from './types';\r\n\r\n// store\r\nimport { CommonActionsType } from './actionsType';\r\n\r\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\r\n  type: CommonActionsType.uploadFile,\r\n  payload,\r\n});\r\n","// @ts-nocheck\r\nimport { delay, PutEffect, put, select, take } from 'redux-saga/effects';\r\nimport { TProfileFormData } from './types';\r\n\r\n// others\r\nimport { DatabaseColumns } from '../../components/Firebase/enums';\r\nimport { StoragePath } from '../../enums';\r\nimport { TProfile } from './types';\r\nimport { UPDATE_DELAY_TIME } from '../../constants';\r\n\r\n// services\r\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\r\nimport generateId from '../../components/Firebase/services/generateId';\r\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\r\n\r\n// store\r\nimport { ProfilesActionsType } from './actionsType';\r\nimport {\r\n  createProfileSuccess,\r\n  createProfileError,\r\n  uploadImageFinished,\r\n  selectProfileError,\r\n  updateTimeProfileError,\r\n} from './actions';\r\nimport { uploadFile } from '../common/actions';\r\nimport { getAttributeFromProfiles } from './selectors';\r\n\r\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\r\n  const {\r\n    backToProfileList,\r\n    name,\r\n    imageData: { file },\r\n  }: TProfileFormData = payload;\r\n  const path = `${StoragePath.profiles}/${name}`;\r\n  const data = yield select(getAttributeFromProfiles('data'));\r\n  const profileId = generateId(data, 'profileId');\r\n\r\n  try {\r\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\r\n\r\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\r\n    const src = afterUploadImageHandler(payload);\r\n\r\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\r\n      ...data,\r\n      {\r\n        lastUpdateTime: new Date().getTime(),\r\n        name,\r\n        online: false,\r\n        profileId,\r\n        src,\r\n      },\r\n    ]);\r\n    yield put(createProfileSuccess());\r\n    yield backToProfileList();\r\n  } catch (error) {\r\n    yield put(createProfileError(error));\r\n  }\r\n}\r\n\r\nexport function* selectProfile({\r\n  payload: selectedProfileId,\r\n}): Generator<PutEffect<any>> {\r\n  const profiles: Array<TProfile> = yield select(\r\n    getAttributeFromProfiles('data')\r\n  );\r\n  const indexProfile = profiles.findIndex(\r\n    ({ profileId }) => profileId === selectedProfileId\r\n  );\r\n\r\n  try {\r\n    yield getRefDatabase([\r\n      DatabaseColumns.profiles,\r\n      indexProfile,\r\n      'online',\r\n    ]).set(true);\r\n  } catch (error) {\r\n    yield put(selectProfileError(error));\r\n  }\r\n}\r\n\r\nexport function* updateTimeProfile({\r\n  payload: selectedProfileId,\r\n}): Generator<PutEffect<any>> {\r\n  const data: Array<TProfile> = yield select(getAttributeFromProfiles('data'));\r\n  const indexProfile = data.findIndex(\r\n    ({ profileId }) => profileId === selectedProfileId\r\n  );\r\n\r\n  try {\r\n    yield getRefDatabase([\r\n      DatabaseColumns.profiles,\r\n      indexProfile,\r\n      'lastUpdateTime',\r\n    ]).set(new Date().getTime());\r\n    yield delay(UPDATE_DELAY_TIME);\r\n    yield updateTimeProfile({ payload: selectedProfileId });\r\n  } catch (error) {\r\n    yield put(updateTimeProfileError(error));\r\n  }\r\n}\r\n","// @ts-nocheck\r\nimport { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\r\n\r\n// store\r\nimport { createProfile, selectProfile, updateTimeProfile } from './saga';\r\nimport { ProfilesActionsType } from './actionsType';\r\n\r\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\r\n  yield all([\r\n    // @ts-ignore\r\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\r\n    takeEvery(ProfilesActionsType.selectProfile, selectProfile),\r\n    takeEvery(ProfilesActionsType.updateTimeProfile, updateTimeProfile),\r\n  ]);\r\n}\r\n","// @ts-nocheck\r\nimport { SagaMiddleware } from 'redux-saga';\r\n\r\n// store\r\nimport { watchAuth } from './auth/watch';\r\nimport { watchChannels } from './channels/watch';\r\nimport { watchCommonStore } from './common/watch';\r\nimport { watchProfiles } from './profiles/watch';\r\n\r\nconst watches = [watchAuth, watchChannels, watchCommonStore, watchProfiles];\r\n\r\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\r\n  for (const watch of watches) sagaMiddleware.run(watch);\r\n};\r\n\r\nexport default sagaMiddlewareRuns;\r\n","// @ts-nocheck\r\nimport {\r\n  Action,\r\n  applyMiddleware,\r\n  CombinedState,\r\n  createStore,\r\n  Store,\r\n} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport thunk from 'redux-thunk';\r\n\r\n// store\r\nimport reducers from './reducers';\r\nimport sagaMiddlewareRuns from './watchers';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst configureStore = (): Store<CombinedState<any>, Action> => {\r\n  const store = createStore(\r\n    reducers(),\r\n    {},\r\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\r\n  );\r\n  sagaMiddlewareRuns(sagaMiddleware);\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n// components\r\nimport App from './components/App/App';\r\nimport Firebase from './components/Firebase/Firebase';\r\n\r\n// store\r\nimport configureStore from './store/configureStore';\r\n\r\n// styles\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={configureStore()}>\r\n      <Firebase />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}