{"version":3,"sources":["store/profiles/actionsType.ts","assets/images/icons/send-icon.svg","components/Chat/ChatInput/ChatInput.tsx","components/Chat/ChatMessages/ChatMessages.tsx","components/Chat/Chat.tsx","assets/images/icons/close.svg","components/NavMenu/NavMenu.tsx","assets/images/icons/hamburger-menu.svg","components/PageHeader/PageHeader.tsx","assets/images/icons/back.svg","assets/images/icons/button-picture.svg","assets/images/icons/empty-image.svg","components/ProfileForm/services/loadImage.ts","store/profiles/selectors.ts","components/ProfilePickerSection/enums.ts","components/ProfileForm/ProfileForm.tsx","store/profiles/actions.ts","components/CreateProfileForm/CreateProfileForm.tsx","assets/images/icons/plus.svg","components/ProfilePicker/ProfilePicker.tsx","store/auth/actionsType.ts","components/ProfilePickerList/ProfilePickerList.tsx","components/ProfilePickerSection/ProfilePickerSection.tsx","assets/images/backgrounds/gentleman.svg","components/PageLoader/PageLoader.tsx","store/auth/selectors.ts","components/Firebase/enums.ts","store/selectors.ts","components/Page/Page.tsx","components/App/App.tsx","components/Firebase/constants.ts","components/Firebase/services/databaseErrorHandler.ts","enums.ts","components/Firebase/services/databaseSuccessHandler.ts","components/Firebase/services/databaseHandler.ts","components/Firebase/Firebase.tsx","store/auth/reducer.ts","store/profiles/reducer.ts","store/reducers.ts","store/auth/actions.ts","store/auth/saga.ts","constants.ts","store/auth/watch.ts","store/common/saga.ts","store/common/actionsType.ts","store/common/watch.ts","components/Firebase/services/afterUploadImageHandler.ts","components/Firebase/services/generateProfileId.ts","components/Firebase/services/getRefDatabase.ts","store/common/actions.ts","store/profiles/saga.ts","store/profiles/watch.ts","store/watchers.ts","store/configureStore.ts","index.tsx"],"names":["ProfilesActionsType","ChatInput","forwardRef","ref","inputHandler","useState","visibilityPlaceholder","setVisibilityPlaceholder","className","contentEditable","onBlur","event","target","innerText","onFocus","onInput","suppressContentEditableWarning","alt","src","SendIcon","ChatMessages","_","Chat","messagesRef","useRef","inputRef","height","current","clientHeight","style","NavMenu","visible","setVisible","onClickHandler","onClick","e","stopPropagation","CloseIcon","PageHeader","HamburgerMenu","loadImage","setImageData","reader","FileReader","files","onload","file","result","readAsDataURL","REDUCER_KEY","Mode","profilesSelector","getFp","isPendingSelector","createSelector","profilesLoadedSelector","composeFp","isArrayFp","getAttributeFromProfiles","attribute","ProfileForm","clickHandler","name","initialName","imageData","initialImageData","submitHandler","title","isPending","useSelector","setName","BackIcon","onSubmit","preventDefault","backToProfileList","EmptyImage","click","ButtonPicture","onChange","type","TextField","value","label","Button","color","disabled","size","variant","CircularProgress","createProfileError","payload","uploadImageFinished","CreateProfileForm","restProps","dispatch","useDispatch","formData","createProfile","ProfilePicker","mode","PlusIcon","AuthActionsType","ProfilePickerList","profiles","map","profileId","setProfileId","ProfilePickerSection","listProfiles","setMode","PageLoader","appDataLoaded","Gentleman","Array","from","index","DatabaseColumns","authSelector","errorMessageSelector","isAuthenticatedSelector","isPendingAuthSelector","errorMessage","appDataLoadedSelector","profilesData","Page","selectedProfileId","App","theme","useMemo","createMuiTheme","palette","ThemeProvider","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","LocalStorageKey","StoragePath","databaseErrorHandler","error","console","getData","values","keys","Object","data","i","length","push","databaseSuccessHandler","response","actions","val","databaseHandler","firebase","database","on","Firebase","isAuthenticated","useEffect","initializeApp","profilesActions","fetchProfilesSuccess","setTimeout","initialState","loginSuccess","state","loginError","seletedProfileId","createProfileSuccess","fetchProfilesError","reducers","auth","action","createRootReducer","combineReducers","loginActionError","login","password","localStorage","getItem","signInWithEmailAndPassword","put","code","watchAuth","all","takeEvery","uploadImage","path","uploadTask","storage","channel","eventChannel","emit","snapshot","getDownloadURL","then","CommonActionsType","watchCommonStore","uploadFile","afterUploadImageHandler","generateProfileId","characters","splice","charAt","Math","floor","random","find","join","getRefDatabase","refDataBase","child","select","take","set","online","watchProfiles","watches","sagaMiddlewareRuns","sagaMiddleware","watch","run","createSagaMiddleware","configureStore","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1255124a.chunk.js","sourcesContent":["// @ts-nocheck\r\nexport const REDUCER_KEY = 'profiles';\r\n\r\nexport enum ProfilesActionsType {\r\n  createProfile = `${REDUCER_KEY}/createProfile`,\r\n  createProfileSuccess = `${REDUCER_KEY}/createProfileSuccess`,\r\n  createProfileError = `${REDUCER_KEY}/createProfileError`,\r\n  fetchProfilesSuccess = `${REDUCER_KEY}/fetchProfilesSuccess`,\r\n  fetchProfilesError = `${REDUCER_KEY}/fetchProfilesError`,\r\n  uploadImageFinished = `${REDUCER_KEY}/uploadImageFinished`,\r\n  setProfileId = `${REDUCER_KEY}/setProfileId`,\r\n}\r\n","export default __webpack_public_path__ + \"static/media/send-icon.d7969ca4.svg\";","// @ts-nocheck\r\nimport {\r\n  forwardRef,\r\n  ForwardRefExoticComponent,\r\n  RefAttributes,\r\n  useState,\r\n} from 'react';\r\n\r\n// others\r\nimport SendIcon from '../../../assets/images/icons/send-icon.svg';\r\n\r\n// styles\r\nimport './chat-input-styles.scss';\r\n\r\ntype TProps = {\r\n  inputHandler: (event: Event) => void;\r\n};\r\n\r\nconst ChatInput: ForwardRefExoticComponent<\r\n  TProps & RefAttributes<HTMLDivElement>\r\n> = forwardRef<HTMLDivElement, TProps>(({ inputHandler }, ref) => {\r\n  const [visibilityPlaceholder, setVisibilityPlaceholder] = useState(true);\r\n\r\n  const onBlurHandler = (event: Event): void => {\r\n    const { target } = event;\r\n\r\n    if (target.innerText === '') {\r\n      setVisibilityPlaceholder(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ChatInput\" ref={ref}>\r\n      <p\r\n        className=\"ChatInput__text-field\"\r\n        contentEditable={true}\r\n        onBlur={onBlurHandler}\r\n        onFocus={() => setVisibilityPlaceholder(false)}\r\n        onInput={inputHandler}\r\n        suppressContentEditableWarning\r\n      />\r\n      {visibilityPlaceholder && (\r\n        <span className=\"ChatInput__placeholder\">Message #Meetings:</span>\r\n      )}\r\n      <img alt=\"send-icon\" className=\"ChatInput__send-icon\" src={SendIcon} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ChatInput;\r\n","import { forwardRef, ForwardRefExoticComponent, RefAttributes } from 'react';\r\n\r\n// styles\r\nimport './chat-messages-styles.scss';\r\n\r\nconst ChatMessages: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>> =\r\n  forwardRef<HTMLDivElement, {}>((_, ref) => {\r\n    return <div className=\"ChatMessages\" ref={ref}></div>;\r\n  });\r\n\r\nexport default ChatMessages;\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useRef } from 'react';\r\n\r\n// components\r\nimport ChatInput from './ChatInput/ChatInput';\r\nimport ChatMessages from './ChatMessages/ChatMessages';\r\n\r\n// styles\r\nimport './chat-styles.scss';\r\n\r\nconst Chat: FunctionComponent<{}> = () => {\r\n  const messagesRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  const onInputHandler = (event: Event): void => {\r\n    const height = inputRef.current.clientHeight;\r\n    messagesRef.current.style.height = `calc(100% - ${height}px)`;\r\n  };\r\n\r\n  return (\r\n    <section className=\"Chat\">\r\n      <ChatMessages ref={messagesRef} />\r\n      <ChatInput inputHandler={onInputHandler} ref={inputRef} />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","export default __webpack_public_path__ + \"static/media/close.91205169.svg\";","import { FunctionComponent } from 'react';\r\n\r\n// others\r\nimport CloseIcon from '../../assets/images/icons/close.svg';\r\n\r\n// styles\r\nimport './nav-menu-styles.scss';\r\n\r\ntype TProps = {\r\n  visible: boolean;\r\n  setVisible: (flag: boolean) => void;\r\n};\r\n\r\nconst NavMenu: FunctionComponent<TProps> = ({ visible, setVisible }) => {\r\n  const onClickHandler = (): void => setVisible(false);\r\n\r\n  return (\r\n    <div\r\n      className={`NavMenu ${visible && 'NavMenu--visible'}`}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div\r\n        className={`NavMenu__background ${\r\n          visible && 'NavMenu__background--visible'\r\n        }`}\r\n      />\r\n      <div\r\n        className={`NavMenu__container ${\r\n          visible && 'NavMenu__container--visible'\r\n        }`}\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        <div className=\"NavMenu__header\">\r\n          <div className=\"NavMenu__button-close\">\r\n            <img alt=\"close-icon\" onClick={onClickHandler} src={CloseIcon} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavMenu;\r\n","export default __webpack_public_path__ + \"static/media/hamburger-menu.85ddbb0d.svg\";","import { FunctionComponent, useState } from 'react';\r\n\r\n// components\r\nimport NavMenu from '../NavMenu/NavMenu';\r\n\r\n// others\r\nimport HamburgerMenu from '../../assets/images/icons/hamburger-menu.svg';\r\n\r\n// styles\r\nimport './page-header-styles.scss';\r\n\r\nconst PageHeader: FunctionComponent<{}> = () => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  return (\r\n    <header className=\"PageHeader\">\r\n      {/* LEFT COLUMN */}\r\n      <div className=\"PageHeader__content\">\r\n        {/* PICKER */}\r\n        <div className=\"PageHeader__channel-picker\">ME</div>\r\n\r\n        {/* DETAILS */}\r\n        <div>\r\n          <p className=\"PageHeader__title\">Gentleman App - Meetings</p>\r\n          <p className=\"PageHeader__users\">2 Brothers-in-law online</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* RIGHT COLUMN */}\r\n      <img\r\n        alt=\"hamburger-menu\"\r\n        className=\"PageHeader__hamburger-menu\"\r\n        onClick={() => setVisible(true)}\r\n        src={HamburgerMenu}\r\n      />\r\n\r\n      {/* Nav Left Menu */}\r\n      <NavMenu visible={visible} setVisible={setVisible} />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default PageHeader;\r\n","export default __webpack_public_path__ + \"static/media/back.3f83d067.svg\";","export default __webpack_public_path__ + \"static/media/button-picture.9659aaae.svg\";","export default __webpack_public_path__ + \"static/media/empty-image.16de0a9b.svg\";","// @ts-nocheck\r\n// others\r\n\r\nconst loadImage = (\r\n  event: Event,\r\n  setImageData: (file: string | ArrayBuffer | null) => void\r\n) => {\r\n  const reader = new FileReader();\r\n  const { files } = event.target;\r\n\r\n  reader.onload = (e) => {\r\n    setImageData({\r\n      file: files[0],\r\n      src: e.target.result,\r\n    });\r\n  };\r\n\r\n  reader.readAsDataURL(files[0]);\r\n};\r\n\r\nexport default loadImage;\r\n","import getFp from 'lodash/fp/get';\r\nimport isArrayFp from 'lodash/fp/isArray';\r\nimport composeFp from 'lodash/fp/compose';\r\nimport { createSelector, Selector } from 'reselect';\r\n\r\n// store\r\nimport { REDUCER_KEY } from './actionsType';\r\nimport { TMainState } from '../../types';\r\nimport { TProfile, TProfilesState } from './types';\r\n\r\nexport const profilesSelector: Selector<TMainState, TProfilesState> =\r\n  getFp(REDUCER_KEY);\r\n\r\nexport const isPendingSelector: Selector<TMainState, boolean | undefined> =\r\n  createSelector(profilesSelector, getFp('isPending'));\r\n\r\nexport const profilesLoadedSelector: Selector<TMainState, boolean> =\r\n  createSelector(profilesSelector, composeFp(isArrayFp, getFp('data')));\r\n\r\nexport const getAttributeFromProfiles = (\r\n  attribute: string\r\n): Selector<TMainState, Array<TProfile>> =>\r\n  createSelector(profilesSelector, getFp(attribute));\r\n","export enum Mode {\r\n  createProfile = 'createProfile',\r\n  listProfiles = 'listProfiles',\r\n}\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n// others\r\nimport BackIcon from '../../assets/images/icons/back.svg';\r\nimport ButtonPicture from '../../assets/images/icons/button-picture.svg';\r\nimport EmptyImage from '../../assets/images/icons/empty-image.svg';\r\nimport { TImageData } from '../../types';\r\nimport { TProfileFormData } from '../../store/profiles/types';\r\n\r\n// services\r\nimport loadImage from './services/loadImage';\r\n\r\n// store\r\nimport { isPendingSelector } from '../../store/profiles/selectors';\r\n\r\n// styles\r\nimport './profile-form-styles.scss';\r\n\r\ntype TProps = {\r\n  clickHandler: () => void;\r\n  name?: string;\r\n  imageData?: TImageData;\r\n  submitHandler: (formData: TProfileFormData) => void;\r\n  title: string;\r\n};\r\n\r\nconst ProfileForm: FunctionComponent<TProps> = ({\r\n  clickHandler,\r\n  name: initialName = '',\r\n  imageData: initialImageData = null,\r\n  submitHandler,\r\n  title,\r\n}) => {\r\n  const isPending = useSelector(isPendingSelector);\r\n  const inputRef = useRef(null);\r\n  const [imageData, setImageData] = useState(initialImageData);\r\n  const [name, setName] = useState(initialName);\r\n\r\n  const onSubmitHandler = (event: Event) => {\r\n    event.preventDefault();\r\n\r\n    if (imageData && name) {\r\n      submitHandler({ backToProfileList: clickHandler, imageData, name });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ProfileForm__form-wrapper\">\r\n      <h2 className=\"ProfileForm__title\">\r\n        <img\r\n          alt=\"back-icon\"\r\n          className=\"ProfileForm__icon\"\r\n          onClick={clickHandler}\r\n          src={BackIcon}\r\n        />\r\n        {title}\r\n      </h2>\r\n\r\n      {/* FORM */}\r\n      <form className=\"ProfileForm\" onSubmit={onSubmitHandler}>\r\n        {/* AVATAR */}\r\n        <div\r\n          className={`ProfileForm__avatar ${\r\n            imageData ? 'ProfileForm__avatar--selected' : ''\r\n          }`}\r\n        >\r\n          {imageData ? (\r\n            <img\r\n              alt=\"avatar\"\r\n              className=\"ProfileForm__image\"\r\n              src={imageData.src}\r\n            />\r\n          ) : (\r\n            <img\r\n              alt=\"empty\"\r\n              className=\"ProfileForm__empty-picture\"\r\n              src={EmptyImage}\r\n            />\r\n          )}\r\n\r\n          {/* BUTTON */}\r\n          <img\r\n            alt=\"button-icon\"\r\n            className=\"ProfileForm__button-picture\"\r\n            onClick={() => inputRef.current.click()}\r\n            src={ButtonPicture}\r\n          />\r\n          <input\r\n            className=\"ProfileForm__input-file\"\r\n            onChange={(event: Event) => loadImage(event, setImageData)}\r\n            ref={inputRef}\r\n            type=\"file\"\r\n          />\r\n        </div>\r\n\r\n        {/* INPUT NAME */}\r\n        <TextField\r\n          className=\"ProfileForm__input-name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n          label=\"Profile name:\"\r\n          value={name}\r\n        />\r\n\r\n        <Button\r\n          className=\"ProfileForm__submit-button\"\r\n          color=\"primary\"\r\n          disabled={isPending}\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n        >\r\n          Create Profile\r\n          {isPending && (\r\n            <CircularProgress\r\n              className=\"ProfileForm__spinner\"\r\n              color=\"primary\"\r\n              size={20}\r\n            />\r\n          )}\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n","// others\r\nimport { TReturnablePayload } from './../common/types';\r\nimport {\r\n  TCreateProfile,\r\n  TCreateProfileSuccess,\r\n  TCreateProfileError,\r\n  TFetchProfilesSuccess,\r\n  TFetchProfilesError,\r\n  TProfile,\r\n  TProfileFormData,\r\n  TUploadImageFinished,\r\n  TSetProfileId,\r\n} from './types';\r\n\r\n// store\r\nimport { ProfilesActionsType } from './actionsType';\r\n\r\nexport const createProfile = (payload: TProfileFormData): TCreateProfile => ({\r\n  type: ProfilesActionsType.createProfile,\r\n  payload,\r\n});\r\n\r\nexport const createProfileSuccess = (): TCreateProfileSuccess => ({\r\n  type: ProfilesActionsType.createProfileSuccess,\r\n});\r\n\r\nexport const createProfileError = (payload: string): TCreateProfileError => ({\r\n  type: ProfilesActionsType.createProfileError,\r\n  payload,\r\n});\r\n\r\nexport const fetchProfilesSuccess = (\r\n  payload: Array<TProfile>\r\n): TFetchProfilesSuccess => ({\r\n  type: ProfilesActionsType.fetchProfilesSuccess,\r\n  payload,\r\n});\r\n\r\nexport const fetchProfilesError = (): TFetchProfilesError => ({\r\n  type: ProfilesActionsType.fetchProfilesError,\r\n});\r\n\r\nexport const uploadImageFinished = (\r\n  payload: TReturnablePayload\r\n): TUploadImageFinished => ({\r\n  type: ProfilesActionsType.uploadImageFinished,\r\n  payload,\r\n});\r\n\r\nexport const setProfileId = (payload: string): TSetProfileId => ({\r\n  type: ProfilesActionsType.setProfileId,\r\n  payload,\r\n});\r\n","import { FunctionComponent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// components\r\nimport ProfileForm from '../ProfileForm/ProfileForm';\r\n\r\n// store\r\nimport { createProfile } from '../../store/profiles/actions';\r\nimport { TProfileFormData } from '../../store/profiles/types';\r\n\r\nconst CreateProfileForm: FunctionComponent = ({ ...restProps }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const submitHandler = (formData: TProfileFormData) =>\r\n    dispatch(createProfile(formData));\r\n\r\n  return (\r\n    //@ts-ignore\r\n    <ProfileForm\r\n      submitHandler={submitHandler}\r\n      title=\"Create Profile:\"\r\n      {...restProps}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CreateProfileForm;\r\n","export default __webpack_public_path__ + \"static/media/plus.c453ef1e.svg\";","import { FunctionComponent } from 'react';\r\n\r\n// others\r\nimport PlusIcon from '../../assets/images/icons/plus.svg';\r\n\r\n// styles\r\nimport './profile-picker-styles.scss';\r\n\r\ntype TProps = {\r\n  clickHandler: () => void;\r\n  mode?: 'add' | 'select';\r\n  name?: string;\r\n  src?: string;\r\n};\r\n\r\nconst ProfilePicker: FunctionComponent<TProps> = ({\r\n  clickHandler,\r\n  mode = 'add',\r\n  name,\r\n  src,\r\n}) => {\r\n  return (\r\n    <section\r\n      className={`ProfilePicker ProfilePicker--${mode}`}\r\n      onClick={clickHandler}\r\n    >\r\n      {/* TITLE */}\r\n      <p className={`ProfilePicker__title ProfilePicker--${mode}__title`}>\r\n        {name ? name : 'Create:'}\r\n      </p>\r\n\r\n      {/* CIRCLE */}\r\n      <div className={`ProfilePicker__button ProfilePicker--${mode}__button`}>\r\n        <img\r\n          alt={name ? `${name}-avatar` : 'icon'}\r\n          className={`ProfilePicker__image ProfilePicker--${mode}__image`}\r\n          src={src ? src : PlusIcon}\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProfilePicker;\r\n","// @ts-nocheck\r\nexport const REDUCER_KEY = 'auth';\r\n\r\nexport enum AuthActionsType {\r\n  login = `${REDUCER_KEY}/login`,\r\n  loginSuccess = `${REDUCER_KEY}/loginSuccess`,\r\n  loginError = `${REDUCER_KEY}/loginError`,\r\n}\r\n","import { FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// components\r\nimport ProfilePicker from '../ProfilePicker/ProfilePicker';\r\n\r\n// others\r\nimport { Mode } from '../ProfilePickerSection/enums';\r\nimport { TProfile } from '../../store/profiles/types';\r\n\r\n// store\r\nimport { setProfileId } from '../../store/profiles/actions';\r\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\r\n\r\n// styles\r\nimport './profile-picker-list-styles.scss';\r\n\r\ntype TProps = {\r\n  clickHandler: (mode: Mode) => void;\r\n};\r\n\r\nconst ProfilePickerList: FunctionComponent<TProps> = ({ clickHandler }) => {\r\n  const dispatch = useDispatch();\r\n  const profiles: Array<TProfile> = useSelector(\r\n    getAttributeFromProfiles('data')\r\n  );\r\n\r\n  return (\r\n    <section className=\"ProfilePickerList\">\r\n      {/* CONTENT */}\r\n      <h1 className=\"ProfilePickerList__title\">Choose a brother-in-law:</h1>\r\n      <p className=\"ProfilePickerList__description\">\r\n        Select a profile to start a conversation with your brother-in-law.\r\n      </p>\r\n\r\n      {/* PICKERS */}\r\n      <div className=\"ProfilePickerList__pickers\">\r\n        <ProfilePicker clickHandler={() => clickHandler(Mode.createProfile)} />\r\n\r\n        {/* LIST */}\r\n        {/* @ts-ignore */}\r\n        {profiles.map(({ name, profileId, src }) => (\r\n          <ProfilePicker\r\n            clickHandler={() => dispatch(setProfileId(profileId))}\r\n            key={profileId}\r\n            mode=\"select\"\r\n            name={name}\r\n            src={src}\r\n          />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProfilePickerList;\r\n","import { FunctionComponent, useState } from 'react';\r\n\r\n// components\r\nimport CreateProfileForm from '../CreateProfileForm/CreateProfileForm';\r\nimport ProfilePickerList from '../ProfilePickerList/ProfilePickerList';\r\n\r\n// others\r\nimport { Mode } from './enums';\r\n\r\n// styles\r\nimport './profile-picker-section-styles.scss';\r\n\r\nconst ProfilePickerSection: FunctionComponent = () => {\r\n  const [mode, setMode] = useState(Mode.listProfiles);\r\n\r\n  const onClickBackHandler = (): void => setMode(Mode.listProfiles);\r\n\r\n  return (\r\n    <section className=\"ProfilePickerSection\">\r\n      {mode === Mode.listProfiles ? (\r\n        // LIST\r\n        <ProfilePickerList clickHandler={(mode: Mode) => setMode(mode)} />\r\n      ) : (\r\n        // @ts-ignore\r\n        <CreateProfileForm clickHandler={onClickBackHandler} />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProfilePickerSection;\r\n","export default __webpack_public_path__ + \"static/media/gentleman.ff3326dc.svg\";","import { FunctionComponent } from 'react';\r\n\r\n// others\r\nimport Gentleman from '../../assets/images/backgrounds/gentleman.svg';\r\n\r\n// styles\r\nimport './page-loader-styles.scss';\r\n\r\ntype TProps = {\r\n  appDataLoaded: boolean;\r\n};\r\n\r\nconst PageLoader: FunctionComponent<TProps> = ({ appDataLoaded }) => (\r\n  <div className=\"PageLoader\">\r\n    <h2 className=\"PageLoader__title\">WELCOME GENTLEMAN</h2>\r\n    {/* LOGO */}\r\n    <img alt=\"gentleman-logo\" src={Gentleman} />\r\n\r\n    {/* SPINNER */}\r\n    <div className=\"PageLoader__spinner\">\r\n      {Array.from(Array(12)).map((_, index) => (\r\n        <div\r\n          className={`PageLoader__circle PageLoader__circle--${index + 1}`}\r\n          key={index}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PageLoader;\r\n","// @ts-nocheck\r\nimport getFp from 'lodash/fp/get';\r\nimport { createSelector, Selector } from 'reselect';\r\n\r\n// store\r\nimport { REDUCER_KEY } from './actionsType';\r\nimport { TMainState } from '../../types';\r\nimport { TLocationState } from './types';\r\n\r\nexport const authSelector: Selector<TMainState, TLocationState> =\r\n  getFp(REDUCER_KEY);\r\n\r\nexport const errorMessageSelector: Selector<TMainState, boolean> =\r\n  createSelector(authSelector, getFp('error'));\r\n\r\nexport const isPendingSelector: Selector<TMainState, boolean> = createSelector(\r\n  authSelector,\r\n  getFp('isPending')\r\n);\r\n","export enum DatabaseColumns {\r\n  profiles = 'profiles',\r\n}\r\n","import { createSelector, Selector } from 'reselect';\r\n\r\n// others\r\nimport { TMainState } from '../types';\r\n\r\n// store\r\nimport {\r\n  isPendingSelector as isPendingAuthSelector,\r\n  errorMessageSelector,\r\n} from './auth/selectors';\r\nimport { profilesLoadedSelector } from './profiles/selectors';\r\n\r\nexport const isAuthenticatedSelector: Selector<TMainState, boolean> =\r\n  createSelector(\r\n    isPendingAuthSelector,\r\n    errorMessageSelector,\r\n    (isPending, errorMessage) => !isPending && !errorMessage\r\n  );\r\n\r\nexport const appDataLoadedSelector: Selector<TMainState, boolean> =\r\n  createSelector(profilesLoadedSelector, (profilesData) => profilesData);\r\n","import { FunctionComponent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// components\r\nimport Chat from '../Chat/Chat';\r\nimport PageHeader from '../PageHeader/PageHeader';\r\nimport ProfilePicker from '../ProfilePickerSection/ProfilePickerSection';\r\nimport PageLoader from '../PageLoader/PageLoader';\r\n\r\n// store\r\nimport { getAttributeFromProfiles } from '../../store/profiles/selectors';\r\nimport { appDataLoadedSelector } from '../../store/selectors';\r\n\r\n// styles\r\nimport './page-styles.scss';\r\n\r\nconst Page: FunctionComponent<{}> = () => {\r\n  const selectedProfileId = useSelector(\r\n    getAttributeFromProfiles('seletedProfileId')\r\n  );\r\n  const appDataLoaded = useSelector(appDataLoadedSelector);\r\n\r\n  if (!appDataLoaded) {\r\n    return <PageLoader appDataLoaded={appDataLoaded} />;\r\n  }\r\n\r\n  if (!selectedProfileId) {\r\n    return <ProfilePicker />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Page\">\r\n      <PageHeader />\r\n      <Chat />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { useEffect, useMemo, FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\n// components\r\nimport ErrorPage from '../ErrorPage/ErrorPage';\r\nimport Page from '../Page/Page';\r\n\r\n// store\r\nimport {\r\n  errorMessageSelector,\r\n  isPendingSelector,\r\n} from '../../store/auth/selectors';\r\nimport { loginAction } from '../../store/auth/actions';\r\n\r\nconst App: FunctionComponent<{}> = () => {\r\n  const isPending = useSelector(isPendingSelector);\r\n  const dispatch = useDispatch();\r\n  const errorMessage = useSelector(errorMessageSelector);\r\n\r\n  const theme = useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: 'dark',\r\n        },\r\n      }),\r\n    []\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   const password = prompt('Please enter a password:');\r\n  //   indexedDB.deleteDatabase('firebaseLocalStorageDb');\r\n  //   dispatch(loginAction(password as string));\r\n  //   // eslint-disable-next-line\r\n  // }, []);\r\n\r\n  // if (isPending) {\r\n  //   return null;\r\n  // }\r\n\r\n  // if (errorMessage) {\r\n  //   return <ErrorPage />;\r\n  // }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Page />;\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export const config = {\r\n  apiKey: 'AIzaSyBYQ05TbRrP2wVEX7NDn5CWodoAnnkpcOY',\r\n  authDomain: 'comics-book.firebaseapp.com',\r\n  projectId: 'comics-book',\r\n  storageBucket: 'comics-book.appspot.com',\r\n  messagingSenderId: '426496482303',\r\n  appId: '1:426496482303:web:ebf257ff0a64a90f6ae5ca',\r\n};\r\n","const databaseErrorHandler = (error: string): void => {\r\n  // eslint-disable-next-line\r\n  console.error(error);\r\n};\r\n\r\nexport default databaseErrorHandler;\r\n","export enum LocalStorageKey {\r\n  profileId = 'profileId',\r\n}\r\n\r\nexport enum StoragePath {\r\n  profiles = 'PROFILES',\r\n}\r\n","// @ts-nocheck\r\nconst getData = (values: any): void => {\r\n  const keys = Object.keys(values);\r\n  const data = [];\r\n\r\n  for (let i = 0; i < keys.length; i++) {\r\n    data.push(values[keys[i]]);\r\n  }\r\n  return data;\r\n};\r\n\r\nconst databaseSuccessHandler = (\r\n  response: any,\r\n  actions: (data: any) => void = null\r\n): void => {\r\n  const values = response.val();\r\n  actions(getData(values || {}));\r\n};\r\n\r\nexport default databaseSuccessHandler;\r\n","// others\r\nimport { DatabaseColumns } from '../enums';\r\n\r\n// services\r\nimport databaseErrorHandler from './databaseErrorHandler';\r\nimport databaseSuccessHandler from './databaseSuccessHandler';\r\n\r\nconst databaseHandler = (\r\n  firebase: any,\r\n  actions: (data: any) => void,\r\n  ref: DatabaseColumns\r\n) => {\r\n  firebase\r\n    .database()\r\n    .ref(ref)\r\n    .on(\r\n      'value',\r\n      (response: any) => databaseSuccessHandler(response, actions),\r\n      databaseErrorHandler\r\n    );\r\n};\r\n\r\nexport default databaseHandler;\r\n","// @ts-nocheck\r\nimport { FunctionComponent, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport firebase from 'firebase';\r\n\r\n// others\r\nimport { config } from './constants';\r\nimport { DatabaseColumns } from './enums';\r\nimport { TProfile } from '../../store/profiles/types';\r\n\r\n// store\r\nimport { isAuthenticatedSelector } from '../../store/selectors';\r\nimport { fetchProfilesSuccess } from '../../store/profiles/actions';\r\n\r\n// services\r\nimport databaseHandler from './services/databaseHandler';\r\n\r\nconst Firebase: FunctionComponent<{}> = () => {\r\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    firebase.initializeApp(config);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const profilesActions = (payload: Array<TProfile>): void => {\r\n      dispatch(fetchProfilesSuccess(payload));\r\n    };\r\n\r\n    if (!isAuthenticated) {\r\n      setTimeout(() => {\r\n        databaseHandler(firebase, profilesActions, DatabaseColumns.profiles);\r\n      }, 1);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [isAuthenticated]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default Firebase;\r\n","// @ts-nocheck\r\n// others\r\nimport { TLoginError, TLoginSuccess } from './types';\r\n\r\n// store\r\nimport { AuthActionsType } from './actionsType';\r\nimport { TAnyAction } from '../../types';\r\nimport { TAuthState } from './types';\r\n\r\nconst initialState: TAuthState = {\r\n  error: '',\r\n  isPending: true,\r\n  profileId: '',\r\n};\r\n\r\nconst loginSuccess = (\r\n  state: TAuthState,\r\n  { payload: profileId }: TLoginSuccess\r\n): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n  profileId,\r\n});\r\n\r\nconst loginError = (\r\n  state: TAuthState,\r\n  { payload: error }: TLoginError\r\n): TAuthState => ({\r\n  ...state,\r\n  error,\r\n  isPending: false,\r\n});\r\n\r\nconst auth = (\r\n  state: TAuthState = initialState,\r\n  action: TAnyAction\r\n): TAuthState => {\r\n  switch (action.type) {\r\n    case AuthActionsType.loginSuccess:\r\n      return loginSuccess(state, action);\r\n    case AuthActionsType.loginError:\r\n      return loginError(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default auth;\r\n","// @ts-nocheck\r\n// others\r\nimport {\r\n  TCreateProfileError,\r\n  TFetchProfilesSuccess,\r\n  TProfilesState,\r\n  TSetProfileId,\r\n} from './types';\r\n\r\n// store\r\nimport { ProfilesActionsType } from './actionsType';\r\nimport { TAnyAction } from '../../types';\r\n\r\nconst initialState: TProfilesState = {\r\n  data: null,\r\n  error: '',\r\n  isPending: true,\r\n  seletedProfileId: '',\r\n};\r\n\r\nconst createProfile = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: true,\r\n});\r\n\r\nconst createProfileSuccess = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n});\r\n\r\nconst createProfileError = (\r\n  state: TAuthState,\r\n  { payload: error }: TCreateProfileError\r\n): TAuthState => ({\r\n  ...state,\r\n  error,\r\n  isPending: false,\r\n});\r\n\r\nconst fetchProfilesSuccess = (\r\n  state: TAuthState,\r\n  { payload: data }: TFetchProfilesSuccess\r\n): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n  data,\r\n});\r\n\r\nconst fetchProfilesError = (state: TAuthState): TAuthState => ({\r\n  ...state,\r\n  isPending: false,\r\n});\r\n\r\nconst setProfileId = (\r\n  state: TAuthState,\r\n  { payload: seletedProfileId }: TSetProfileId\r\n): TAuthState => ({\r\n  ...state,\r\n  seletedProfileId,\r\n});\r\n\r\nconst profiles = (\r\n  state: TAuthState = initialState,\r\n  action: TAnyAction\r\n): TAuthState => {\r\n  switch (action.type) {\r\n    case ProfilesActionsType.createProfile:\r\n      return createProfile(state, action);\r\n    case ProfilesActionsType.createProfileSuccess:\r\n      return createProfileSuccess(state, action);\r\n    case ProfilesActionsType.createProfileError:\r\n      return createProfileError(state, action);\r\n    case ProfilesActionsType.fetchProfilesSuccess:\r\n      return fetchProfilesSuccess(state, action);\r\n    case ProfilesActionsType.fetchProfilesError:\r\n      return fetchProfilesError(state, action);\r\n    case ProfilesActionsType.setProfileId:\r\n      return setProfileId(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default profiles;\r\n","// @ts-nocheck\r\nimport { combineReducers } from 'redux';\r\n\r\n// store\r\nimport auth from './auth/reducer';\r\nimport profiles from './profiles/reducer';\r\n\r\nconst reducers = { auth, profiles };\r\n\r\nconst createRootReducer = () =>\r\n  combineReducers({\r\n    ...reducers,\r\n  });\r\n\r\nexport default createRootReducer;\r\n","// store\r\nimport { AuthActionsType } from './actionsType';\r\nimport { TLogin, TLoginSuccess, TLoginError } from './types';\r\n\r\nexport const loginAction = (payload: string): TLogin => ({\r\n  type: AuthActionsType.login,\r\n  payload,\r\n});\r\n\r\nexport const loginActionSuccess = (payload: string): TLoginSuccess => ({\r\n  type: AuthActionsType.loginSuccess,\r\n  payload,\r\n});\r\n\r\nexport const loginActionError = (payload: string): TLoginError => ({\r\n  type: AuthActionsType.loginError,\r\n  payload,\r\n});\r\n","// @ts-nocheck\r\nimport { PutEffect, put } from 'redux-saga/effects';\r\nimport firebase from 'firebase';\r\n\r\n// others\r\nimport { EMAIL } from '../../constants';\r\nimport { LocalStorageKey } from '../../enums';\r\n\r\n// store\r\nimport { loginActionError, loginActionSuccess } from './actions';\r\n\r\nexport function* login(data: { payload: string }): Generator<PutEffect<any>> {\r\n  const password = data.payload;\r\n  const profileId = localStorage.getItem(LocalStorageKey.profileId) || '';\r\n\r\n  try {\r\n    yield firebase.auth().signInWithEmailAndPassword(EMAIL, password);\r\n    yield put(loginActionSuccess(profileId));\r\n  } catch (error) {\r\n    const { code } = error;\r\n    yield put(loginActionError(code));\r\n  }\r\n}\r\n","export const EMAIL = 'eryk.sandecki@gmail.com';\r\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\r\n\r\n// store\r\nimport { login } from './saga';\r\nimport { AuthActionsType } from './actionsType';\r\n\r\nexport function* watchAuth(): Generator<AllEffect<ForkEffect<any>>> {\r\n  yield all([\r\n    // @ts-ignore\r\n    takeEvery(AuthActionsType.login, login),\r\n  ]);\r\n}\r\n","// @ts-nocheck\r\nimport firebase from 'firebase';\r\nimport { eventChannel } from 'redux-saga';\r\nimport { PutEffect, put, takeEvery } from 'redux-saga/effects';\r\nimport { TFileUploadPayload } from './types';\r\n\r\nexport function* uploadImage({ payload }): Generator<PutEffect<any>> {\r\n  const { action, file, path }: TFileUploadPayload = payload;\r\n\r\n  try {\r\n    const uploadTask = firebase.storage().ref(path).put(file);\r\n    const channel = eventChannel((emit) =>\r\n      uploadTask.on('state_changed', emit)\r\n    );\r\n    let src = '';\r\n\r\n    yield takeEvery(channel, () => {});\r\n    yield uploadTask;\r\n    yield uploadTask.snapshot.ref\r\n      .getDownloadURL()\r\n      .then((response) => (src = response));\r\n    yield put(action({ result: 'success', src }));\r\n  } catch (error) {\r\n    yield put(action({ error, result: 'error' }));\r\n  }\r\n}\r\n","// @ts-nocheck\r\nexport const REDUCER_KEY = 'common';\r\n\r\nexport enum CommonActionsType {\r\n  uploadFile = `${REDUCER_KEY}/uploadFile`,\r\n}\r\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\r\n\r\n// store\r\nimport { uploadImage } from './saga';\r\nimport { CommonActionsType } from './actionsType';\r\n\r\nexport function* watchCommonStore(): Generator<AllEffect<ForkEffect<any>>> {\r\n  yield all([\r\n    // @ts-ignore\r\n    takeEvery(CommonActionsType.uploadFile, uploadImage),\r\n  ]);\r\n}\r\n","// @ts-nocheck\r\n//others\r\nimport { TReturnablePayload } from '../../../store/common/types';\r\n\r\nconst afterUploadImageHandler = ({\r\n  error,\r\n  result,\r\n  src,\r\n}: TReturnablePayload) => {\r\n  if (result === 'error') {\r\n    throw error;\r\n  }\r\n  return src;\r\n};\r\n\r\nexport default afterUploadImageHandler;\r\n","// others\r\nimport { TProfile } from './../../../store/profiles/types';\r\n\r\nconst generateProfileId = (data: Array<TProfile>) => {\r\n  const result: Array<string> = [];\r\n  const characters =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n  do {\r\n    result.splice(0, result.length);\r\n    for (let i = 0; i < 9; i++) {\r\n      result.push(\r\n        characters.charAt(Math.floor(Math.random() * characters.length))\r\n      );\r\n    }\r\n  } while (data.find(({ profileId }) => profileId === result.join('')));\r\n\r\n  return result.join('');\r\n};\r\n\r\nexport default generateProfileId;\r\n","import firebase from 'firebase';\r\n\r\nconst getRefDatabase = (path: Array<string>): firebase.database.Reference => {\r\n  let refDataBase = firebase.database().ref(path[0]);\r\n  for (let i = 1; i < path.length; i++) {\r\n    refDataBase = refDataBase.child(path[i]);\r\n  }\r\n  return refDataBase;\r\n};\r\n\r\nexport default getRefDatabase;\r\n","// others\r\nimport { TFileUploadPayload, TUploadFile } from './types';\r\n\r\n// store\r\nimport { CommonActionsType } from './actionsType';\r\n\r\nexport const uploadFile = (payload: TFileUploadPayload): TUploadFile => ({\r\n  type: CommonActionsType.uploadFile,\r\n  payload,\r\n});\r\n","// @ts-nocheck\r\nimport { PutEffect, take, put, select } from 'redux-saga/effects';\r\nimport { TProfileFormData } from './types';\r\n\r\n// others\r\nimport { DatabaseColumns } from '../../components/Firebase/enums';\r\nimport { StoragePath } from '../../enums';\r\n\r\n// services\r\nimport afterUploadImageHandler from '../../components/Firebase/services/afterUploadImageHandler';\r\nimport generateProfileId from '../../components/Firebase/services/generateProfileId';\r\nimport getRefDatabase from '../../components/Firebase/services/getRefDatabase';\r\n\r\n// store\r\nimport { ProfilesActionsType } from './actionsType';\r\nimport {\r\n  createProfileSuccess,\r\n  createProfileError,\r\n  uploadImageFinished,\r\n} from './actions';\r\nimport { uploadFile } from '../common/actions';\r\nimport { getAttributeFromProfiles } from './selectors';\r\n\r\nexport function* createProfile({ payload }): Generator<PutEffect<any>> {\r\n  const {\r\n    backToProfileList,\r\n    name,\r\n    imageData: { file },\r\n  }: TProfileFormData = payload;\r\n  const path = `${StoragePath.profiles}/${name}`;\r\n  const data = yield select(getAttributeFromProfiles('data'));\r\n  const profileId = generateProfileId(data);\r\n\r\n  try {\r\n    yield put(uploadFile({ action: uploadImageFinished, path, file }));\r\n\r\n    const { payload } = yield take(ProfilesActionsType.uploadImageFinished);\r\n    const src = afterUploadImageHandler(payload);\r\n\r\n    yield getRefDatabase([DatabaseColumns.profiles]).set([\r\n      ...data,\r\n      { name, online: false, profileId, src },\r\n    ]);\r\n    yield put(createProfileSuccess());\r\n    yield backToProfileList();\r\n  } catch (error) {\r\n    yield put(createProfileError(error));\r\n  }\r\n}\r\n","import { all, AllEffect, ForkEffect, takeEvery } from 'redux-saga/effects';\r\n\r\n// store\r\nimport { createProfile } from './saga';\r\nimport { ProfilesActionsType } from './actionsType';\r\n\r\nexport function* watchProfiles(): Generator<AllEffect<ForkEffect<any>>> {\r\n  yield all([\r\n    // @ts-ignore\r\n    takeEvery(ProfilesActionsType.createProfile, createProfile),\r\n  ]);\r\n}\r\n","// @ts-nocheck\r\nimport { SagaMiddleware } from 'redux-saga';\r\n\r\n// store\r\nimport { watchAuth } from './auth/watch';\r\nimport { watchCommonStore } from './common/watch';\r\nimport { watchProfiles } from './profiles/watch';\r\n\r\nconst watches = [watchAuth, watchCommonStore, watchProfiles];\r\n\r\nconst sagaMiddlewareRuns = (sagaMiddleware: SagaMiddleware): void => {\r\n  for (const watch of watches) sagaMiddleware.run(watch);\r\n};\r\n\r\nexport default sagaMiddlewareRuns;\r\n","// @ts-nocheck\r\nimport {\r\n  Action,\r\n  applyMiddleware,\r\n  CombinedState,\r\n  createStore,\r\n  Store,\r\n} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport thunk from 'redux-thunk';\r\n\r\n// store\r\nimport reducers from './reducers';\r\nimport sagaMiddlewareRuns from './watchers';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst configureStore = (): Store<CombinedState<any>, Action> => {\r\n  const store = createStore(\r\n    reducers(),\r\n    {},\r\n    composeWithDevTools(applyMiddleware(...[thunk], sagaMiddleware))\r\n  );\r\n  sagaMiddlewareRuns(sagaMiddleware);\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n// components\r\nimport App from './components/App/App';\r\nimport Firebase from './components/Firebase/Firebase';\r\n\r\n// store\r\nimport configureStore from './store/configureStore';\r\n\r\n// styles\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={configureStore()}>\r\n      <Firebase />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}